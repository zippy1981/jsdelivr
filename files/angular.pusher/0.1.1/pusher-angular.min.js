"use strict";angular.module("pusher-angular",[]).factory("$pusher",["$rootScope","$q","$channel","$connection",function(n,e,t,i){function s(n){return this instanceof s?(this._assertValidClient(n),this.client=n,this.connection=i(n.connection,n),void(this.channels={})):new s(n)}return s.prototype={subscribe:function(n){var e=t(this.client.subscribe(n),this);return this.channels[n]=e,e},unsubscribe:function(n){this.client.channel(n)&&(this.client.unsubscribe(n),this.channels[n]&&delete this.channels[n])},bind:function(e,t){this.client.bind(e,function(e){t(e),n.$digest()})},bind_all:function(e){this.client.bind_all(function(t,i){e(t,i),n.$digest()})},disconnect:function(){this.client.disconnect()},channel:function(n){return this.channels[n]},allChannels:function(){return this.channels},_assertValidClient:function(n){if(!angular.isObject(n)||!angular.isObject(n.connection)||"function"!=typeof n.channel)throw new Error("Invalid Pusher client object")}},s}]).factory("$channel",["$rootScope","$q","$members",function(n,e,t){function i(n){if(-1==n.indexOf("presence-"))throw new Error("Presence channel required")}function s(n,e){return this instanceof s?(this._assertValidChannel(n),this.baseChannel=n,this.client=e,this.name=n.name,void(this.members=-1==n.name.indexOf("presence")?function(){throw new Error("Members object only exists for presence channels")}:t(n.members,n))):new s(n,e)}return s.prototype={bind:function(e,t){this.baseChannel.bind(e,function(e){t(e),n.$digest()})},bind_all:function(e){this.baseChannel.bind_all(function(t,i){e(t,i),n.$digest()})},trigger:function(n,e){if(i(this.name),-1==n.indexOf("client-"))throw new Error("Event name requires 'client-' prefix");return this.baseChannel.trigger(n,e)},_assertValidChannel:function(n){if(!angular.isObject(n)||"string"!=typeof n.name)throw new Error("Invalid Pusher channel object")}},s}]).factory("$members",["$rootScope","$q",function(n){function e(t,i){if(!(this instanceof e))return new e(t,i);var s=this;this._assertValidMembers(t),this.baseMembers=t,this.baseChannel=i,this.me={},this.count=0,this.members={},i.bind("pusher:subscription_succeeded",function(e){s.me=e.me,s.count=e.count,s.members=e.members,n.$digest()}),i.bind("pusher:member_added",function(e){s.count++,s.members[e.id.toString()]=e.info?e.info:null,n.$digest()}),i.bind("pusher:member_removed",function(e){s.count--,delete s.members[e.id.toString()],n.$digest()})}return e.prototype={get:function(n){return this.baseMembers.get(n)},each:function(e){this.baseMembers.each(function(t){e(t),n.$digest()})},_assertValidMembers:function(n){if(!angular.isObject(n)||"object"!=typeof n.me)throw new Error("Invalid Pusher channel members object")}},e}]).factory("$connection",["$rootScope","$q",function(n){function e(n,t){if(!(this instanceof e))return new e(n,t);this._assertValidConnection(n),this.baseConnection=n,this.baseClient=t}return e.prototype={bind:function(e,t){this.baseConnection.bind(e,function(e){t(e),n.$digest()})},bind_all:function(e){this.baseConnection.bind_all(function(t,i){e(t,i),n.$digest()})},_assertValidConnection:function(n){if(!angular.isObject(n))throw new Error("Invalid Pusher connection object")}},e}]);