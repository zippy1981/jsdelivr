{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/entry.js","yasqe.min.js","lib/deparam.js","lib/flint.js","lib/trie.js","node_modules/codemirror/addon/display/fullscreen.js","node_modules/codemirror/addon/edit/matchbrackets.js","node_modules/codemirror/addon/fold/brace-fold.js","node_modules/codemirror/addon/fold/foldcode.js","node_modules/codemirror/addon/fold/foldgutter.js","node_modules/codemirror/addon/fold/xml-fold.js","node_modules/codemirror/addon/hint/show-hint.js","node_modules/codemirror/addon/runmode/runmode.js","node_modules/codemirror/addon/search/searchcursor.js","node_modules/yasgui-utils/node_modules/store/store.js","node_modules/yasgui-utils/package.json","node_modules/yasgui-utils/src/main.js","node_modules/yasgui-utils/src/storage.js","node_modules/yasgui-utils/src/svg.js","package.json","src/autocompleters/autocompleterBase.js","src/autocompleters/classes.js","src/autocompleters/prefixes.js","src/autocompleters/properties.js","src/autocompleters/utils.js","src/autocompleters/variables.js","src/defaults.js","src/imgs.js","src/main.js","src/prefixUtils.js","src/sparql.js","src/tokenUtils.js","src/tooltip.js","src/utils.js"],"names":["e","exports","module","define","amd","f","window","global","self","YASQE","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"./main.js",2,"$","jQuery","deparam","params","coerce","obj","coerce_types","true","false","null","each","replace","split","j","v","val","param","key","decodeURIComponent","cur","keys","keys_last","test","shift","concat","isNaN","undefined","isArray","push","jquery",3,"mod","CodeMirror","defineMode","config","getTerminals","PN_LOCAL","BLANK_NODE_LABEL","IRI_REF","PN_CHARS_BASE","PN_CHARS_U","PN_CHARS","VARNAME","VAR1","VAR2","PN_PREFIX","HEX","PERCENT","PN_LOCAL_ESC","PLX","lexVersion","PNAME_NS","PNAME_LN","LANGTAG","EXPONENT","INTEGER","DECIMAL","DOUBLE","INTEGER_POSITIVE","DECIMAL_POSITIVE","DOUBLE_POSITIVE","INTEGER_NEGATIVE","DECIMAL_NEGATIVE","DOUBLE_NEGATIVE","ECHAR","STRING_LITERAL1","STRING_LITERAL2","STRING_LITERAL_LONG1","STRING_LITERAL_LONG2","WS","COMMENT","WS_OR_COMMENT_STAR","NIL","ANON","terminals","terminal","name","regex","RegExp","style","getPossibles","symbol","possibles","possiblesOb","ll1_table","property","toString","tokenBase","stream","state","nextToken","consumed","match","cat","text","keywords","current","toUpperCase","punct","recordFailurePos","col","column","errorStartPos","errorEndPos","tokenOb","setQueryType","queryType","setSideConditions","topSymbol","allowVars","allowBnodes","storeProperty","checkSideConditions","pos","possibleCurrent","possibleNext","OK","complete","finished","token","stack","pop","nextSymbols","allNillable","sp","item","lastProperty","indent","textAfter","closeBracket","substr","dn","indentTop","indentTable","indentUnit","*[&&,valueLogical]","&&","AS",")",",","||",";","*[,,expression]","*[,,objectPath]",".","]","{","OPTIONAL","MINUS","GRAPH","SERVICE","FILTER","BIND","VALUES","}","*[,,object]","*[/,pathEltOrInverse]","/","|","(","[","TRUE","FALSE","*[;,?[or([verbPath,verbSimple]),objectList]]","*[;,?[verb,objectList]]","*[UNION,groupGraphPattern]","UNION","*[graphPatternNotTriples,?.,?triplesBlock]","*[quadsNotTriples,?.,?triplesTemplate]","*[|,pathOneInPropertySet]","*[|,pathSequence]","*[||,conditionalAndExpression]","*dataBlockValue","UNDEF","*datasetClause","FROM","WHERE","*describeDatasetClause","ORDER","HAVING","GROUP","LIMIT","OFFSET","*graphNode","*graphNodePath","*groupCondition","STR","LANG","LANGMATCHES","DATATYPE","BOUND","IRI","URI","BNODE","RAND","ABS","CEIL","FLOOR","ROUND","CONCAT","STRLEN","UCASE","LCASE","ENCODE_FOR_URI","CONTAINS","STRSTARTS","STRENDS","STRBEFORE","STRAFTER","YEAR","MONTH","DAY","HOURS","MINUTES","SECONDS","TIMEZONE","TZ","NOW","UUID","STRUUID","MD5","SHA1","SHA256","SHA384","SHA512","COALESCE","IF","STRLANG","STRDT","SAMETERM","ISIRI","ISURI","ISBLANK","ISLITERAL","ISNUMERIC","SUBSTR","REPLACE","REGEX","EXISTS","NOT","*havingCondition","*or([[ (,*dataBlockValue,)],NIL])","*or([[*,unaryExpression],[/,unaryExpression]])","*","=","!=","<",">","<=",">=","IN","+","-","*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])","*or([var,[ (,expression,AS,var,)]])","*orderCondition","ASC","DESC","*prefixDecl","PREFIX","CONSTRUCT","DESCRIBE","ASK","INSERT","DELETE","SELECT","LOAD","CLEAR","DROP","ADD","MOVE","COPY","CREATE","WITH","*usingClause","USING","*var","*varOrIRIref","+graphNode","+graphNodePath","+groupCondition","+havingCondition","+or([var,[ (,expression,AS,var,)]])","+orderCondition","+varOrIRIref","?.","?DISTINCT","DISTINCT","!","COUNT","SUM","MIN","MAX","AVG","SAMPLE","GROUP_CONCAT","?GRAPH","?SILENT","SILENT","?SILENT_1","?SILENT_2","DEFAULT","NAMED","ALL","?SILENT_3","?SILENT_4","?WHERE","?[,,expression]","?[.,?constructTriples]","?[.,?triplesBlock]","?[.,?triplesTemplate]","?[;,SEPARATOR,=,string]","?[;,update]","?[AS,var]","?[INTO,graphRef]","INTO","?[or([verbPath,verbSimple]),objectList]","^","?[pathOneInPropertySet,*[|,pathOneInPropertySet]]","?[update1,?[;,update]]","?[verb,objectList]","?argList","?baseDecl","BASE","?constructTriples","?groupClause","?havingClause","?insertClause","?limitClause","?limitOffsetClauses","?offsetClause","?or([DISTINCT,REDUCED])","REDUCED","?or([LANGTAG,[^^,iriRef]])","^^","?or([[*,unaryExpression],[/,unaryExpression]])","?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])","?orderClause","?pathMod","?","?triplesBlock","?triplesTemplate","?whereClause","[ (,*dataBlockValue,)]","[ (,*var,)]","[ (,expression,)]","[ (,expression,AS,var,)]","[!=,numericExpression]","[&&,valueLogical]","[*,unaryExpression]","[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]","[+,multiplicativeExpression]","[,,expression]","[,,integer,}]","[,,objectPath]","[,,object]","[,,or([},[integer,}]])]","[-,multiplicativeExpression]","[.,?constructTriples]","[.,?triplesBlock]","[.,?triplesTemplate]","[/,pathEltOrInverse]","[/,unaryExpression]","[;,?[or([verbPath,verbSimple]),objectList]]","[;,?[verb,objectList]]","[;,SEPARATOR,=,string]","[;,update]","[<,numericExpression]","[<=,numericExpression]","[=,numericExpression]","[>,numericExpression]","[>=,numericExpression]","[AS,var]","[IN,expressionList]","[INTO,graphRef]","[NAMED,iriRef]","[NOT,IN,expressionList]","[UNION,groupGraphPattern]","[^^,iriRef]","[constructTemplate,*datasetClause,whereClause,solutionModifier]","[deleteClause,?insertClause]","[graphPatternNotTriples,?.,?triplesBlock]","[integer,or([[,,or([},[integer,}]])],}])]","[integer,}]","[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]","[or([verbPath,verbSimple]),objectList]","[pathOneInPropertySet,*[|,pathOneInPropertySet]]","[quadsNotTriples,?.,?triplesTemplate]","[update1,?[;,update]]","[verb,objectList]","[|,pathOneInPropertySet]","[|,pathSequence]","[||,conditionalAndExpression]","add","additiveExpression","aggregate","argList","askQuery","baseDecl","bind","blankNode","blankNodePropertyList","blankNodePropertyListPath","booleanLiteral","brackettedExpression","builtInCall","clear","collection","collectionPath","conditionalAndExpression","conditionalOrExpression","constraint","constructQuery","constructTemplate","constructTriples","copy","create","dataBlock","dataBlockValue","datasetClause","defaultGraphClause","delete1","DATA","deleteClause","describeDatasetClause","describeQuery","disallowBnodes","disallowVars","drop","existsFunc","expression","expressionList","filter","functionCall","graphGraphPattern","graphNode","graphNodePath","graphOrDefault","graphPatternNotTriples","graphRef","graphRefAll","graphTerm","groupClause","groupCondition","groupGraphPattern","groupGraphPatternSub","groupOrUnionGraphPattern","havingClause","havingCondition","inlineData","inlineDataFull","inlineDataOneVar","insert1","insertClause","integer","iriRef","iriRefOrFunction","limitClause","limitOffsetClauses","load","minusGraphPattern","modify","move","multiplicativeExpression","namedGraphClause","notExistsFunc","numericExpression","numericLiteral","numericLiteralNegative","numericLiteralPositive","numericLiteralUnsigned","object","objectList","objectListPath","objectPath","offsetClause","optionalGraphPattern","or([*,expression])","or([+or([var,[ (,expression,AS,var,)]]),*])","or([+varOrIRIref,*])","or([ASC,DESC])","or([DISTINCT,REDUCED])","or([LANGTAG,[^^,iriRef]])","or([NIL,[ (,*var,)]])","or([[ (,*dataBlockValue,)],NIL])","or([[ (,expression,)],NIL])","or([[*,unaryExpression],[/,unaryExpression]])","or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])","or([[,,or([},[integer,}]])],}])","or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])","or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])","or([[deleteClause,?insertClause],insertClause])","or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])","or([defaultGraphClause,namedGraphClause])","or([inlineDataOneVar,inlineDataFull])","or([iriRef,[NAMED,iriRef]])","or([iriRef,a])","or([numericLiteralPositive,numericLiteralNegative])","or([queryAll,updateAll])","or([selectQuery,constructQuery,describeQuery,askQuery])","or([subSelect,groupGraphPatternSub])","or([var,[ (,expression,AS,var,)]])","or([verbPath,verbSimple])","or([},[integer,}]])","orderClause","orderCondition","path","pathAlternative","pathElt","pathEltOrInverse","pathMod","pathNegatedPropertySet","pathOneInPropertySet","pathPrimary","pathSequence","prefixDecl","prefixedName","primaryExpression","prologue","propertyList","propertyListNotEmpty","propertyListPath","propertyListPathNotEmpty","quadData","quadDataNoBnodes","quadPattern","quadPatternNoBnodes","quads","quadsNotTriples","queryAll","rdfLiteral","regexExpression","relationalExpression","selectClause","selectQuery","serviceGraphPattern","solutionModifier","sourceSelector","sparql11","strReplaceExpression","string","subSelect","substringExpression","triplesBlock","triplesNode","triplesNodePath","triplesSameSubject","triplesSameSubjectPath","triplesTemplate","unaryExpression","update","update1","updateAll","usingClause","valueLogical","valuesClause","var","varOrIRIref","varOrTerm","verb","verbPath","verbSimple","whereClause","defaultQueryType","startSymbol","acceptEmpty","tms","*[,, object]","*[(,),object]","*[(,),objectPath]","?[or([verbPath, verbSimple]),objectList]","startState","tokenize","electricChars","defineMIME","codemirror",4,"Trie","this","words","prefixes","children","prototype","insert","str","k","child","T","remove","strOld","strNew","countWord","ret","countPrefix","find","getAllWords","autoComplete",5,"setFullscreen","cm","wrap","getWrapperElement","fullScreenRestore","scrollTop","pageYOffset","scrollLeft","pageXOffset","width","height","className","document","documentElement","overflow","refresh","setNormal","info","scrollTo","defineOption","old","Init",6,"findMatchingBracket","where","strict","line","getLineHandle","ch","matching","charAt","dir","getTokenTypeAt","Pos","found","scanForBracket","from","to","forward","maxScanLen","maxScanLineLength","maxScanLines","re","bracketRegex","lineEnd","Math","min","lastLine","max","firstLine","lineNo","getLine","end","matchBrackets","autoclear","maxHighlightLen","maxHighlightLineLength","marks","ranges","listSelections","empty","head","markText","ie_lt8","focused","display","input","focus","operation","setTimeout","doMatchBrackets","currentlyHighlighted","navigator","userAgent","documentMode","off","on","defineExtension",7,"registerHelper","start","findOpening","openCh","at","pass","lineText","lastIndexOf","tokenType","startCh","startToken","endToken","endCh","count","outer","nextOpen","indexOf","nextClose","hasImport","getTokenAt","type","semi","prev","has","next","clipPos","hasInclude","slice",8,"doFold","options","force","getRange","allowFolded","range","finder","minSize","findMarksAt","__isFold","cleared","getOption","myWidget","makeWidget","myRange","e_preventDefault","replacedWith","clearOnEnter","signal","widget","createTextNode","createElement","appendChild","editorOptions","foldOptions","defaultOptions","newFoldFunction","rangeFinder","commands","toggleFold","foldCode","getCursor","fold","unfold","foldAll","unfoldAll","funcs","Array","arguments","helpers","getHelpers","auto","minFoldSize","scanUp",9,"State","parseOptions","opts","gutter","indicatorOpen","indicatorFolded","isFolded","marker","spec","elt","cloneNode","updateFoldInfo","foldGutter","foldOption","func","eachLine","mark","setGutterMarker","updateInViewport","vp","getViewport","onGutterClick","onChange","clearTimeout","changeUpdate","foldOnChangeTimeSpan","onViewportChange","updateViewportTimeSpan","onFold","clearGutter","./foldcode",10,"cmp","b","Iter","tagAt","iter","nextLine","prevLine","toTagEnd","gt","lastSlash","selfClose","toTagStart","lt","xmlTagStart","lastIndex","exec","index","toNextTag","toPrevTag","findMatchingClose","tag","startLine","findMatchingOpen","endLine","nameStartChar","nameChar","openTag","close","findMatchingTag","here","open","findEnclosingTag","scanForClosingTag",11,"Completion","buildOptions","onClose","getText","completion","buildKeyMap","handle","addBinding","bound","baseMap","hasOwnProperty","ourMap","Up","moveFocus","Down","PageUp","menuSize","PageDown","Home","setFocus","End","Enter","pick","Tab","Esc","custom","customKeys","extra","extraKeys","getHintElement","hintsElement","el","nodeName","parentNode","Widget","data","hints","selectedHint","completions","list","HINT_ELEMENT_CLASS","ACTIVE_HINT_ELEMENT_CLASS","render","displayText","hintId","cursorCoords","alignWithWord","left","top","bottom","below","winW","innerWidth","body","offsetWidth","winH","innerHeight","offsetHeight","container","box","getBoundingClientRect","overlapY","curTop","cursor","overlapX","right","addKeyMap","keyMap","avoidWrap","changeActive","screenAmount","closeOnUnfocus","closingOnBlur","onBlur","onFocus","startScroll","getScrollInfo","onScroll","curScroll","editor","newTop","point","target","srcElement","completeOnSingleClick","firstChild","showHint","getHints","async","newOpts","hint","prop","somethingSelected","completionActive","showHints","active","replaceRange","completeSingle","showWidget","done","activity","finishUpdate","data_","clearDebounce","debounce","cancelAnimationFrame","startPos","startLen","closeOn","requestAnimationFrame","closeCharacters","fn","hintOptions","out","removeChild","removeKeyMap","node","childNodes","offsetTop","clientHeight","floor","getHelper","fromList","anyword","word","autocomplete",12,"runMode","modespec","callback","mode","getMode","defaults","ie","ie_lt9","nodeType","tabSize","innerHTML","content","idx","size","lines","splitLines","StringStream","blankLine","eol",13,"SearchCursor","doc","query","caseFold","atOccurrence","source","ignoreCase","matches","reverse","cutOff","newMatch","matchLen","origQuery","toLowerCase","orig","adjustPos","origTarget","last","ln","cut","folded","pos1","len1","findNext","findPrevious","savePosAndFail","maxLine","lineCount","newText","defineDocExtension","getSearchCursor","cmpPos","anchor","setSelections",14,"win","isLocalStorageNameSupported","localStorageName","err","ieKeyFix","forbiddenCharsRegex","storage","store","scriptTag","disabled","version","set","get","transact","defaultVal","transactionFn","getAll","forEach","serialize","value","JSON","stringify","deserialize","parse","setItem","getItem","removeItem","addBehavior","storageOwner","storageContainer","ActiveXObject","write","w","frames","withIEStorage","storeFunction","args","unshift","result","apply","setAttribute","save","getAttribute","removeAttribute","attributes","XMLDocument","attr","testKey","enabled","Function",15,"description","main","repository","url","licenses","author","maintainers","email","web","bugs","homepage","dependencies",16,"console","log","svg","yasgui-utils","../package.json","./storage.js","./svg.js",17,"times","day","month","year","exp","XMLSerializer","serializeToString","time","Date","getTime",18,"draw","parent","svgString","getElement","append","parser","DOMParser","dom","parseFromString","svgContainer",19,"devDependencies","browserify","gulp","gulp-bump","gulp-concat","gulp-connect","gulp-embedlr","gulp-filter","gulp-git","gulp-jsvalidate","gulp-livereload","gulp-minify-css","gulp-notify","gulp-rename","gulp-streamify","gulp-tag-version","gulp-uglify","require-dir","run-sequence","vinyl-buffer","vinyl-source-stream","watchify","gulp-sourcemaps","exorcist","vinyl-transform","gulp-sass","bootstrap-sass","browserify-transform-tools","gulp-cssimport","optionalShim","../../lib/codemirror",20,"utils","yutils","yasqe","completionNotifications","completers","tries","needPossibleAdjustment","notificationName","is","scrollBar","offset","outerWidth","notification","css","storeBulkCompletions","completer","storageId","getPersistencyId","persistent","initCompleter","completionInit","bulk","storeArrayAsBulk","suggestions","completionsFromStorage","persistencyIdentifier","fromAutoShow","tryHintType","autoShow","hintConfig","wrappedHintCallback","getCompletionHintsObject","completerName","inArray","autocompleters","isValidCompletionPosition","callbacks","validPosition","success","invalidPosition","getSuggestionsFromToken","partialToken","stringToAutocomplete","autocompletionString","partialTokenLength","getSuggestionsAsHintObject","getCompleteToken","preProcessToken","wrappedCallback","hintList","suggestedString","postProcessToken","selectHint","returnObj","completionToken","callbackName","init","notifications","getEl","show","autoshow","appendTo","hide","getTrie","../../lib/trie.js","../utils.js",21,"fetchFromLov","previousToken","getPreviousNonWsToken","preprocessResourceTokenForCompletion","postprocessResourceTokenForCompletion","./utils","./utils.js",22,"tokenTypes","string-2","atom","appendPrefixIfNeeded","prefixArray","prefix","completeString","sort","preprocessPrefixTokenForCompletion","colonIndex","lastNonWsTokenString","currentPrefix","substring","queryPrefixes","getPrefixesFromQuery","addPrefixes",23,24,"tokenPrefix","tokenPrefixUri","trim","maxResults","q","page","results","updateUrl","increasePage","doRequests","uri","total_results","fail","loader","addClass","../imgs.js",25,"distinctVars","variable","nextEl","nextElClass","variables",26,"extend","highlightSelectionMatches","showToken","tabMode","lineNumbers","lineWrapping","brace","gutters","fixedGutter","syntaxErrorCheck","Ctrl-Space","Cmd-Space","Ctrl-D","deleteLine","Ctrl-K","Cmd-D","Cmd-K","Ctrl-/","commentLines","Cmd-/","Ctrl-Alt-Down","copyLineDown","Ctrl-Alt-Up","copyLineUp","Cmd-Alt-Down","Cmd-Alt-Up","Shift-Ctrl-F","doAutoFormat","Shift-Cmd-F","Ctrl-]","indentMore","Cmd-]","Ctrl-[","indentLess","Cmd-[","Ctrl-S","storeQuery","Cmd-S","Ctrl-Enter","executeQuery","Cmd-Enter","F11","setOption","cursorHeight","createShareLink","consumeShareLink","closest","sparql","showQueryButton","endpoint","requestMethod","acceptHeaderGraph","acceptHeaderSelect","acceptHeaderUpdate","namedGraphs","defaultGraphs","headers","beforeSend","error","handlers",27,"queryInvalid","download","share","warning","fullscreen","smallscreen",28,"imgs","root","rootEl","class","extendConfig","extendCmInstance","postProcessCmElement","extendedConfig","Autocompleters","getNextNonWsToken","lineNumber","charNumber","callbackOrConfig","getUrlArguments","removePrefixes","getValueWithoutComments","cleanedQuery","getValue","stringVal","getQueryType","getQueryMode","setCheckSyntaxErrors","isEnabled","checkSyntax","enableCompleter","addCompleterToSettings","disableCompleter","removeCompleterFromSettings","settings","splice","valueFromStorage","setValue","drawButtons","updateQueryButton","positionButtons","updateButtonsTransparency","prevQueryValid","urlParams","location","search","buttons","elementsOverlap","deepcheck","queryValid","precise","warningEl","expectedEncoded","expected","html","join","marginTop","marginLeft","len","registerAutocompleter","constructor","svgShare","click","event","stopPropagation","popup","textAreaLink","protocol","host","pathname","$this","select","mouseup","unbind","positions","position","outerHeight","toggleFullscreen","hasClass","xhr","abort","queryButtonIds","busy","valid","status","queryButton","queryStatus","removeClass","classNames","c","fromTextArea","textAreaEl","insertBefore","linesAreCommented","setCursor","getSelection","autoFormatRange","totalLines","totalChars","getTextArea","absStart","indexFromPos","absEnd","res","autoFormatLineBreaks","posFromIndex","indentLine","breakAfterArray","breakAfterCharacters","breakBeforeCharacters","getBreakType","stackTrace","valueOf","currentLine","formattedQuery","breakType","../lib/deparam.js","../lib/flint.js","./autocompleters/autocompleterBase.js","./autocompleters/classes.js","./autocompleters/prefixes.js","./autocompleters/properties.js","./autocompleters/variables.js","./defaults.js","./imgs.js","./prefixUtils.js","./sparql.js","./tokenUtils.js","./tooltip","codemirror/addon/display/fullscreen.js","codemirror/addon/edit/matchbrackets.js","codemirror/addon/fold/brace-fold.js","codemirror/addon/fold/foldcode.js","codemirror/addon/fold/foldgutter.js","codemirror/addon/fold/xml-fold.js","codemirror/addon/hint/show-hint.js","codemirror/addon/runmode/runmode.js","codemirror/addon/search/searchcursor.js",29,"existingPrefixes","addPrefixAsString","pref","prefixString","lastPrefix","lastPrefixLine","numLines","firstToken","previousIndent","getIndentFromLine","escapeRegex","shouldContinue","getPrefixesFromLine","lineOffset","colOffset","uriString",30,"ajaxConfig","Accept","getAcceptHeader","handlerDefined","handler","isEmptyObject","ajax","queryMode","argName","merge","acceptHeader","qType",31,"prevToken",32,"tooltip","hover","repositionTooltip",33,"keyExists","objectToTest","exists","persistentIdCreator","persistencyId","getPositions","elem","comparePositions","p1","p2","r1","r2","pos2"],"mappings":"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sBACAC,MACAC,OACAC,OACAC,QACAC,QACAC,mBACAH,KAAA,iBAAA,mBACAD,QACAK,mBACAJ,KAAA,iBAAA,mBACAK,OACAH,OACAI,OACAC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACAC,eACAhB,KAAA,aAAA,eACAK,OACAH,OACAI,OACAS,OACAL,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WACAG,yBACAC,KAAA,uBAAA,yBACAC,OACApB,OACAqB,OACAC,OACArH,QACAC,QACA4B,OACAlC,WACA2H,QACAC,SACA7H,oBACAoC,QACArB,YACAD,YACAc,mBACAC,mBACAC,wBACAC,wBACAb,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBACAoG,gDACAtB,KAAA,8CAAA,gDACAG,OACAC,OACAC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACAU,2BACAvB,KAAA,yBAAA,2BACAG,OACAC,OACAS,OACAL,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WACAY,8BACAC,OAAA,4BAAA,8BACA3H,QACAC,QACA4B,OACAuF,OACAC,OACA1H,WACA2H,QACAC,SACA7H,oBACAoC,QACArB,YACAD,YACAc,mBACAC,mBACAC,wBACAC,wBACAb,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAiF,OACAE,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACAa,8CACArB,KAAA,4CAAA,8CACAC,UAAA,4CAAA,8CACAC,OAAA,4CAAA,8CACAC,OAAA,4CAAA,8CACAC,SAAA,4CAAA,8CACAC,QAAA,4CAAA,8CACAC,MAAA,4CAAA,8CACAC,QAAA,4CAAA,8CACAC,QACAc,0CACAnB,OAAA,wCAAA,0CACAK,QACAe,6BACAX,KAAA,2BAAA,6BACApB,QACAgC,qBACAZ,KAAA,mBAAA,qBACApB,OACAqB,OACAC,OACArH,QACAC,QACA4B,OACAlC,WACA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mBACAC,OAAA,iBAAA,mBACAC,SAAA,iBAAA,mBACAC,SAAA,iBAAA,mBACAC,UAAA,iBAAA,mBACAC,IAAA,iBAAA,mBACAC,KAAA,iBAAA,mBACAC,MAAA,iBAAA,mBACAC,SAAA,iBAAA,mBACAC,KAAA,iBAAA,mBACAC,MAAA,iBAAA,mBACAC,QAAA,iBAAA,mBACAC,QAAA,iBAAA,mBACAC,QAAA,iBAAA,mBACAC,UAAA,iBAAA,mBACAC,IAAA,iBAAA,mBACAC,SAAA,iBAAA,mBACAC,OAAA,iBAAA,mBACAC,UAAA,iBAAA,mBACAC,OAAA,iBAAA,mBACAC,OAAA,iBAAA,mBACAC,SAAA,iBAAA,mBACAC,WAAA,iBAAA,mBACAC,WAAA,iBAAA,mBACAC,QAAA,iBAAA,mBACAC,SAAA,iBAAA,mBACAC,OAAA,iBAAA,mBACAC,QAAA,iBAAA,mBACAC,KAAA,iBAAA,mBACAzM,SAAA,iBAAA,mBACAc,UAAA,iBAAA,mBACAD,UAAA,iBAAA,oBACAyO,gBACAjP,MAAA,cAAA,gBACAC,MAAA,cAAA,gBACAN,SAAA,cAAA,gBACAc,UAAA,cAAA,gBACAD,UAAA,cAAA,iBACA0O,MACA7I,KAAA,KACArG,QACAC,QACA4B,OACAuF,OACAC,OACA1H,WACA2H,QACAC,SACA7H,oBACAoC,QACArB,YACAD,YACAc,mBACAC,mBACAC,wBACAC,wBACAb,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAsF,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,UACAC,QACAoI,aACAC,UAAA,YACAC,OACArC,OACAC,OACAjN,QACAC,QACAmH,OACA2B,OACAC,QACAC,eACAC,YACAC,SACAC,OACAC,OACAC,SACAC,QACAC,OACAC,QACAC,SACAC,SACAC,UACAC,UACAC,SACAC,SACAC,kBACAC,YACAC,aACAC,WACAC,aACAC,YACAC,QACAC,SACAC,OACAC,SACAC,WACAC,WACAC,YACAC,MACAC,OACAC,QACAC,WACAC,OACAC,QACAC,UACAC,UACAC,UACAC,YACAC,MACAC,WACAC,SACAC,YACAC,SACAC,SACAC,WACAC,aACAC,aACAzE,QACAC,SACA+H,SACAC,OACAC,OACAC,OACAC,OACAC,UACAC,gBACA5D,UACAC,WACAC,SACAC,UACAC,OACAzM,WACA2B,mBACAC,mBACAC,wBACAC,wBACAb,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAX,YACAD,YACAgM,QACAqD,UACAnJ,OAAA,SACA/G,WACAc,YACAD,aACAsP,WACAC,QAAA,UACA/P,QACAC,QACAN,WACAc,YACAD,aACAwP,aACAD,QAAA,UACApQ,WACAc,YACAD,aACAyP,aACAF,QAAA,UACArJ,SACAwJ,WACAC,SACAC,QACAC,aACAN,QAAA,UACArJ,UACA4J,aACAP,QAAA,UACAG,WACAxJ,SACA/G,WACAc,YACAD,aACA+P,UACAlI,OAAA,SACA9B,QACAiK,mBACAxK,KAAA,kBACAD,QACA0K,0BACApK,KAAA,yBACAU,QACA2J,sBACArK,KAAA,qBACAE,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACA4J,yBACAtK,KAAA,wBACAU,OACAL,UACAkK,2BACA1K,KAAA,0BACAH,QACA8K,eACA3K,KAAA,cACA7I,MACAyT,aACAhL,IAAA,YACAC,QACAgL,oBACAC,MAAA,mBACA9K,OACA7I,MACA4T,2CACAjR,MAAA,0CACAC,MAAA,0CACAiR,KAAA,0CACAxU,GAAA,0CACA2S,KAAA,0CACAjI,KAAA,0CACAzH,SAAA,0CACAc,UAAA,0CACAD,UAAA,0CACA0F,OACAG,OACAC,OACAC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACAoK,qDACAzU,GAAA,oDACAwU,KAAA,oDACAvR,SAAA,oDACAc,UAAA,oDACAD,UAAA,oDACAuF,QACAqL,0BACAxD,QAAA,yBACAC,QAAA,yBACAE,MAAA,yBACAC,OAAA,yBACAC,MAAA,yBACAC,KAAA,yBACAC,MAAA,yBACAC,MAAA,yBACAC,QAAA,yBACAC,MAAA,yBACAjR,MACAgU,sBACA3U,GAAA,qBACAsD,MAAA,qBACAC,MAAA,qBACAN,SAAA,qBACAc,UAAA,qBACAD,UAAA,qBACA0F,OACAG,OACAC,OACAS,OACAL,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WACAwK,YACAzP,KAAA,WACAuF,KAAA,WACAtB,MACAC,OACAC,OACAC,QACAJ,QACA4G,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAX,OACAY,OACAC,OACAlM,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAoL,OACAtF,OACAhB,QACAqL,aACAC,MAAA,YACAnU,KACAoQ,aACAC,YACAC,OACAC,UACAC,UACAC,UACAC,QACAC,SACAC,QACAC,OACAC,QACAC,QACAC,UACAC,QACAd,WACAiE,qBACAzR,MAAA,oBACAC,MAAA,oBACA4B,KAAA,oBACAuF,KAAA,oBACAC,KAAA,oBACA1H,SAAA,oBACA2H,MAAA,oBACAC,OAAA,oBACA7H,kBAAA,oBACAoC,MAAA,oBACArB,UAAA,oBACAD,UAAA,oBACAc,iBAAA,oBACAC,iBAAA,oBACAC,sBAAA,oBACAC,sBAAA,oBACAb,SAAA,oBACAC,SAAA,oBACAC,QAAA,oBACAC,kBAAA,oBACAC,kBAAA,oBACAC,iBAAA,oBACAC,kBAAA,oBACAC,kBAAA,oBACAC,iBAAA,oBACA2F,QACA2K,gBACAjJ,OAAA,eACA3B,UACA4B,SACAC,UACAJ,SACAC,UACAnL,KACA0J,QACA4K,iBACAnJ,QAAA,gBACA1B,UACA4B,SACAC,UACAJ,SACAlL,KACA0J,QACA6K,iBACAhE,QAAA,gBACAvF,SACAmG,UACAqD,gBACAnJ,OAAA,eACA5B,UACAzJ,KACA0J,QACA+K,uBACApJ,OAAA,sBACAC,QAAA,sBACA7B,UACAzJ,KACA0J,QACAgL,iBACApJ,QAAA,gBACA7B,UACAzJ,KACA0J,QACAiL,2BACA5C,UAAA,0BACA6C,SAAA,0BACAzF,OACApF,OACApH,QACAC,SACAiS,8BACAxR,SAAA,6BACAyR,MAAA,6BACAjK,SACAvI,WACA2H,QACAC,SACA9G,YACAD,YACAc,mBACAC,mBACAC,wBACAC,wBACAb,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACA1E,KACAsD,QACAC,QACAiR,OACA7B,OACAjI,OACAf,OACAH,OACAF,OACAF,MACAC,OACAE,QACAJ,QACA4G,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAX,OACAY,OACAC,OACAT,OACAtF,OACAH,OACAM,OACAxF,OACAnC,oBACAoC,QACAwE,OACAI,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WACAsL,kDACA5F,KAAA,iDACAtF,KAAA,iDACA8F,OACAC,OACAlM,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACA0E,MACAC,OACAC,OACAC,QACAJ,QACA4G,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAX,OACAlG,QACAmM,6LACA5F,KAAA,4LACAC,MAAA,4LACAC,KAAA,4LACAC,KAAA,4LACAC,MAAA,4LACAC,MAAA,4LACAC,IAAA,4LACAX,KAAA,4LACAtG,MACAC,OACAC,OACAC,QACAJ,QACAK,QACAoM,gBACA/J,OAAA,eACAzB,UACA4B,SACAC,UACAtL,KACA0J,QACAwL,YACA/F,KAAA,WACAgG,KAAA,WACAxF,KAAA,WACAzG,KAAA,WACAY,OACAD,OACAnB,OACAqB,OACAC,OACArH,QACAC,QACA4B,OACAlC,WACA2H,QACAC,SACA7H,oBACAoC,QACArB,YACAD,YACAc,mBACAC,mBACAC,wBACAC,wBACAb,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBACAqR,iBACAzS,MAAA,gBACAC,MAAA,gBACA4B,KAAA,gBACAuF,KAAA,gBACAC,KAAA,gBACA1H,SAAA,gBACA2H,MAAA,gBACAC,OAAA,gBACA7H,kBAAA,gBACAoC,MAAA,gBACArB,UAAA,gBACAD,UAAA,gBACAc,iBAAA,gBACAC,iBAAA,gBACAC,sBAAA,gBACAC,sBAAA,gBACAb,S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SAAA,kBACAC,QAAA,kBACAC,kBAAA,kBACAC,kBAAA,kBACAC,iBAAA,kBACAC,kBAAA,kBACAC,kBAAA,kBACAC,iBAAA,kBACAkG,MAAA,kBACAC,OAAA,kBACAW,OAAA,UACAsP,eACApP,MAAA,OAAA,8CACAqP,oBACA9X,SAAA,kBACAc,UAAA,kBACAD,UAAA,mBACAkX,SACAC,MAAA,OAAA,oBACAtP,OAAA,QAAA,uBACA9B,KAAA,sBAAA,gBAAA,eAAA,QAAA,sBACAqR,cACA/J,QAAA,SAAA,gBACAgK,uBACAzP,MAAA,OAAA,8CACA0P,eACApK,UAAA,WAAA,uBAAA,yBAAA,eAAA,qBACAqK,gBACAhR,OACAL,SACA1G,QACAC,QACA4B,OACAuF,OACAC,OACA1H,WACA2H,QACAC,SACA7H,oBACAoC,QACArB,YACAD,YACAc,mBACAC,mBACAC,wBACAC,wBACAb,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBACA4W,cACAjR,OACAL,SACA1G,QACAC,QACA4B,OACAuF,OACAC,OACA1H,WACA2H,QACAC,SACA7H,oBACAoC,QACArB,YACAD,YACAc,mBACAC,mBACAC,wBACAC,wBACAb,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBACA6W,MACAhK,MAAA,OAAA,YAAA,gBACAiK,YACA/L,QAAA,SAAA,sBACAgM,YACA9I,KAAA,2BACArC,KAAA,2BACAC,KAAA,2BACAjN,MAAA,2BACAC,MAAA,2BACAmH,KAAA,2BACA2B,KAAA,2BACAC,MAAA,2BACAC,aAAA,2BACAC,UAAA,2BACAC,OAAA,2BACAC,KAAA,2BACAC,KAAA,2BACAC,OAAA,2BACAC,MAAA,2BACAC,KAAA,2BACAC,MAAA,2BACAC,OAAA,2BACAC,OAAA,2BACAC,QAAA,2BACAC,QAAA,2BACAC,OAAA,2BACAC,OAAA,2BACAC,gBAAA,2BACAC,UAAA,2BACAC,WAAA,2BACAC,SAAA,2BACAC,WAAA,2BACAC,UAAA,2BACAC,MAAA,2BACAC,OAAA,2BACAC,KAA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","file":"yasqe.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","//this is the entry-point for browserify.\n//the current browserify version does not support require-ing js files which are used as entry-point\n//this way, we can still require our main.js file\nmodule.exports = require('./main.js');","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var i;\"undefined\"!=typeof window?i=window:\"undefined\"!=typeof global?i=global:\"undefined\"!=typeof self&&(i=self),i.YASQE=e()}}(function(){var e;return function i(e,r,n){function o(s,a){if(!r[s]){if(!e[s]){var p=\"function\"==typeof require&&require;if(!a&&p)return p(s,!0);if(t)return t(s,!0);var l=new Error(\"Cannot find module '\"+s+\"'\");throw l.code=\"MODULE_NOT_FOUND\",l}var E=r[s]={exports:{}};e[s][0].call(E.exports,function(i){var r=e[s][1][i];return o(r?r:i)},E,E.exports,i,e,r,n)}return r[s].exports}for(var t=\"function\"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(e,i){i.exports=e(\"./main.js\")},{\"./main.js\":28}],2:[function(e){\"use strict\";var i=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}();i.deparam=function(e,r){var n={},o={\"true\":!0,\"false\":!1,\"null\":null};i.each(e.replace(/\\+/g,\" \").split(\"&\"),function(e,t){var s,a=t.split(\"=\"),p=decodeURIComponent(a[0]),l=n,E=0,u=p.split(\"][\"),c=u.length-1;if(/\\[/.test(u[0])&&/\\]$/.test(u[c])){u[c]=u[c].replace(/\\]$/,\"\");u=u.shift().split(\"[\").concat(u);c=u.length-1}else c=0;if(2===a.length){s=decodeURIComponent(a[1]);r&&(s=s&&!isNaN(s)?+s:\"undefined\"===s?void 0:void 0!==o[s]?o[s]:s);if(c)for(;c>=E;E++){p=\"\"===u[E]?l.length:u[E];l=l[p]=c>E?l[p]||(u[E+1]&&isNaN(u[E+1])?{}:[]):s}else i.isArray(n[p])?n[p].push(s):n[p]=void 0!==n[p]?[n[p],s]:s}else p&&(n[p]=r?void 0:\"\")});return n}},{jquery:void 0}],3:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";e.defineMode(\"sparql11\",function(e){function i(){var e,i,r=\"<[^<>\\\"'|{}^\\\\\\x00- ]*>\",n=\"[A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD]\",o=n+\"|_\",t=\"(\"+o+\"|-|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])\",s=\"(\"+o+\"|[0-9])(\"+o+\"|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])*\",a=\"\\\\?\"+s,p=\"\\\\$\"+s,E=\"(\"+n+\")(((\"+t+\")|\\\\.)*(\"+t+\"))?\",u=\"[0-9A-Fa-f]\",c=\"(%\"+u+u+\")\",d=\"(\\\\\\\\[_~\\\\.\\\\-!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=/\\\\?#@%])\",N=\"(\"+c+\"|\"+d+\")\";if(\"sparql11\"==l){e=\"(\"+o+\"|:|[0-9]|\"+N+\")((\"+t+\"|\\\\.|:|\"+N+\")*(\"+t+\"|:|\"+N+\"))?\";i=\"_:(\"+o+\"|[0-9])((\"+t+\"|\\\\.)*\"+t+\")?\"}else{e=\"(\"+o+\"|[0-9])(((\"+t+\")|\\\\.)*(\"+t+\"))?\";i=\"_:\"+e}var I=\"(\"+E+\")?:\",x=I+e,m=\"@[a-zA-Z]+(-[a-zA-Z0-9]+)*\",L=\"[eE][\\\\+-]?[0-9]+\",T=\"[0-9]+\",A=\"(([0-9]+\\\\.[0-9]*)|(\\\\.[0-9]+))\",g=\"(([0-9]+\\\\.[0-9]*\"+L+\")|(\\\\.[0-9]+\"+L+\")|([0-9]+\"+L+\"))\",S=\"\\\\+\"+T,R=\"\\\\+\"+A,v=\"\\\\+\"+g,h=\"-\"+T,C=\"-\"+A,f=\"-\"+g,O=\"\\\\\\\\[tbnrfu\\\\\\\\\\\"']\",y=\"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D])|\"+O+\")*'\",P='\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D])|'+O+')*\"',_=\"'''(('|'')?([^'\\\\\\\\]|\"+O+\"))*'''\",D='\"\"\"((\"|\"\")?([^\"\\\\\\\\]|'+O+'))*\"\"\"',G=\"[\\\\x20\\\\x09\\\\x0D\\\\x0A]\",b=\"#([^\\\\n\\\\r]*[\\\\n\\\\r]|[^\\\\n\\\\r]*$)\",M=\"(\"+G+\"|(\"+b+\"))*\",U=\"\\\\(\"+M+\"\\\\)\",V=\"\\\\[\"+M+\"\\\\]\",B={terminal:[{name:\"WS\",regex:new RegExp(\"^\"+G+\"+\"),style:\"ws\"},{name:\"COMMENT\",regex:new RegExp(\"^\"+b),style:\"comment\"},{name:\"IRI_REF\",regex:new RegExp(\"^\"+r),style:\"variable-3\"},{name:\"VAR1\",regex:new RegExp(\"^\"+a),style:\"atom\"},{name:\"VAR2\",regex:new RegExp(\"^\"+p),style:\"atom\"},{name:\"LANGTAG\",regex:new RegExp(\"^\"+m),style:\"meta\"},{name:\"DOUBLE\",regex:new RegExp(\"^\"+g),style:\"number\"},{name:\"DECIMAL\",regex:new RegExp(\"^\"+A),style:\"number\"},{name:\"INTEGER\",regex:new RegExp(\"^\"+T),style:\"number\"},{name:\"DOUBLE_POSITIVE\",regex:new RegExp(\"^\"+v),style:\"number\"},{name:\"DECIMAL_POSITIVE\",regex:new RegExp(\"^\"+R),style:\"number\"},{name:\"INTEGER_POSITIVE\",regex:new RegExp(\"^\"+S),style:\"number\"},{name:\"DOUBLE_NEGATIVE\",regex:new RegExp(\"^\"+f),style:\"number\"},{name:\"DECIMAL_NEGATIVE\",regex:new RegExp(\"^\"+C),style:\"number\"},{name:\"INTEGER_NEGATIVE\",regex:new RegExp(\"^\"+h),style:\"number\"},{name:\"STRING_LITERAL_LONG1\",regex:new RegExp(\"^\"+_),style:\"string\"},{name:\"STRING_LITERAL_LONG2\",regex:new RegExp(\"^\"+D),style:\"string\"},{name:\"STRING_LITERAL1\",regex:new RegExp(\"^\"+y),style:\"string\"},{name:\"STRING_LITERAL2\",regex:new RegExp(\"^\"+P),style:\"string\"},{name:\"NIL\",regex:new RegExp(\"^\"+U),style:\"punc\"},{name:\"ANON\",regex:new RegExp(\"^\"+V),style:\"punc\"},{name:\"PNAME_LN\",regex:new RegExp(\"^\"+x),style:\"string-2\"},{name:\"PNAME_NS\",regex:new RegExp(\"^\"+I),style:\"string-2\"},{name:\"BLANK_NODE_LABEL\",regex:new RegExp(\"^\"+i),style:\"string-2\"}]};return B}function r(e){var i=[],r=t[e];if(void 0!=r)for(var n in r)i.push(n.toString());else i.push(e);return i}function n(e,i){function n(){for(var i=null,r=0;r<d.length;++r){i=e.match(d[r].regex,!0,!1);if(i)return{cat:d[r].name,style:d[r].style,text:i[0]}}i=e.match(s,!0,!1);if(i)return{cat:e.current().toUpperCase(),style:\"keyword\",text:i[0]};i=e.match(a,!0,!1);if(i)return{cat:e.current(),style:\"punc\",text:i[0]};i=e.match(/^.[A-Za-z0-9]*/,!0,!1);return{cat:\"<invalid_token>\",style:\"error\",text:i[0]}}function o(){var r=e.column();i.errorStartPos=r;i.errorEndPos=r+u.text.length}function p(e){null==i.queryType&&(\"SELECT\"==e||\"CONSTRUCT\"==e||\"ASK\"==e||\"DESCRIBE\"==e||\"INSERT\"==e||\"DELETE\"==e||\"LOAD\"==e||\"CLEAR\"==e||\"CREATE\"==e||\"DROP\"==e||\"COPY\"==e||\"MOVE\"==e||\"ADD\"==e)&&(i.queryType=e)}function l(e){\"disallowVars\"==e?i.allowVars=!1:\"allowVars\"==e?i.allowVars=!0:\"disallowBnodes\"==e?i.allowBnodes=!1:\"allowBnodes\"==e?i.allowBnodes=!0:\"storeProperty\"==e&&(i.storeProperty=!0)}function E(e){return(i.allowVars||\"var\"!=e)&&(i.allowBnodes||\"blankNode\"!=e&&\"blankNodePropertyList\"!=e&&\"blankNodePropertyListPath\"!=e)}0==e.pos&&(i.possibleCurrent=i.possibleNext);var u=n();if(\"<invalid_token>\"==u.cat){if(1==i.OK){i.OK=!1;o()}i.complete=!1;return u.style}if(\"WS\"==u.cat||\"COMMENT\"==u.cat){i.possibleCurrent=i.possibleNext;return u.style}for(var c,N=!1,I=u.cat;i.stack.length>0&&I&&i.OK&&!N;){c=i.stack.pop();if(t[c]){var x=t[c][I];if(void 0!=x&&E(c)){for(var m=x.length-1;m>=0;--m)i.stack.push(x[m]);l(c)}else{i.OK=!1;i.complete=!1;o();i.stack.push(c)}}else if(c==I){N=!0;p(c);for(var L=!0,T=i.stack.length;T>0;--T){var A=t[i.stack[T-1]];A&&A.$||(L=!1)}i.complete=L;if(i.storeProperty&&\"punc\"!=I.cat){i.lastProperty=u.text;i.storeProperty=!1}}else{i.OK=!1;i.complete=!1;o()}}if(!N&&i.OK){i.OK=!1;i.complete=!1;o()}i.possibleCurrent=i.possibleNext;i.possibleNext=r(i.stack[i.stack.length-1]);return u.style}function o(i,r){var n=0,o=i.stack.length-1;if(/^[\\}\\]\\)]/.test(r)){for(var t=r.substr(0,1);o>=0;--o)if(i.stack[o]==t){--o;break}}else{var s=N[i.stack[o]];if(s){n+=s;--o}}for(;o>=0;--o){var s=I[i.stack[o]];s&&(n+=s)}return n*e.indentUnit}var t=(e.indentUnit,{\"*[&&,valueLogical]\":{\"&&\":[\"[&&,valueLogical]\",\"*[&&,valueLogical]\"],AS:[],\")\":[],\",\":[],\"||\":[],\";\":[]},\"*[,,expression]\":{\",\":[\"[,,expression]\",\"*[,,expression]\"],\")\":[]},\"*[,,objectPath]\":{\",\":[\"[,,objectPath]\",\"*[,,objectPath]\"],\".\":[],\";\":[],\"]\":[],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"*[,,object]\":{\",\":[\"[,,object]\",\"*[,,object]\"],\".\":[],\";\":[],\"]\":[],\"}\":[],GRAPH:[],\"{\":[],OPTIONAL:[],MINUS:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[]},\"*[/,pathEltOrInverse]\":{\"/\":[\"[/,pathEltOrInverse]\",\"*[/,pathEltOrInverse]\"],\"|\":[],\")\":[],\"(\":[],\"[\":[],VAR1:[],VAR2:[],NIL:[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[]},\"*[;,?[or([verbPath,verbSimple]),objectList]]\":{\";\":[\"[;,?[or([verbPath,verbSimple]),objectList]]\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\".\":[],\"]\":[],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"*[;,?[verb,objectList]]\":{\";\":[\"[;,?[verb,objectList]]\",\"*[;,?[verb,objectList]]\"],\".\":[],\"]\":[],\"}\":[],GRAPH:[],\"{\":[],OPTIONAL:[],MINUS:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[]},\"*[UNION,groupGraphPattern]\":{UNION:[\"[UNION,groupGraphPattern]\",\"*[UNION,groupGraphPattern]\"],VAR1:[],VAR2:[],NIL:[],\"(\":[],\"[\":[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],\".\":[],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"*[graphPatternNotTriples,?.,?triplesBlock]\":{\"{\":[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],OPTIONAL:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],MINUS:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],GRAPH:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],SERVICE:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],FILTER:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],BIND:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],VALUES:[\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],\"}\":[]},\"*[quadsNotTriples,?.,?triplesTemplate]\":{GRAPH:[\"[quadsNotTriples,?.,?triplesTemplate]\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],\"}\":[]},\"*[|,pathOneInPropertySet]\":{\"|\":[\"[|,pathOneInPropertySet]\",\"*[|,pathOneInPropertySet]\"],\")\":[]},\"*[|,pathSequence]\":{\"|\":[\"[|,pathSequence]\",\"*[|,pathSequence]\"],\")\":[],\"(\":[],\"[\":[],VAR1:[],VAR2:[],NIL:[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[]},\"*[||,conditionalAndExpression]\":{\"||\":[\"[||,conditionalAndExpression]\",\"*[||,conditionalAndExpression]\"],AS:[],\")\":[],\",\":[],\";\":[]},\"*dataBlockValue\":{UNDEF:[\"dataBlockValue\",\"*dataBlockValue\"],IRI_REF:[\"dataBlockValue\",\"*dataBlockValue\"],TRUE:[\"dataBlockValue\",\"*dataBlockValue\"],FALSE:[\"dataBlockValue\",\"*dataBlockValue\"],PNAME_LN:[\"dataBlockValue\",\"*dataBlockValue\"],PNAME_NS:[\"dataBlockValue\",\"*dataBlockValue\"],STRING_LITERAL1:[\"dataBlockValue\",\"*dataBlockValue\"],STRING_LITERAL2:[\"dataBlockValue\",\"*dataBlockValue\"],STRING_LITERAL_LONG1:[\"dataBlockValue\",\"*dataBlockValue\"],STRING_LITERAL_LONG2:[\"dataBlockValue\",\"*dataBlockValue\"],INTEGER:[\"dataBlockValue\",\"*dataBlockValue\"],DECIMAL:[\"dataBlockValue\",\"*dataBlockValue\"],DOUBLE:[\"dataBlockValue\",\"*dataBlockValue\"],INTEGER_POSITIVE:[\"dataBlockValue\",\"*dataBlockValue\"],DECIMAL_POSITIVE:[\"dataBlockValue\",\"*dataBlockValue\"],DOUBLE_POSITIVE:[\"dataBlockValue\",\"*dataBlockValue\"],INTEGER_NEGATIVE:[\"dataBlockValue\",\"*dataBlockValue\"],DECIMAL_NEGATIVE:[\"dataBlockValue\",\"*dataBlockValue\"],DOUBLE_NEGATIVE:[\"dataBlockValue\",\"*dataBlockValue\"],\"}\":[],\")\":[]},\"*datasetClause\":{FROM:[\"datasetClause\",\"*datasetClause\"],WHERE:[],\"{\":[]},\"*describeDatasetClause\":{FROM:[\"describeDatasetClause\",\"*describeDatasetClause\"],ORDER:[],HAVING:[],GROUP:[],LIMIT:[],OFFSET:[],WHERE:[],\"{\":[],VALUES:[],$:[]},\"*graphNode\":{\"(\":[\"graphNode\",\"*graphNode\"],\"[\":[\"graphNode\",\"*graphNode\"],VAR1:[\"graphNode\",\"*graphNode\"],VAR2:[\"graphNode\",\"*graphNode\"],NIL:[\"graphNode\",\"*graphNode\"],IRI_REF:[\"graphNode\",\"*graphNode\"],TRUE:[\"graphNode\",\"*graphNode\"],FALSE:[\"graphNode\",\"*graphNode\"],BLANK_NODE_LABEL:[\"graphNode\",\"*graphNode\"],ANON:[\"graphNode\",\"*graphNode\"],PNAME_LN:[\"graphNode\",\"*graphNode\"],PNAME_NS:[\"graphNode\",\"*graphNode\"],STRING_LITERAL1:[\"graphNode\",\"*graphNode\"],STRING_LITERAL2:[\"graphNode\",\"*graphNode\"],STRING_LITERAL_LONG1:[\"graphNode\",\"*graphNode\"],STRING_LITERAL_LONG2:[\"graphNode\",\"*graphNode\"],INTEGER:[\"graphNode\",\"*graphNode\"],DECIMAL:[\"graphNode\",\"*graphNode\"],DOUBLE:[\"graphNode\",\"*graphNode\"],INTEGER_POSITIVE:[\"graphNode\",\"*graphNode\"],DECIMAL_POSITIVE:[\"graphNode\",\"*graphNode\"],DOUBLE_POSITIVE:[\"graphNode\",\"*graphNode\"],INTEGER_NEGATIVE:[\"graphNode\",\"*graphNode\"],DECIMAL_NEGATIVE:[\"graphNode\",\"*graphNode\"],DOUBLE_NEGATIVE:[\"graphNode\",\"*graphNode\"],\")\":[]},\"*graphNodePath\":{\"(\":[\"graphNodePath\",\"*graphNodePath\"],\"[\":[\"graphNodePath\",\"*graphNodePath\"],VAR1:[\"graphNodePath\",\"*graphNodePath\"],VAR2:[\"graphNodePath\",\"*graphNodePath\"],NIL:[\"graphNodePath\",\"*graphNodePath\"],IRI_REF:[\"graphNodePath\",\"*graphNodePath\"],TRUE:[\"graphNodePath\",\"*graphNodePath\"],FALSE:[\"graphNodePath\",\"*graphNodePath\"],BLANK_NODE_LABEL:[\"graphNodePath\",\"*graphNodePath\"],ANON:[\"graphNodePath\",\"*graphNodePath\"],PNAME_LN:[\"graphNodePath\",\"*graphNodePath\"],PNAME_NS:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL1:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL2:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL_LONG1:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL_LONG2:[\"graphNodePath\",\"*graphNodePath\"],INTEGER:[\"graphNodePath\",\"*graphNodePath\"],DECIMAL:[\"graphNodePath\",\"*graphNodePath\"],DOUBLE:[\"graphNodePath\",\"*graphNodePath\"],INTEGER_POSITIVE:[\"graphNodePath\",\"*graphNodePath\"],DECIMAL_POSITIVE:[\"graphNodePath\",\"*graphNodePath\"],DOUBLE_POSITIVE:[\"graphNodePath\",\"*graphNodePath\"],INTEGER_NEGATIVE:[\"graphNodePath\",\"*graphNodePath\"],DECIMAL_NEGATIVE:[\"graphNodePath\",\"*graphNodePath\"],DOUBLE_NEGATIVE:[\"graphNodePath\",\"*graphNodePath\"],\")\":[]},\"*groupCondition\":{\"(\":[\"groupCondition\",\"*groupCondition\"],STR:[\"groupCondition\",\"*groupCondition\"],LANG:[\"groupCondition\",\"*groupCondition\"],LANGMATCHES:[\"groupCondition\",\"*groupCondition\"],DATATYPE:[\"groupCondition\",\"*groupCondition\"],BOUND:[\"groupCondition\",\"*groupCondition\"],IRI:[\"groupCondition\",\"*groupCondition\"],URI:[\"groupCondition\",\"*groupCondition\"],BNODE:[\"groupCondition\",\"*groupCondition\"],RAND:[\"groupCondition\",\"*groupCondition\"],ABS:[\"groupCondition\",\"*groupCondition\"],CEIL:[\"groupCondition\",\"*groupCondition\"],FLOOR:[\"groupCondition\",\"*groupCondition\"],ROUND:[\"groupCondition\",\"*groupCondition\"],CONCAT:[\"groupCondition\",\"*groupCondition\"],STRLEN:[\"groupCondition\",\"*groupCondition\"],UCASE:[\"groupCondition\",\"*groupCondition\"],LCASE:[\"groupCondition\",\"*groupCondition\"],ENCODE_FOR_URI:[\"groupCondition\",\"*groupCondition\"],CONTAINS:[\"groupCondition\",\"*groupCondition\"],STRSTARTS:[\"groupCondition\",\"*groupCondition\"],STRENDS:[\"groupCondition\",\"*groupCondition\"],STRBEFORE:[\"groupCondition\",\"*groupCondition\"],STRAFTER:[\"groupCondition\",\"*groupCondition\"],YEAR:[\"groupCondition\",\"*groupCondition\"],MONTH:[\"groupCondition\",\"*groupCondition\"],DAY:[\"groupCondition\",\"*groupCondition\"],HOURS:[\"groupCondition\",\"*groupCondition\"],MINUTES:[\"groupCondition\",\"*groupCondition\"],SECONDS:[\"groupCondition\",\"*groupCondition\"],TIMEZONE:[\"groupCondition\",\"*groupCondition\"],TZ:[\"groupCondition\",\"*groupCondition\"],NOW:[\"groupCondition\",\"*groupCondition\"],UUID:[\"groupCondition\",\"*groupCondition\"],STRUUID:[\"groupCondition\",\"*groupCondition\"],MD5:[\"groupCondition\",\"*groupCondition\"],SHA1:[\"groupCondition\",\"*groupCondition\"],SHA256:[\"groupCondition\",\"*groupCondition\"],SHA384:[\"groupCondition\",\"*groupCondition\"],SHA512:[\"groupCondition\",\"*groupCondition\"],COALESCE:[\"groupCondition\",\"*groupCondition\"],IF:[\"groupCondition\",\"*groupCondition\"],STRLANG:[\"groupCondition\",\"*groupCondition\"],STRDT:[\"groupCondition\",\"*groupCondition\"],SAMETERM:[\"groupCondition\",\"*groupCondition\"],ISIRI:[\"groupCondition\",\"*groupCondition\"],ISURI:[\"groupCondition\",\"*groupCondition\"],ISBLANK:[\"groupCondition\",\"*groupCondition\"],ISLITERAL:[\"groupCondition\",\"*groupCondition\"],ISNUMERIC:[\"groupCondition\",\"*groupCondition\"],VAR1:[\"groupCondition\",\"*groupCondition\"],VAR2:[\"groupCondition\",\"*groupCondition\"],SUBSTR:[\"groupCondition\",\"*groupCondition\"],REPLACE:[\"groupCondition\",\"*groupCondition\"],REGEX:[\"groupCondition\",\"*groupCondition\"],EXISTS:[\"groupCondition\",\"*groupCondition\"],NOT:[\"groupCondition\",\"*groupCondition\"],IRI_REF:[\"groupCondition\",\"*groupCondition\"],PNAME_LN:[\"groupCondition\",\"*groupCondition\"],PNAME_NS:[\"groupCondition\",\"*groupCondition\"],VALUES:[],LIMIT:[],OFFSET:[],ORDER:[],HAVING:[],$:[],\"}\":[]},\"*havingCondition\":{\"(\":[\"havingCondition\",\"*havingCondition\"],STR:[\"havingCondition\",\"*havingCondition\"],LANG:[\"havingCondition\",\"*havingCondition\"],LANGMATCHES:[\"havingCondition\",\"*havingCondition\"],DATATYPE:[\"havingCondition\",\"*havingCondition\"],BOUND:[\"havingCondition\",\"*havingCondition\"],IRI:[\"havingCondition\",\"*havingCondition\"],URI:[\"havingCondition\",\"*havingCondition\"],BNODE:[\"havingCondition\",\"*havingCondition\"],RAND:[\"havingCondition\",\"*havingCondition\"],ABS:[\"havingCondition\",\"*havingCondition\"],CEIL:[\"havingCondition\",\"*havingCondition\"],FLOOR:[\"havingCondition\",\"*havingCondition\"],ROUND:[\"havingCondition\",\"*havingCondition\"],CONCAT:[\"havingCondition\",\"*havingCondition\"],STRLEN:[\"havingCondition\",\"*havingCondition\"],UCASE:[\"havingCondition\",\"*havingCondition\"],LCASE:[\"havingCondition\",\"*havingCondition\"],ENCODE_FOR_URI:[\"havingCondition\",\"*havingCondition\"],CONTAINS:[\"havingCondition\",\"*havingCondition\"],STRSTARTS:[\"havingCondition\",\"*havingCondition\"],STRENDS:[\"havingCondition\",\"*havingCondition\"],STRBEFORE:[\"havingCondition\",\"*havingCondition\"],STRAFTER:[\"havingCondition\",\"*havingCondition\"],YEAR:[\"havingCondition\",\"*havingCondition\"],MONTH:[\"havingCondition\",\"*havingCondition\"],DAY:[\"havingCondition\",\"*havingCondition\"],HOURS:[\"havingCondition\",\"*havingCondition\"],MINUTES:[\"havingCondition\",\"*havingCondition\"],SECONDS:[\"havingCondition\",\"*havingCondition\"],TIMEZONE:[\"havingCondition\",\"*havingCondition\"],TZ:[\"havingCondition\",\"*havingCondition\"],NOW:[\"havingCondition\",\"*havingCondition\"],UUID:[\"havingCondition\",\"*havingCondition\"],STRUUID:[\"havingCondition\",\"*havingCondition\"],MD5:[\"havingCondition\",\"*havingCondition\"],SHA1:[\"havingCondition\",\"*havingCondition\"],SHA256:[\"havingCondition\",\"*havingCondition\"],SHA384:[\"havingCondition\",\"*havingCondition\"],SHA512:[\"havingCondition\",\"*havingCondition\"],COALESCE:[\"havingCondition\",\"*havingCondition\"],IF:[\"havingCondition\",\"*havingCondition\"],STRLANG:[\"havingCondition\",\"*havingCondition\"],STRDT:[\"havingCondition\",\"*havingCondition\"],SAMETERM:[\"havingCondition\",\"*havingCondition\"],ISIRI:[\"havingCondition\",\"*havingCondition\"],ISURI:[\"havingCondition\",\"*havingCondition\"],ISBLANK:[\"havingCondition\",\"*havingCondition\"],ISLITERAL:[\"havingCondition\",\"*havingCondition\"],ISNUMERIC:[\"havingCondition\",\"*havingCondition\"],SUBSTR:[\"havingCondition\",\"*havingCondition\"],REPLACE:[\"havingCondition\",\"*havingCondition\"],REGEX:[\"havingCondition\",\"*havingCondition\"],EXISTS:[\"havingCondition\",\"*havingCondition\"],NOT:[\"havingCondition\",\"*havingCondition\"],IRI_REF:[\"havingCondition\",\"*havingCondition\"],PNAME_LN:[\"havingCondition\",\"*havingCondition\"],PNAME_NS:[\"havingCondition\",\"*havingCondition\"],VALUES:[],LIMIT:[],OFFSET:[],ORDER:[],$:[],\"}\":[]},\"*or([[ (,*dataBlockValue,)],NIL])\":{\"(\":[\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"],NIL:[\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"],\"}\":[]},\"*or([[*,unaryExpression],[/,unaryExpression]])\":{\"*\":[\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],\"/\":[\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],AS:[],\")\":[],\",\":[],\"||\":[],\"&&\":[],\"=\":[],\"!=\":[],\"<\":[],\">\":[],\"<=\":[],\">=\":[],IN:[],NOT:[],\"+\":[],\"-\":[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],\";\":[]},\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\":{\"+\":[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],\"-\":[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],INTEGER_POSITIVE:[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DECIMAL_POSITIVE:[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DOUBLE_POSITIVE:[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],INTEGER_NEGATIVE:[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DECIMAL_NEGATIVE:[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DOUBLE_NEGATIVE:[\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],AS:[],\")\":[],\",\":[],\"||\":[],\"&&\":[],\"=\":[],\"!=\":[],\"<\":[],\">\":[],\"<=\":[],\">=\":[],IN:[],NOT:[],\";\":[]},\"*or([var,[ (,expression,AS,var,)]])\":{\"(\":[\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"],VAR1:[\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"],VAR2:[\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"],WHERE:[],\"{\":[],FROM:[]},\"*orderCondition\":{ASC:[\"orderCondition\",\"*orderCondition\"],DESC:[\"orderCondition\",\"*orderCondition\"],VAR1:[\"orderCondition\",\"*orderCondition\"],VAR2:[\"orderCondition\",\"*orderCondition\"],\"(\":[\"orderCondition\",\"*orderCondition\"],STR:[\"orderCondition\",\"*orderCondition\"],LANG:[\"orderCondition\",\"*orderCondition\"],LANGMATCHES:[\"orderCondition\",\"*orderCondition\"],DATATYPE:[\"orderCondition\",\"*orderCondition\"],BOUND:[\"orderCondition\",\"*orderCondition\"],IRI:[\"orderCondition\",\"*orderCondition\"],URI:[\"orderCondition\",\"*orderCondition\"],BNODE:[\"orderCondition\",\"*orderCondition\"],RAND:[\"orderCondition\",\"*orderCondition\"],ABS:[\"orderCondition\",\"*orderCondition\"],CEIL:[\"orderCondition\",\"*orderCondition\"],FLOOR:[\"orderCondition\",\"*orderCondition\"],ROUND:[\"orderCondition\",\"*orderCondition\"],CONCAT:[\"orderCondition\",\"*orderCondition\"],STRLEN:[\"orderCondition\",\"*orderCondition\"],UCASE:[\"orderCondition\",\"*orderCondition\"],LCASE:[\"orderCondition\",\"*orderCondition\"],ENCODE_FOR_URI:[\"orderCondition\",\"*orderCondition\"],CONTAINS:[\"orderCondition\",\"*orderCondition\"],STRSTARTS:[\"orderCondition\",\"*orderCondition\"],STRENDS:[\"orderCondition\",\"*orderCondition\"],STRBEFORE:[\"orderCondition\",\"*orderCondition\"],STRAFTER:[\"orderCondition\",\"*orderCondition\"],YEAR:[\"orderCondition\",\"*orderCondition\"],MONTH:[\"orderCondition\",\"*orderCondition\"],DAY:[\"orderCondition\",\"*orderCondition\"],HOURS:[\"orderCondition\",\"*orderCondition\"],MINUTES:[\"orderCondition\",\"*orderCondition\"],SECONDS:[\"orderCondition\",\"*orderCondition\"],TIMEZONE:[\"orderCondition\",\"*orderCondition\"],TZ:[\"orderCondition\",\"*orderCondition\"],NOW:[\"orderCondition\",\"*orderCondition\"],UUID:[\"orderCondition\",\"*orderCondition\"],STRUUID:[\"orderCondition\",\"*orderCondition\"],MD5:[\"orderCondition\",\"*orderCondition\"],SHA1:[\"orderCondition\",\"*orderCondition\"],SHA256:[\"orderCondition\",\"*orderCondition\"],SHA384:[\"orderCondition\",\"*orderCondition\"],SHA512:[\"orderCondition\",\"*orderCondition\"],COALESCE:[\"orderCondition\",\"*orderCondition\"],IF:[\"orderCondition\",\"*orderCondition\"],STRLANG:[\"orderCondition\",\"*orderCondition\"],STRDT:[\"orderCondition\",\"*orderCondition\"],SAMETERM:[\"orderCondition\",\"*orderCondition\"],ISIRI:[\"orderCondition\",\"*orderCondition\"],ISURI:[\"orderCondition\",\"*orderCondition\"],ISBLANK:[\"orderCondition\",\"*orderCondition\"],ISLITERAL:[\"orderCondition\",\"*orderCondition\"],ISNUMERIC:[\"orderCondition\",\"*orderCondition\"],SUBSTR:[\"orderCondition\",\"*orderCondition\"],REPLACE:[\"orderCondition\",\"*orderCondition\"],REGEX:[\"orderCondition\",\"*orderCondition\"],EXISTS:[\"orderCondition\",\"*orderCondition\"],NOT:[\"orderCondition\",\"*orderCondition\"],IRI_REF:[\"orderCondition\",\"*orderCondition\"],PNAME_LN:[\"orderCondition\",\"*orderCondition\"],PNAME_NS:[\"orderCondition\",\"*orderCondition\"],VALUES:[],LIMIT:[],OFFSET:[],$:[],\"}\":[]},\"*prefixDecl\":{PREFIX:[\"prefixDecl\",\"*prefixDecl\"],$:[],CONSTRUCT:[],DESCRIBE:[],ASK:[],INSERT:[],DELETE:[],SELECT:[],LOAD:[],CLEAR:[],DROP:[],ADD:[],MOVE:[],COPY:[],CREATE:[],WITH:[]},\"*usingClause\":{USING:[\"usingClause\",\"*usingClause\"],WHERE:[]},\"*var\":{VAR1:[\"var\",\"*var\"],VAR2:[\"var\",\"*var\"],\")\":[]},\"*varOrIRIref\":{VAR1:[\"varOrIRIref\",\"*varOrIRIref\"],VAR2:[\"varOrIRIref\",\"*varOrIRIref\"],IRI_REF:[\"varOrIRIref\",\"*varOrIRIref\"],PNAME_LN:[\"varOrIRIref\",\"*varOrIRIref\"],PNAME_NS:[\"varOrIRIref\",\"*varOrIRIref\"],ORDER:[],HAVING:[],GROUP:[],LIMIT:[],OFFSET:[],WHERE:[],\"{\":[],FROM:[],VALUES:[],$:[]},\"+graphNode\":{\"(\":[\"graphNode\",\"*graphNode\"],\"[\":[\"graphNode\",\"*graphNode\"],VAR1:[\"graphNode\",\"*graphNode\"],VAR2:[\"graphNode\",\"*graphNode\"],NIL:[\"graphNode\",\"*graphNode\"],IRI_REF:[\"graphNode\",\"*graphNode\"],TRUE:[\"graphNode\",\"*graphNode\"],FALSE:[\"graphNode\",\"*graphNode\"],BLANK_NODE_LABEL:[\"graphNode\",\"*graphNode\"],ANON:[\"graphNode\",\"*graphNode\"],PNAME_LN:[\"graphNode\",\"*graphNode\"],PNAME_NS:[\"graphNode\",\"*graphNode\"],STRING_LITERAL1:[\"graphNode\",\"*graphNode\"],STRING_LITERAL2:[\"graphNode\",\"*graphNode\"],STRING_LITERAL_LONG1:[\"graphNode\",\"*graphNode\"],STRING_LITERAL_LONG2:[\"graphNode\",\"*graphNode\"],INTEGER:[\"graphNode\",\"*graphNode\"],DECIMAL:[\"graphNode\",\"*graphNode\"],DOUBLE:[\"graphNode\",\"*graphNode\"],INTEGER_POSITIVE:[\"graphNode\",\"*graphNode\"],DECIMAL_POSITIVE:[\"graphNode\",\"*graphNode\"],DOUBLE_POSITIVE:[\"graphNode\",\"*graphNode\"],INTEGER_NEGATIVE:[\"graphNode\",\"*graphNode\"],DECIMAL_NEGATIVE:[\"graphNode\",\"*graphNode\"],DOUBLE_NEGATIVE:[\"graphNode\",\"*graphNode\"]},\"+graphNodePath\":{\"(\":[\"graphNodePath\",\"*graphNodePath\"],\"[\":[\"graphNodePath\",\"*graphNodePath\"],VAR1:[\"graphNodePath\",\"*graphNodePath\"],VAR2:[\"graphNodePath\",\"*graphNodePath\"],NIL:[\"graphNodePath\",\"*graphNodePath\"],IRI_REF:[\"graphNodePath\",\"*graphNodePath\"],TRUE:[\"graphNodePath\",\"*graphNodePath\"],FALSE:[\"graphNodePath\",\"*graphNodePath\"],BLANK_NODE_LABEL:[\"graphNodePath\",\"*graphNodePath\"],ANON:[\"graphNodePath\",\"*graphNodePath\"],PNAME_LN:[\"graphNodePath\",\"*graphNodePath\"],PNAME_NS:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL1:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL2:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL_LONG1:[\"graphNodePath\",\"*graphNodePath\"],STRING_LITERAL_LONG2:[\"graphNodePath\",\"*graphNodePath\"],INTEGER:[\"graphNodePath\",\"*graphNodePath\"],DECIMAL:[\"graphNodePath\",\"*graphNodePath\"],DOUBLE:[\"graphNodePath\",\"*graphNodePath\"],INTEGER_POSITIVE:[\"graphNodePath\",\"*graphNodePath\"],DECIMAL_POSITIVE:[\"graphNodePath\",\"*graphNodePath\"],DOUBLE_POSITIVE:[\"graphNodePath\",\"*graphNodePath\"],INTEGER_NEGATIVE:[\"graphNodePath\",\"*graphNodePath\"],DECIMAL_NEGATIVE:[\"graphNodePath\",\"*graphNodePath\"],DOUBLE_NEGATIVE:[\"graphNodePath\",\"*graphNodePath\"]},\"+groupCondition\":{\"(\":[\"groupCondition\",\"*groupCondition\"],STR:[\"groupCondition\",\"*groupCondition\"],LANG:[\"groupCondition\",\"*groupCondition\"],LANGMATCHES:[\"groupCondition\",\"*groupCondition\"],DATATYPE:[\"groupCondition\",\"*groupCondition\"],BOUND:[\"groupCondition\",\"*groupCondition\"],IRI:[\"groupCondition\",\"*groupCondition\"],URI:[\"groupCondition\",\"*groupCondition\"],BNODE:[\"groupCondition\",\"*groupCondition\"],RAND:[\"groupCondition\",\"*groupCondition\"],ABS:[\"groupCondition\",\"*groupCondition\"],CEIL:[\"groupCondition\",\"*groupCondition\"],FLOOR:[\"groupCondition\",\"*groupCondition\"],ROUND:[\"groupCondition\",\"*groupCondition\"],CONCAT:[\"groupCondition\",\"*groupCondition\"],STRLEN:[\"groupCondition\",\"*groupCondition\"],UCASE:[\"groupCondition\",\"*groupCondition\"],LCASE:[\"groupCondition\",\"*groupCondition\"],ENCODE_FOR_URI:[\"groupCondition\",\"*groupCondition\"],CONTAINS:[\"groupCondition\",\"*groupCondition\"],STRSTARTS:[\"groupCondition\",\"*groupCondition\"],STRENDS:[\"groupCondition\",\"*groupCondition\"],STRBEFORE:[\"groupCondition\",\"*groupCondition\"],STRAFTER:[\"groupCondition\",\"*groupCondition\"],YEAR:[\"groupCondition\",\"*groupCondition\"],MONTH:[\"groupCondition\",\"*groupCondition\"],DAY:[\"groupCondition\",\"*groupCondition\"],HOURS:[\"groupCondition\",\"*groupCondition\"],MINUTES:[\"groupCondition\",\"*groupCondition\"],SECONDS:[\"groupCondition\",\"*groupCondition\"],TIMEZONE:[\"groupCondition\",\"*groupCondition\"],TZ:[\"groupCondition\",\"*groupCondition\"],NOW:[\"groupCondition\",\"*groupCondition\"],UUID:[\"groupCondition\",\"*groupCondition\"],STRUUID:[\"groupCondition\",\"*groupCondition\"],MD5:[\"groupCondition\",\"*groupCondition\"],SHA1:[\"groupCondition\",\"*groupCondition\"],SHA256:[\"groupCondition\",\"*groupCondition\"],SHA384:[\"groupCondition\",\"*groupCondition\"],SHA512:[\"groupCondition\",\"*groupCondition\"],COALESCE:[\"groupCondition\",\"*groupCondition\"],IF:[\"groupCondition\",\"*groupCondition\"],STRLANG:[\"groupCondition\",\"*groupCondition\"],STRDT:[\"groupCondition\",\"*groupCondition\"],SAMETERM:[\"groupCondition\",\"*groupCondition\"],ISIRI:[\"groupCondition\",\"*groupCondition\"],ISURI:[\"groupCondition\",\"*groupCondition\"],ISBLANK:[\"groupCondition\",\"*groupCondition\"],ISLITERAL:[\"groupCondition\",\"*groupCondition\"],ISNUMERIC:[\"groupCondition\",\"*groupCondition\"],VAR1:[\"groupCondition\",\"*groupCondition\"],VAR2:[\"groupCondition\",\"*groupCondition\"],SUBSTR:[\"groupCondition\",\"*groupCondition\"],REPLACE:[\"groupCondition\",\"*groupCondition\"],REGEX:[\"groupCondition\",\"*groupCondition\"],EXISTS:[\"groupCondition\",\"*groupCondition\"],NOT:[\"groupCondition\",\"*groupCondition\"],IRI_REF:[\"groupCondition\",\"*groupCondition\"],PNAME_LN:[\"groupCondition\",\"*groupCondition\"],PNAME_NS:[\"groupCondition\",\"*groupCondition\"]},\"+havingCondition\":{\"(\":[\"havingCondition\",\"*havingCondition\"],STR:[\"havingCondition\",\"*havingCondition\"],LANG:[\"havingCondition\",\"*havingCondition\"],LANGMATCHES:[\"havingCondition\",\"*havingCondition\"],DATATYPE:[\"havingCondition\",\"*havingCondition\"],BOUND:[\"havingCondition\",\"*havingCondition\"],IRI:[\"havingCondition\",\"*havingCondition\"],URI:[\"havingCondition\",\"*havingCondition\"],BNODE:[\"havingCondition\",\"*havingCondition\"],RAND:[\"havingCondition\",\"*havingCondition\"],ABS:[\"havingCondition\",\"*havingCondition\"],CEIL:[\"havingCondition\",\"*havingCondition\"],FLOOR:[\"havingCondition\",\"*havingCondition\"],ROUND:[\"havingCondition\",\"*havingCondition\"],CONCAT:[\"havingCondition\",\"*havingCondition\"],STRLEN:[\"havingCondition\",\"*havingCondition\"],UCASE:[\"havingCondition\",\"*havingCondition\"],LCASE:[\"havingCondition\",\"*havingCondition\"],ENCODE_FOR_URI:[\"havingCondition\",\"*havingCondition\"],CONTAINS:[\"havingCondition\",\"*havingCondition\"],STRSTARTS:[\"havingCondition\",\"*havingCondition\"],STRENDS:[\"havingCondition\",\"*havingCondition\"],STRBEFORE:[\"havingCondition\",\"*havingCondition\"],STRAFTER:[\"havingCondition\",\"*havingCondition\"],YEAR:[\"havingCondition\",\"*havingCondition\"],MONTH:[\"havingCondition\",\"*havingCondition\"],DAY:[\"havingCondition\",\"*havingCondition\"],HOURS:[\"havingCondition\",\"*havingCondition\"],MINUTES:[\"havingCondition\",\"*havingCondition\"],SECONDS:[\"havingCondition\",\"*havingCondition\"],TIMEZONE:[\"havingCondition\",\"*havingCondition\"],TZ:[\"havingCondition\",\"*havingCondition\"],NOW:[\"havingCondition\",\"*havingCondition\"],UUID:[\"havingCondition\",\"*havingCondition\"],STRUUID:[\"havingCondition\",\"*havingCondition\"],MD5:[\"havingCondition\",\"*havingCondition\"],SHA1:[\"havingCondition\",\"*havingCondition\"],SHA256:[\"havingCondition\",\"*havingCondition\"],SHA384:[\"havingCondition\",\"*havingCondition\"],SHA512:[\"havingCondition\",\"*havingCondition\"],COALESCE:[\"havingCondition\",\"*havingCondition\"],IF:[\"havingCondition\",\"*havingCondition\"],STRLANG:[\"havingCondition\",\"*havingCondition\"],STRDT:[\"havingCondition\",\"*havingCondition\"],SAMETERM:[\"havingCondition\",\"*havingCondition\"],ISIRI:[\"havingCondition\",\"*havingCondition\"],ISURI:[\"havingCondition\",\"*havingCondition\"],ISBLANK:[\"havingCondition\",\"*havingCondition\"],ISLITERAL:[\"havingCondition\",\"*havingCondition\"],ISNUMERIC:[\"havingCondition\",\"*havingCondition\"],SUBSTR:[\"havingCondition\",\"*havingCondition\"],REPLACE:[\"havingCondition\",\"*havingCondition\"],REGEX:[\"havingCondition\",\"*havingCondition\"],EXISTS:[\"havingCondition\",\"*havingCondition\"],NOT:[\"havingCondition\",\"*havingCondition\"],IRI_REF:[\"havingCondition\",\"*havingCondition\"],PNAME_LN:[\"havingCondition\",\"*havingCondition\"],PNAME_NS:[\"havingCondition\",\"*havingCondition\"]},\"+or([var,[ (,expression,AS,var,)]])\":{\"(\":[\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"],VAR1:[\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"],VAR2:[\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"]},\"+orderCondition\":{ASC:[\"orderCondition\",\"*orderCondition\"],DESC:[\"orderCondition\",\"*orderCondition\"],VAR1:[\"orderCondition\",\"*orderCondition\"],VAR2:[\"orderCondition\",\"*orderCondition\"],\"(\":[\"orderCondition\",\"*orderCondition\"],STR:[\"orderCondition\",\"*orderCondition\"],LANG:[\"orderCondition\",\"*orderCondition\"],LANGMATCHES:[\"orderCondition\",\"*orderCondition\"],DATATYPE:[\"orderCondition\",\"*orderCondition\"],BOUND:[\"orderCondition\",\"*orderCondition\"],IRI:[\"orderCondition\",\"*orderCondition\"],URI:[\"orderCondition\",\"*orderCondition\"],BNODE:[\"orderCondition\",\"*orderCondition\"],RAND:[\"orderCondition\",\"*orderCondition\"],ABS:[\"orderCondition\",\"*orderCondition\"],CEIL:[\"orderCondition\",\"*orderCondition\"],FLOOR:[\"orderCondition\",\"*orderCondition\"],ROUND:[\"orderCondition\",\"*orderCondition\"],CONCAT:[\"orderCondition\",\"*orderCondition\"],STRLEN:[\"orderCondition\",\"*orderCondition\"],UCASE:[\"orderCondition\",\"*orderCondition\"],LCASE:[\"orderCondition\",\"*orderCondition\"],ENCODE_FOR_URI:[\"orderCondition\",\"*orderCondition\"],CONTAINS:[\"orderCondition\",\"*orderCondition\"],STRSTARTS:[\"orderCondition\",\"*orderCondition\"],STRENDS:[\"orderCondition\",\"*orderCondition\"],STRBEFORE:[\"orderCondition\",\"*orderCondition\"],STRAFTER:[\"orderCondition\",\"*orderCondition\"],YEAR:[\"orderCondition\",\"*orderCondition\"],MONTH:[\"orderCondition\",\"*orderCondition\"],DAY:[\"orderCondition\",\"*orderCondition\"],HOURS:[\"orderCondition\",\"*orderCondition\"],MINUTES:[\"orderCondition\",\"*orderCondition\"],SECONDS:[\"orderCondition\",\"*orderCondition\"],TIMEZONE:[\"orderCondition\",\"*orderCondition\"],TZ:[\"orderCondition\",\"*orderCondition\"],NOW:[\"orderCondition\",\"*orderCondition\"],UUID:[\"orderCondition\",\"*orderCondition\"],STRUUID:[\"orderCondition\",\"*orderCondition\"],MD5:[\"orderCondition\",\"*orderCondition\"],SHA1:[\"orderCondition\",\"*orderCondition\"],SHA256:[\"orderCondition\",\"*orderCondition\"],SHA384:[\"orderCondition\",\"*orderCondition\"],SHA512:[\"orderCondition\",\"*orderCondition\"],COALESCE:[\"orderCondition\",\"*orderCondition\"],IF:[\"orderCondition\",\"*orderCondition\"],STRLANG:[\"orderCondition\",\"*orderCondition\"],STRDT:[\"orderCondition\",\"*orderCondition\"],SAMETERM:[\"orderCondition\",\"*orderCondition\"],ISIRI:[\"orderCondition\",\"*orderCondition\"],ISURI:[\"orderCondition\",\"*orderCondition\"],ISBLANK:[\"orderCondition\",\"*orderCondition\"],ISLITERAL:[\"orderCondition\",\"*orderCondition\"],ISNUMERIC:[\"orderCondition\",\"*orderCondition\"],SUBSTR:[\"orderCondition\",\"*orderCondition\"],REPLACE:[\"orderCondition\",\"*orderCondition\"],REGEX:[\"orderCondition\",\"*orderCondition\"],EXISTS:[\"orderCondition\",\"*orderCondition\"],NOT:[\"orderCondition\",\"*orderCondition\"],IRI_REF:[\"orderCondition\",\"*orderCondition\"],PNAME_LN:[\"orderCondition\",\"*orderCondition\"],PNAME_NS:[\"orderCondition\",\"*orderCondition\"]},\"+varOrIRIref\":{VAR1:[\"varOrIRIref\",\"*varOrIRIref\"],VAR2:[\"varOrIRIref\",\"*varOrIRIref\"],IRI_REF:[\"varOrIRIref\",\"*varOrIRIref\"],PNAME_LN:[\"varOrIRIref\",\"*varOrIRIref\"],PNAME_NS:[\"varOrIRIref\",\"*varOrIRIref\"]},\"?.\":{\".\":[\".\"],VAR1:[],VAR2:[],NIL:[],\"(\":[],\"[\":[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],GRAPH:[],\"{\":[],OPTIONAL:[],MINUS:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"?DISTINCT\":{DISTINCT:[\"DISTINCT\"],\"!\":[],\"+\":[],\"-\":[],VAR1:[],VAR2:[],\"(\":[],STR:[],LANG:[],LANGMATCHES:[],DATATYPE:[],BOUND:[],IRI:[],URI:[],BNODE:[],RAND:[],ABS:[],CEIL:[],FLOOR:[],ROUND:[],CONCAT:[],STRLEN:[],UCASE:[],LCASE:[],ENCODE_FOR_URI:[],CONTAINS:[],STRSTARTS:[],STRENDS:[],STRBEFORE:[],STRAFTER:[],YEAR:[],MONTH:[],DAY:[],HOURS:[],MINUTES:[],SECONDS:[],TIMEZONE:[],TZ:[],NOW:[],UUID:[],STRUUID:[],MD5:[],SHA1:[],SHA256:[],SHA384:[],SHA512:[],COALESCE:[],IF:[],STRLANG:[],STRDT:[],SAMETERM:[],ISIRI:[],ISURI:[],ISBLANK:[],ISLITERAL:[],ISNUMERIC:[],TRUE:[],FALSE:[],COUNT:[],SUM:[],MIN:[],MAX:[],AVG:[],SAMPLE:[],GROUP_CONCAT:[],SUBSTR:[],REPLACE:[],REGEX:[],EXISTS:[],NOT:[],IRI_REF:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],PNAME_LN:[],PNAME_NS:[],\"*\":[]},\"?GRAPH\":{GRAPH:[\"GRAPH\"],IRI_REF:[],PNAME_LN:[],PNAME_NS:[]},\"?SILENT\":{SILENT:[\"SILENT\"],VAR1:[],VAR2:[],IRI_REF:[],PNAME_LN:[],PNAME_NS:[]},\"?SILENT_1\":{SILENT:[\"SILENT\"],IRI_REF:[],PNAME_LN:[],PNAME_NS:[]},\"?SILENT_2\":{SILENT:[\"SILENT\"],GRAPH:[],DEFAULT:[],NAMED:[],ALL:[]},\"?SILENT_3\":{SILENT:[\"SILENT\"],GRAPH:[]},\"?SILENT_4\":{SILENT:[\"SILENT\"],DEFAULT:[],GRAPH:[],IRI_REF:[],PNAME_LN:[],PNAME_NS:[]},\"?WHERE\":{WHERE:[\"WHERE\"],\"{\":[]},\"?[,,expression]\":{\",\":[\"[,,expression]\"],\")\":[]},\"?[.,?constructTriples]\":{\".\":[\"[.,?constructTriples]\"],\"}\":[]},\"?[.,?triplesBlock]\":{\".\":[\"[.,?triplesBlock]\"],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"?[.,?triplesTemplate]\":{\".\":[\"[.,?triplesTemplate]\"],\"}\":[],GRAPH:[]},\"?[;,SEPARATOR,=,string]\":{\";\":[\"[;,SEPARATOR,=,string]\"],\")\":[]},\"?[;,update]\":{\";\":[\"[;,update]\"],$:[]},\"?[AS,var]\":{AS:[\"[AS,var]\"],\")\":[]},\"?[INTO,graphRef]\":{INTO:[\"[INTO,graphRef]\"],\";\":[],$:[]},\"?[or([verbPath,verbSimple]),objectList]\":{VAR1:[\"[or([verbPath,verbSimple]),objectList]\"],VAR2:[\"[or([verbPath,verbSimple]),objectList]\"],\"^\":[\"[or([verbPath,verbSimple]),objectList]\"],a:[\"[or([verbPath,verbSimple]),objectList]\"],\"!\":[\"[or([verbPath,verbSimple]),objectList]\"],\"(\":[\"[or([verbPath,verbSimple]),objectList]\"],IRI_REF:[\"[or([verbPath,verbSimple]),objectList]\"],PNAME_LN:[\"[or([verbPath,verbSimple]),objectList]\"],PNAME_NS:[\"[or([verbPath,verbSimple]),objectList]\"],\";\":[],\".\":[],\"]\":[],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\":{a:[\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\"^\":[\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],IRI_REF:[\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],PNAME_LN:[\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],PNAME_NS:[\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\")\":[]},\"?[update1,?[;,update]]\":{INSERT:[\"[update1,?[;,update]]\"],DELETE:[\"[update1,?[;,update]]\"],LOAD:[\"[update1,?[;,update]]\"],CLEAR:[\"[update1,?[;,update]]\"],DROP:[\"[update1,?[;,update]]\"],ADD:[\"[update1,?[;,update]]\"],MOVE:[\"[update1,?[;,update]]\"],COPY:[\"[update1,?[;,update]]\"],CREATE:[\"[update1,?[;,update]]\"],WITH:[\"[update1,?[;,update]]\"],$:[]},\"?[verb,objectList]\":{a:[\"[verb,objectList]\"],VAR1:[\"[verb,objectList]\"],VAR2:[\"[verb,objectList]\"],IRI_REF:[\"[verb,objectList]\"],PNAME_LN:[\"[verb,objectList]\"],PNAME_NS:[\"[verb,objectList]\"],\";\":[],\".\":[],\"]\":[],\"}\":[],GRAPH:[],\"{\":[],OPTIONAL:[],MINUS:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[]},\"?argList\":{NIL:[\"argList\"],\"(\":[\"argList\"],AS:[],\")\":[],\",\":[],\"||\":[],\"&&\":[],\"=\":[],\"!=\":[],\"<\":[],\">\":[],\"<=\":[],\">=\":[],IN:[],NOT:[],\"+\":[],\"-\":[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],\"*\":[],\"/\":[],\";\":[]},\"?baseDecl\":{BASE:[\"baseDecl\"],$:[],CONSTRUCT:[],DESCRIBE:[],ASK:[],INSERT:[],DELETE:[],SELECT:[],LOAD:[],CLEAR:[],DROP:[],ADD:[],MOVE:[],COPY:[],CREATE:[],WITH:[],PREFIX:[]},\"?constructTriples\":{VAR1:[\"constructTriples\"],VAR2:[\"constructTriples\"],NIL:[\"constructTriples\"],\"(\":[\"constructTriples\"],\"[\":[\"constructTriples\"],IRI_REF:[\"constructTriples\"],TRUE:[\"constructTriples\"],FALSE:[\"constructTriples\"],BLANK_NODE_LABEL:[\"constructTriples\"],ANON:[\"constructTriples\"],PNAME_LN:[\"constructTriples\"],PNAME_NS:[\"constructTriples\"],STRING_LITERAL1:[\"constructTriples\"],STRING_LITERAL2:[\"constructTriples\"],STRING_LITERAL_LONG1:[\"constructTriples\"],STRING_LITERAL_LONG2:[\"constructTriples\"],INTEGER:[\"constructTriples\"],DECIMAL:[\"constructTriples\"],DOUBLE:[\"constructTriples\"],INTEGER_POSITIVE:[\"constructTriples\"],DECIMAL_POSITIVE:[\"constructTriples\"],DOUBLE_POSITIVE:[\"constructTriples\"],INTEGER_NEGATIVE:[\"constructTriples\"],DECIMAL_NEGATIVE:[\"constructTriples\"],DOUBLE_NEGATIVE:[\"constructTriples\"],\"}\":[]},\"?groupClause\":{GROUP:[\"groupClause\"],VALUES:[],LIMIT:[],OFFSET:[],ORDER:[],HAVING:[],$:[],\"}\":[]},\"?havingClause\":{HAVING:[\"havingClause\"],VALUES:[],LIMIT:[],OFFSET:[],ORDER:[],$:[],\"}\":[]},\"?insertClause\":{INSERT:[\"insertClause\"],WHERE:[],USING:[]},\"?limitClause\":{LIMIT:[\"limitClause\"],VALUES:[],$:[],\"}\":[]},\"?limitOffsetClauses\":{LIMIT:[\"limitOffsetClauses\"],OFFSET:[\"limitOffsetClauses\"],VALUES:[],$:[],\"}\":[]},\"?offsetClause\":{OFFSET:[\"offsetClause\"],VALUES:[],$:[],\"}\":[]},\"?or([DISTINCT,REDUCED])\":{DISTINCT:[\"or([DISTINCT,REDUCED])\"],REDUCED:[\"or([DISTINCT,REDUCED])\"],\"*\":[],\"(\":[],VAR1:[],VAR2:[]},\"?or([LANGTAG,[^^,iriRef]])\":{LANGTAG:[\"or([LANGTAG,[^^,iriRef]])\"],\"^^\":[\"or([LANGTAG,[^^,iriRef]])\"],UNDEF:[],IRI_REF:[],TRUE:[],FALSE:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],a:[],VAR1:[],VAR2:[],\"^\":[],\"!\":[],\"(\":[],\".\":[],\";\":[],\",\":[],AS:[],\")\":[],\"||\":[],\"&&\":[],\"=\":[],\"!=\":[],\"<\":[],\">\":[],\"<=\":[],\">=\":[],IN:[],NOT:[],\"+\":[],\"-\":[],\"*\":[],\"/\":[],\"}\":[],\"[\":[],NIL:[],BLANK_NODE_LABEL:[],ANON:[],\"]\":[],GRAPH:[],\"{\":[],OPTIONAL:[],MINUS:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[]},\"?or([[*,unaryExpression],[/,unaryExpression]])\":{\"*\":[\"or([[*,unaryExpression],[/,unaryExpression]])\"],\"/\":[\"or([[*,unaryExpression],[/,unaryExpression]])\"],\"+\":[],\"-\":[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[],AS:[],\")\":[],\",\":[],\"||\":[],\"&&\":[],\"=\":[],\"!=\":[],\"<\":[],\">\":[],\"<=\":[],\">=\":[],IN:[],NOT:[],\";\":[]},\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\":{\"=\":[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\"!=\":[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\"<\":[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\">\":[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\"<=\":[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\">=\":[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],IN:[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],NOT:[\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],AS:[],\")\":[],\",\":[],\"||\":[],\"&&\":[],\";\":[]},\"?orderClause\":{ORDER:[\"orderClause\"],VALUES:[],LIMIT:[],OFFSET:[],$:[],\"}\":[]},\"?pathMod\":{\"*\":[\"pathMod\"],\"?\":[\"pathMod\"],\"+\":[\"pathMod\"],\"{\":[\"pathMod\"],\"|\":[],\"/\":[],\")\":[],\"(\":[],\"[\":[],VAR1:[],VAR2:[],NIL:[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[]},\"?triplesBlock\":{VAR1:[\"triplesBlock\"],VAR2:[\"triplesBlock\"],NIL:[\"triplesBlock\"],\"(\":[\"triplesBlock\"],\"[\":[\"triplesBlock\"],IRI_REF:[\"triplesBlock\"],TRUE:[\"triplesBlock\"],FALSE:[\"triplesBlock\"],BLANK_NODE_LABEL:[\"triplesBlock\"],ANON:[\"triplesBlock\"],PNAME_LN:[\"triplesBlock\"],PNAME_NS:[\"triplesBlock\"],STRING_LITERAL1:[\"triplesBlock\"],STRING_LITERAL2:[\"triplesBlock\"],STRING_LITERAL_LONG1:[\"triplesBlock\"],STRING_LITERAL_LONG2:[\"triplesBlock\"],INTEGER:[\"triplesBlock\"],DECIMAL:[\"triplesBlock\"],DOUBLE:[\"triplesBlock\"],INTEGER_POSITIVE:[\"triplesBlock\"],DECIMAL_POSITIVE:[\"triplesBlock\"],DOUBLE_POSITIVE:[\"triplesBlock\"],INTEGER_NEGATIVE:[\"triplesBlock\"],DECIMAL_NEGATIVE:[\"triplesBlock\"],DOUBLE_NEGATIVE:[\"triplesBlock\"],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},\"?triplesTemplate\":{VAR1:[\"triplesTemplate\"],VAR2:[\"triplesTemplate\"],NIL:[\"triplesTemplate\"],\"(\":[\"triplesTemplate\"],\"[\":[\"triplesTemplate\"],IRI_REF:[\"triplesTemplate\"],TRUE:[\"triplesTemplate\"],FALSE:[\"triplesTemplate\"],BLANK_NODE_LABEL:[\"triplesTemplate\"],ANON:[\"triplesTemplate\"],PNAME_LN:[\"triplesTemplate\"],PNAME_NS:[\"triplesTemplate\"],STRING_LITERAL1:[\"triplesTemplate\"],STRING_LITERAL2:[\"triplesTemplate\"],STRING_LITERAL_LONG1:[\"triplesTemplate\"],STRING_LITERAL_LONG2:[\"triplesTemplate\"],INTEGER:[\"triplesTemplate\"],DECIMAL:[\"triplesTemplate\"],DOUBLE:[\"triplesTemplate\"],INTEGER_POSITIVE:[\"triplesTemplate\"],DECIMAL_POSITIVE:[\"triplesTemplate\"],DOUBLE_POSITIVE:[\"triplesTemplate\"],INTEGER_NEGATIVE:[\"triplesTemplate\"],DECIMAL_NEGATIVE:[\"triplesTemplate\"],DOUBLE_NEGATIVE:[\"triplesTemplate\"],\"}\":[],GRAPH:[]},\"?whereClause\":{WHERE:[\"whereClause\"],\"{\":[\"whereClause\"],ORDER:[],HAVING:[],GROUP:[],LIMIT:[],OFFSET:[],VALUES:[],$:[]},\"[ (,*dataBlockValue,)]\":{\"(\":[\"(\",\"*dataBlockValue\",\")\"]},\"[ (,*var,)]\":{\"(\":[\"(\",\"*var\",\")\"]},\"[ (,expression,)]\":{\"(\":[\"(\",\"expression\",\")\"]},\"[ (,expression,AS,var,)]\":{\"(\":[\"(\",\"expression\",\"AS\",\"var\",\")\"]},\"[!=,numericExpression]\":{\"!=\":[\"!=\",\"numericExpression\"]},\"[&&,valueLogical]\":{\"&&\":[\"&&\",\"valueLogical\"]},\"[*,unaryExpression]\":{\"*\":[\"*\",\"unaryExpression\"]},\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\":{WHERE:[\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"],FROM:[\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"]},\"[+,multiplicativeExpression]\":{\"+\":[\"+\",\"multiplicativeExpression\"]},\"[,,expression]\":{\",\":[\",\",\"expression\"]},\"[,,integer,}]\":{\",\":[\",\",\"integer\",\"}\"]},\"[,,objectPath]\":{\",\":[\",\",\"objectPath\"]},\"[,,object]\":{\",\":[\",\",\"object\"]},\"[,,or([},[integer,}]])]\":{\",\":[\",\",\"or([},[integer,}]])\"]},\"[-,multiplicativeExpression]\":{\"-\":[\"-\",\"multiplicativeExpression\"]},\"[.,?constructTriples]\":{\".\":[\".\",\"?constructTriples\"]},\"[.,?triplesBlock]\":{\".\":[\".\",\"?triplesBlock\"]},\"[.,?triplesTemplate]\":{\".\":[\".\",\"?triplesTemplate\"]},\"[/,pathEltOrInverse]\":{\"/\":[\"/\",\"pathEltOrInverse\"]},\"[/,unaryExpression]\":{\"/\":[\"/\",\"unaryExpression\"]},\"[;,?[or([verbPath,verbSimple]),objectList]]\":{\";\":[\";\",\"?[or([verbPath,verbSimple]),objectList]\"]},\"[;,?[verb,objectList]]\":{\";\":[\";\",\"?[verb,objectList]\"]},\"[;,SEPARATOR,=,string]\":{\";\":[\";\",\"SEPARATOR\",\"=\",\"string\"]},\"[;,update]\":{\";\":[\";\",\"update\"]},\"[<,numericExpression]\":{\"<\":[\"<\",\"numericExpression\"]},\"[<=,numericExpression]\":{\"<=\":[\"<=\",\"numericExpression\"]},\"[=,numericExpression]\":{\"=\":[\"=\",\"numericExpression\"]},\"[>,numericExpression]\":{\">\":[\">\",\"numericExpression\"]},\"[>=,numericExpression]\":{\">=\":[\">=\",\"numericExpression\"]},\"[AS,var]\":{AS:[\"AS\",\"var\"]},\"[IN,expressionList]\":{IN:[\"IN\",\"expressionList\"]},\"[INTO,graphRef]\":{INTO:[\"INTO\",\"graphRef\"]},\"[NAMED,iriRef]\":{NAMED:[\"NAMED\",\"iriRef\"]},\"[NOT,IN,expressionList]\":{NOT:[\"NOT\",\"IN\",\"expressionList\"]},\"[UNION,groupGraphPattern]\":{UNION:[\"UNION\",\"groupGraphPattern\"]},\"[^^,iriRef]\":{\"^^\":[\"^^\",\"iriRef\"]},\"[constructTemplate,*datasetClause,whereClause,solutionModifier]\":{\"{\":[\"constructTemplate\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]},\"[deleteClause,?insertClause]\":{DELETE:[\"deleteClause\",\"?insertClause\"]},\"[graphPatternNotTriples,?.,?triplesBlock]\":{\"{\":[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],OPTIONAL:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],MINUS:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],GRAPH:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],SERVICE:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],FILTER:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],BIND:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"],VALUES:[\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"]},\"[integer,or([[,,or([},[integer,}]])],}])]\":{INTEGER:[\"integer\",\"or([[,,or([},[integer,}]])],}])\"]},\"[integer,}]\":{INTEGER:[\"integer\",\"}\"]},\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\":{INTEGER_POSITIVE:[\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"],DECIMAL_POSITIVE:[\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"],DOUBLE_POSITIVE:[\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"],INTEGER_NEGATIVE:[\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"],DECIMAL_NEGATIVE:[\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"],DOUBLE_NEGATIVE:[\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"]},\"[or([verbPath,verbSimple]),objectList]\":{VAR1:[\"or([verbPath,verbSimple])\",\"objectList\"],VAR2:[\"or([verbPath,verbSimple])\",\"objectList\"],\"^\":[\"or([verbPath,verbSimple])\",\"objectList\"],a:[\"or([verbPath,verbSimple])\",\"objectList\"],\"!\":[\"or([verbPath,verbSimple])\",\"objectList\"],\"(\":[\"or([verbPath,verbSimple])\",\"objectList\"],IRI_REF:[\"or([verbPath,verbSimple])\",\"objectList\"],PNAME_LN:[\"or([verbPath,verbSimple])\",\"objectList\"],PNAME_NS:[\"or([verbPath,verbSimple])\",\"objectList\"]},\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\":{a:[\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"],\"^\":[\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"],IRI_REF:[\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"],PNAME_LN:[\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"],PNAME_NS:[\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"]},\"[quadsNotTriples,?.,?triplesTemplate]\":{GRAPH:[\"quadsNotTriples\",\"?.\",\"?triplesTemplate\"]},\"[update1,?[;,update]]\":{INSERT:[\"update1\",\"?[;,update]\"],DELETE:[\"update1\",\"?[;,update]\"],LOAD:[\"update1\",\"?[;,update]\"],CLEAR:[\"update1\",\"?[;,update]\"],DROP:[\"update1\",\"?[;,update]\"],ADD:[\"update1\",\"?[;,update]\"],MOVE:[\"update1\",\"?[;,update]\"],COPY:[\"update1\",\"?[;,update]\"],CREATE:[\"update1\",\"?[;,update]\"],WITH:[\"update1\",\"?[;,update]\"]},\"[verb,objectList]\":{a:[\"verb\",\"objectList\"],VAR1:[\"verb\",\"objectList\"],VAR2:[\"verb\",\"objectList\"],IRI_REF:[\"verb\",\"objectList\"],PNAME_LN:[\"verb\",\"objectList\"],PNAME_NS:[\"verb\",\"objectList\"]},\"[|,pathOneInPropertySet]\":{\"|\":[\"|\",\"pathOneInPropertySet\"]},\"[|,pathSequence]\":{\"|\":[\"|\",\"pathSequence\"]},\"[||,conditionalAndExpression]\":{\"||\":[\"||\",\"conditionalAndExpression\"]},add:{ADD:[\"ADD\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]},additiveExpression:{\"!\":[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],\"+\":[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],\"-\":[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],VAR1:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],VAR2:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],\"(\":[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STR:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],LANG:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],LANGMATCHES:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DATATYPE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],BOUND:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],IRI:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],URI:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],BNODE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],RAND:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ABS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],CEIL:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],FLOOR:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ROUND:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],CONCAT:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRLEN:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],UCASE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],LCASE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ENCODE_FOR_URI:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],CONTAINS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRSTARTS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRENDS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRBEFORE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRAFTER:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],YEAR:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],MONTH:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DAY:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],HOURS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],MINUTES:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SECONDS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],TIMEZONE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],TZ:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],NOW:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],UUID:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRUUID:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],MD5:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SHA1:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SHA256:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SHA384:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SHA512:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],COALESCE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],IF:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRLANG:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRDT:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SAMETERM:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ISIRI:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ISURI:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ISBLANK:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ISLITERAL:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],ISNUMERIC:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],TRUE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],FALSE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],COUNT:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SUM:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],MIN:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],MAX:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],AVG:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SAMPLE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],GROUP_CONCAT:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],SUBSTR:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],REPLACE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],REGEX:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],EXISTS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],NOT:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],IRI_REF:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRING_LITERAL1:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRING_LITERAL2:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRING_LITERAL_LONG1:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],STRING_LITERAL_LONG2:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],INTEGER:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DECIMAL:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DOUBLE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],INTEGER_POSITIVE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DECIMAL_POSITIVE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DOUBLE_POSITIVE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],INTEGER_NEGATIVE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DECIMAL_NEGATIVE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],DOUBLE_NEGATIVE:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],PNAME_LN:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"],PNAME_NS:[\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"]},aggregate:{COUNT:[\"COUNT\",\"(\",\"?DISTINCT\",\"or([*,expression])\",\")\"],SUM:[\"SUM\",\"(\",\"?DISTINCT\",\"expression\",\")\"],MIN:[\"MIN\",\"(\",\"?DISTINCT\",\"expression\",\")\"],MAX:[\"MAX\",\"(\",\"?DISTINCT\",\"expression\",\")\"],AVG:[\"AVG\",\"(\",\"?DISTINCT\",\"expression\",\")\"],SAMPLE:[\"SAMPLE\",\"(\",\"?DISTINCT\",\"expression\",\")\"],GROUP_CONCAT:[\"GROUP_CONCAT\",\"(\",\"?DISTINCT\",\"expression\",\"?[;,SEPARATOR,=,string]\",\")\"]},allowBnodes:{\"}\":[]},allowVars:{\"}\":[]},argList:{NIL:[\"NIL\"],\"(\":[\"(\",\"?DISTINCT\",\"expression\",\"*[,,expression]\",\")\"]},askQuery:{ASK:[\"ASK\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]},baseDecl:{BASE:[\"BASE\",\"IRI_REF\"]},bind:{BIND:[\"BIND\",\"(\",\"expression\",\"AS\",\"var\",\")\"]},blankNode:{BLANK_NODE_LABEL:[\"BLANK_NODE_LABEL\"],ANON:[\"ANON\"]},blankNodePropertyList:{\"[\":[\"[\",\"propertyListNotEmpty\",\"]\"]},blankNodePropertyListPath:{\"[\":[\"[\",\"propertyListPathNotEmpty\",\"]\"]},booleanLiteral:{TRUE:[\"TRUE\"],FALSE:[\"FALSE\"]},brackettedExpression:{\"(\":[\"(\",\"expression\",\")\"]},builtInCall:{STR:[\"STR\",\"(\",\"expression\",\")\"],LANG:[\"LANG\",\"(\",\"expression\",\")\"],LANGMATCHES:[\"LANGMATCHES\",\"(\",\"expression\",\",\",\"expression\",\")\"],DATATYPE:[\"DATATYPE\",\"(\",\"expression\",\")\"],BOUND:[\"BOUND\",\"(\",\"var\",\")\"],IRI:[\"IRI\",\"(\",\"expression\",\")\"],URI:[\"URI\",\"(\",\"expression\",\")\"],BNODE:[\"BNODE\",\"or([[ (,expression,)],NIL])\"],RAND:[\"RAND\",\"NIL\"],ABS:[\"ABS\",\"(\",\"expression\",\")\"],CEIL:[\"CEIL\",\"(\",\"expression\",\")\"],FLOOR:[\"FLOOR\",\"(\",\"expression\",\")\"],ROUND:[\"ROUND\",\"(\",\"expression\",\")\"],CONCAT:[\"CONCAT\",\"expressionList\"],SUBSTR:[\"substringExpression\"],STRLEN:[\"STRLEN\",\"(\",\"expression\",\")\"],REPLACE:[\"strReplaceExpression\"],UCASE:[\"UCASE\",\"(\",\"expression\",\")\"],LCASE:[\"LCASE\",\"(\",\"expression\",\")\"],ENCODE_FOR_URI:[\"ENCODE_FOR_URI\",\"(\",\"expression\",\")\"],CONTAINS:[\"CONTAINS\",\"(\",\"expression\",\",\",\"expression\",\")\"],STRSTARTS:[\"STRSTARTS\",\"(\",\"expression\",\",\",\"expression\",\")\"],STRENDS:[\"STRENDS\",\"(\",\"expression\",\",\",\"expression\",\")\"],STRBEFORE:[\"STRBEFORE\",\"(\",\"expression\",\",\",\"expression\",\")\"],STRAFTER:[\"STRAFTER\",\"(\",\"expression\",\",\",\"expression\",\")\"],YEAR:[\"YEAR\",\"(\",\"expression\",\")\"],MONTH:[\"MONTH\",\"(\",\"expression\",\")\"],DAY:[\"DAY\",\"(\",\"expression\",\")\"],HOURS:[\"HOURS\",\"(\",\"expression\",\")\"],MINUTES:[\"MINUTES\",\"(\",\"expression\",\")\"],SECONDS:[\"SECONDS\",\"(\",\"expression\",\")\"],TIMEZONE:[\"TIMEZONE\",\"(\",\"expression\",\")\"],TZ:[\"TZ\",\"(\",\"expression\",\")\"],NOW:[\"NOW\",\"NIL\"],UUID:[\"UUID\",\"NIL\"],STRUUID:[\"STRUUID\",\"NIL\"],MD5:[\"MD5\",\"(\",\"expression\",\")\"],SHA1:[\"SHA1\",\"(\",\"expression\",\")\"],SHA256:[\"SHA256\",\"(\",\"expression\",\")\"],SHA384:[\"SHA384\",\"(\",\"expression\",\")\"],SHA512:[\"SHA512\",\"(\",\"expression\",\")\"],COALESCE:[\"COALESCE\",\"expressionList\"],IF:[\"IF\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\")\"],STRLANG:[\"STRLANG\",\"(\",\"expression\",\",\",\"expression\",\")\"],STRDT:[\"STRDT\",\"(\",\"expression\",\",\",\"expression\",\")\"],SAMETERM:[\"SAMETERM\",\"(\",\"expression\",\",\",\"expression\",\")\"],ISIRI:[\"ISIRI\",\"(\",\"expression\",\")\"],ISURI:[\"ISURI\",\"(\",\"expression\",\")\"],ISBLANK:[\"ISBLANK\",\"(\",\"expression\",\")\"],ISLITERAL:[\"ISLITERAL\",\"(\",\"expression\",\")\"],ISNUMERIC:[\"ISNUMERIC\",\"(\",\"expression\",\")\"],REGEX:[\"regexExpression\"],EXISTS:[\"existsFunc\"],NOT:[\"notExistsFunc\"]},clear:{CLEAR:[\"CLEAR\",\"?SILENT_2\",\"graphRefAll\"]},collection:{\"(\":[\"(\",\"+graphNode\",\")\"]},collectionPath:{\"(\":[\"(\",\"+graphNodePath\",\")\"]},conditionalAndExpression:{\"!\":[\"valueLogical\",\"*[&&,valueLogical]\"],\"+\":[\"valueLogical\",\"*[&&,valueLogical]\"],\"-\":[\"valueLogical\",\"*[&&,valueLogical]\"],VAR1:[\"valueLogical\",\"*[&&,valueLogical]\"],VAR2:[\"valueLogical\",\"*[&&,valueLogical]\"],\"(\":[\"valueLogical\",\"*[&&,valueLogical]\"],STR:[\"valueLogical\",\"*[&&,valueLogical]\"],LANG:[\"valueLogical\",\"*[&&,valueLogical]\"],LANGMATCHES:[\"valueLogical\",\"*[&&,valueLogical]\"],DATATYPE:[\"valueLogical\",\"*[&&,valueLogical]\"],BOUND:[\"valueLogical\",\"*[&&,valueLogical]\"],IRI:[\"valueLogical\",\"*[&&,valueLogical]\"],URI:[\"valueLogical\",\"*[&&,valueLogical]\"],BNODE:[\"valueLogical\",\"*[&&,valueLogical]\"],RAND:[\"valueLogical\",\"*[&&,valueLogical]\"],ABS:[\"valueLogical\",\"*[&&,valueLogical]\"],CEIL:[\"valueLogical\",\"*[&&,valueLogical]\"],FLOOR:[\"valueLogical\",\"*[&&,valueLogical]\"],ROUND:[\"valueLogical\",\"*[&&,valueLogical]\"],CONCAT:[\"valueLogical\",\"*[&&,valueLogical]\"],STRLEN:[\"valueLogical\",\"*[&&,valueLogical]\"],UCASE:[\"valueLogical\",\"*[&&,valueLogical]\"],LCASE:[\"valueLogical\",\"*[&&,valueLogical]\"],ENCODE_FOR_URI:[\"valueLogical\",\"*[&&,valueLogical]\"],CONTAINS:[\"valueLogical\",\"*[&&,valueLogical]\"],STRSTARTS:[\"valueLogical\",\"*[&&,valueLogical]\"],STRENDS:[\"valueLogical\",\"*[&&,valueLogical]\"],STRBEFORE:[\"valueLogical\",\"*[&&,valueLogical]\"],STRAFTER:[\"valueLogical\",\"*[&&,valueLogical]\"],YEAR:[\"valueLogical\",\"*[&&,valueLogical]\"],MONTH:[\"valueLogical\",\"*[&&,valueLogical]\"],DAY:[\"valueLogical\",\"*[&&,valueLogical]\"],HOURS:[\"valueLogical\",\"*[&&,valueLogical]\"],MINUTES:[\"valueLogical\",\"*[&&,valueLogical]\"],SECONDS:[\"valueLogical\",\"*[&&,valueLogical]\"],TIMEZONE:[\"valueLogical\",\"*[&&,valueLogical]\"],TZ:[\"valueLogical\",\"*[&&,valueLogical]\"],NOW:[\"valueLogical\",\"*[&&,valueLogical]\"],UUID:[\"valueLogical\",\"*[&&,valueLogical]\"],STRUUID:[\"valueLogical\",\"*[&&,valueLogical]\"],MD5:[\"valueLogical\",\"*[&&,valueLogical]\"],SHA1:[\"valueLogical\",\"*[&&,valueLogical]\"],SHA256:[\"valueLogical\",\"*[&&,valueLogical]\"],SHA384:[\"valueLogical\",\"*[&&,valueLogical]\"],SHA512:[\"valueLogical\",\"*[&&,valueLogical]\"],COALESCE:[\"valueLogical\",\"*[&&,valueLogical]\"],IF:[\"valueLogical\",\"*[&&,valueLogical]\"],STRLANG:[\"valueLogical\",\"*[&&,valueLogical]\"],STRDT:[\"valueLogical\",\"*[&&,valueLogical]\"],SAMETERM:[\"valueLogical\",\"*[&&,valueLogical]\"],ISIRI:[\"valueLogical\",\"*[&&,valueLogical]\"],ISURI:[\"valueLogical\",\"*[&&,valueLogical]\"],ISBLANK:[\"valueLogical\",\"*[&&,valueLogical]\"],ISLITERAL:[\"valueLogical\",\"*[&&,valueLogical]\"],ISNUMERIC:[\"valueLogical\",\"*[&&,valueLogical]\"],TRUE:[\"valueLogical\",\"*[&&,valueLogical]\"],FALSE:[\"valueLogical\",\"*[&&,valueLogical]\"],COUNT:[\"valueLogical\",\"*[&&,valueLogical]\"],SUM:[\"valueLogical\",\"*[&&,valueLogical]\"],MIN:[\"valueLogical\",\"*[&&,valueLogical]\"],MAX:[\"valueLogical\",\"*[&&,valueLogical]\"],AVG:[\"valueLogical\",\"*[&&,valueLogical]\"],SAMPLE:[\"valueLogical\",\"*[&&,valueLogical]\"],GROUP_CONCAT:[\"valueLogical\",\"*[&&,valueLogical]\"],SUBSTR:[\"valueLogical\",\"*[&&,valueLogical]\"],REPLACE:[\"valueLogical\",\"*[&&,valueLogical]\"],REGEX:[\"valueLogical\",\"*[&&,valueLogical]\"],EXISTS:[\"valueLogical\",\"*[&&,valueLogical]\"],NOT:[\"valueLogical\",\"*[&&,valueLogical]\"],IRI_REF:[\"valueLogical\",\"*[&&,valueLogical]\"],STRING_LITERAL1:[\"valueLogical\",\"*[&&,valueLogical]\"],STRING_LITERAL2:[\"valueLogical\",\"*[&&,valueLogical]\"],STRING_LITERAL_LONG1:[\"valueLogical\",\"*[&&,valueLogical]\"],STRING_LITERAL_LONG2:[\"valueLogical\",\"*[&&,valueLogical]\"],INTEGER:[\"valueLogical\",\"*[&&,valueLogical]\"],DECIMAL:[\"valueLogical\",\"*[&&,valueLogical]\"],DOUBLE:[\"valueLogical\",\"*[&&,valueLogical]\"],INTEGER_POSITIVE:[\"valueLogical\",\"*[&&,valueLogical]\"],DECIMAL_POSITIVE:[\"valueLogical\",\"*[&&,valueLogical]\"],DOUBLE_POSITIVE:[\"valueLogical\",\"*[&&,valueLogical]\"],INTEGER_NEGATIVE:[\"valueLogical\",\"*[&&,valueLogical]\"],DECIMAL_NEGATIVE:[\"valueLogical\",\"*[&&,valueLogical]\"],DOUBLE_NEGATIVE:[\"valueLogical\",\"*[&&,valueLogical]\"],PNAME_LN:[\"valueLogical\",\"*[&&,valueLogical]\"],PNAME_NS:[\"valueLogical\",\"*[&&,valueLogical]\"]},conditionalOrExpression:{\"!\":[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],\"+\":[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],\"-\":[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],VAR1:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],VAR2:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],\"(\":[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STR:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],LANG:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],LANGMATCHES:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DATATYPE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],BOUND:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],IRI:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],URI:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],BNODE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],RAND:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ABS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],CEIL:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],FLOOR:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ROUND:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],CONCAT:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRLEN:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],UCASE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],LCASE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ENCODE_FOR_URI:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],CONTAINS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRSTARTS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRENDS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRBEFORE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRAFTER:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],YEAR:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],MONTH:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DAY:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],HOURS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],MINUTES:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SECONDS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],TIMEZONE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],TZ:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],NOW:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],UUID:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRUUID:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],MD5:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SHA1:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SHA256:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SHA384:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SHA512:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],COALESCE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],IF:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRLANG:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRDT:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SAMETERM:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ISIRI:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ISURI:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ISBLANK:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ISLITERAL:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],ISNUMERIC:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],TRUE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],FALSE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],COUNT:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SUM:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],MIN:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],MAX:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],AVG:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SAMPLE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],GROUP_CONCAT:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],SUBSTR:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],REPLACE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],REGEX:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],EXISTS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],NOT:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],IRI_REF:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRING_LITERAL1:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRING_LITERAL2:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRING_LITERAL_LONG1:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],STRING_LITERAL_LONG2:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],INTEGER:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DECIMAL:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DOUBLE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],INTEGER_POSITIVE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DECIMAL_POSITIVE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DOUBLE_POSITIVE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],INTEGER_NEGATIVE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DECIMAL_NEGATIVE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],DOUBLE_NEGATIVE:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],PNAME_LN:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"],PNAME_NS:[\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"]},constraint:{\"(\":[\"brackettedExpression\"],STR:[\"builtInCall\"],LANG:[\"builtInCall\"],LANGMATCHES:[\"builtInCall\"],DATATYPE:[\"builtInCall\"],BOUND:[\"builtInCall\"],IRI:[\"builtInCall\"],URI:[\"builtInCall\"],BNODE:[\"builtInCall\"],RAND:[\"builtInCall\"],ABS:[\"builtInCall\"],CEIL:[\"builtInCall\"],FLOOR:[\"builtInCall\"],ROUND:[\"builtInCall\"],CONCAT:[\"builtInCall\"],STRLEN:[\"builtInCall\"],UCASE:[\"builtInCall\"],LCASE:[\"builtInCall\"],ENCODE_FOR_URI:[\"builtInCall\"],CONTAINS:[\"builtInCall\"],STRSTARTS:[\"builtInCall\"],STRENDS:[\"builtInCall\"],STRBEFORE:[\"builtInCall\"],STRAFTER:[\"builtInCall\"],YEAR:[\"builtInCall\"],MONTH:[\"builtInCall\"],DAY:[\"builtInCall\"],HOURS:[\"builtInCall\"],MINUTES:[\"builtInCall\"],SECONDS:[\"builtInCall\"],TIMEZONE:[\"builtInCall\"],TZ:[\"builtInCall\"],NOW:[\"builtInCall\"],UUID:[\"builtInCall\"],STRUUID:[\"builtInCall\"],MD5:[\"builtInCall\"],SHA1:[\"builtInCall\"],SHA256:[\"builtInCall\"],SHA384:[\"builtInCall\"],SHA512:[\"builtInCall\"],COALESCE:[\"builtInCall\"],IF:[\"builtInCall\"],STRLANG:[\"builtInCall\"],STRDT:[\"builtInCall\"],SAMETERM:[\"builtInCall\"],ISIRI:[\"builtInCall\"],ISURI:[\"builtInCall\"],ISBLANK:[\"builtInCall\"],ISLITERAL:[\"builtInCall\"],ISNUMERIC:[\"builtInCall\"],SUBSTR:[\"builtInCall\"],REPLACE:[\"builtInCall\"],REGEX:[\"builtInCall\"],EXISTS:[\"builtInCall\"],NOT:[\"builtInCall\"],IRI_REF:[\"functionCall\"],PNAME_LN:[\"functionCall\"],PNAME_NS:[\"functionCall\"]},constructQuery:{CONSTRUCT:[\"CONSTRUCT\",\"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\"]},constructTemplate:{\"{\":[\"{\",\"?constructTriples\",\"}\"]},constructTriples:{VAR1:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],VAR2:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],NIL:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],\"(\":[\"triplesSameSubject\",\"?[.,?constructTriples]\"],\"[\":[\"triplesSameSubject\",\"?[.,?constructTriples]\"],IRI_REF:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],TRUE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],FALSE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],BLANK_NODE_LABEL:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],ANON:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],PNAME_LN:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],PNAME_NS:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],STRING_LITERAL1:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],STRING_LITERAL2:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],STRING_LITERAL_LONG1:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],STRING_LITERAL_LONG2:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],INTEGER:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],DECIMAL:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],DOUBLE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],INTEGER_POSITIVE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],DECIMAL_POSITIVE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],DOUBLE_POSITIVE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],INTEGER_NEGATIVE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],DECIMAL_NEGATIVE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"],DOUBLE_NEGATIVE:[\"triplesSameSubject\",\"?[.,?constructTriples]\"]},copy:{COPY:[\"COPY\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]},create:{CREATE:[\"CREATE\",\"?SILENT_3\",\"graphRef\"]},dataBlock:{NIL:[\"or([inlineDataOneVar,inlineDataFull])\"],\"(\":[\"or([inlineDataOneVar,inlineDataFull])\"],VAR1:[\"or([inlineDataOneVar,inlineDataFull])\"],VAR2:[\"or([inlineDataOneVar,inlineDataFull])\"]},dataBlockValue:{IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"],STRING_LITERAL1:[\"rdfLiteral\"],STRING_LITERAL2:[\"rdfLiteral\"],STRING_LITERAL_LONG1:[\"rdfLiteral\"],STRING_LITERAL_LONG2:[\"rdfLiteral\"],INTEGER:[\"numericLiteral\"],DECIMAL:[\"numericLiteral\"],DOUBLE:[\"numericLiteral\"],INTEGER_POSITIVE:[\"numericLiteral\"],DECIMAL_POSITIVE:[\"numericLiteral\"],DOUBLE_POSITIVE:[\"numericLiteral\"],INTEGER_NEGATIVE:[\"numericLiteral\"],DECIMAL_NEGATIVE:[\"numericLiteral\"],DOUBLE_NEGATIVE:[\"numericLiteral\"],TRUE:[\"booleanLiteral\"],FALSE:[\"booleanLiteral\"],UNDEF:[\"UNDEF\"]},datasetClause:{FROM:[\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]},defaultGraphClause:{IRI_REF:[\"sourceSelector\"],PNAME_LN:[\"sourceSelector\"],PNAME_NS:[\"sourceSelector\"]},delete1:{DATA:[\"DATA\",\"quadDataNoBnodes\"],WHERE:[\"WHERE\",\"quadPatternNoBnodes\"],\"{\":[\"quadPatternNoBnodes\",\"?insertClause\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]},deleteClause:{DELETE:[\"DELETE\",\"quadPattern\"]},describeDatasetClause:{FROM:[\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]},describeQuery:{DESCRIBE:[\"DESCRIBE\",\"or([+varOrIRIref,*])\",\"*describeDatasetClause\",\"?whereClause\",\"solutionModifier\"]},disallowBnodes:{\"}\":[],GRAPH:[],VAR1:[],VAR2:[],NIL:[],\"(\":[],\"[\":[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[]},disallowVars:{\"}\":[],GRAPH:[],VAR1:[],VAR2:[],NIL:[],\"(\":[],\"[\":[],IRI_REF:[],TRUE:[],FALSE:[],BLANK_NODE_LABEL:[],ANON:[],PNAME_LN:[],PNAME_NS:[],STRING_LITERAL1:[],STRING_LITERAL2:[],STRING_LITERAL_LONG1:[],STRING_LITERAL_LONG2:[],INTEGER:[],DECIMAL:[],DOUBLE:[],INTEGER_POSITIVE:[],DECIMAL_POSITIVE:[],DOUBLE_POSITIVE:[],INTEGER_NEGATIVE:[],DECIMAL_NEGATIVE:[],DOUBLE_NEGATIVE:[]},drop:{DROP:[\"DROP\",\"?SILENT_2\",\"graphRefAll\"]},existsFunc:{EXISTS:[\"EXISTS\",\"groupGraphPattern\"]},expression:{\"!\":[\"conditionalOrExpression\"],\"+\":[\"conditionalOrExpression\"],\"-\":[\"conditionalOrExpression\"],VAR1:[\"conditionalOrExpression\"],VAR2:[\"conditionalOrExpression\"],\"(\":[\"conditionalOrExpression\"],STR:[\"conditionalOrExpression\"],LANG:[\"conditionalOrExpression\"],LANGMATCHES:[\"conditionalOrExpression\"],DATATYPE:[\"conditionalOrExpression\"],BOUND:[\"conditionalOrExpression\"],IRI:[\"conditionalOrExpression\"],URI:[\"conditionalOrExpression\"],BNODE:[\"conditionalOrExpression\"],RAND:[\"conditionalOrExpression\"],ABS:[\"conditionalOrExpression\"],CEIL:[\"conditionalOrExpression\"],FLOOR:[\"conditionalOrExpression\"],ROUND:[\"conditionalOrExpression\"],CONCAT:[\"conditionalOrExpression\"],STRLEN:[\"conditionalOrExpression\"],UCASE:[\"conditionalOrExpression\"],LCASE:[\"conditionalOrExpression\"],ENCODE_FOR_URI:[\"conditionalOrExpression\"],CONTAINS:[\"conditionalOrExpression\"],STRSTARTS:[\"conditionalOrExpression\"],STRENDS:[\"conditionalOrExpression\"],STRBEFORE:[\"conditionalOrExpression\"],STRAFTER:[\"conditionalOrExpression\"],YEAR:[\"conditionalOrExpression\"],MONTH:[\"conditionalOrExpression\"],DAY:[\"conditionalOrExpression\"],HOURS:[\"conditionalOrExpression\"],MINUTES:[\"conditionalOrExpression\"],SECONDS:[\"conditionalOrExpression\"],TIMEZONE:[\"conditionalOrExpression\"],TZ:[\"conditionalOrExpression\"],NOW:[\"conditionalOrExpression\"],UUID:[\"conditionalOrExpression\"],STRUUID:[\"conditionalOrExpression\"],MD5:[\"conditionalOrExpression\"],SHA1:[\"conditionalOrExpression\"],SHA256:[\"conditionalOrExpression\"],SHA384:[\"conditionalOrExpression\"],SHA512:[\"conditionalOrExpression\"],COALESCE:[\"conditionalOrExpression\"],IF:[\"conditionalOrExpression\"],STRLANG:[\"conditionalOrExpression\"],STRDT:[\"conditionalOrExpression\"],SAMETERM:[\"conditionalOrExpression\"],ISIRI:[\"conditionalOrExpression\"],ISURI:[\"conditionalOrExpression\"],ISBLANK:[\"conditionalOrExpression\"],ISLITERAL:[\"conditionalOrExpression\"],ISNUMERIC:[\"conditionalOrExpression\"],TRUE:[\"conditionalOrExpression\"],FALSE:[\"conditionalOrExpression\"],COUNT:[\"conditionalOrExpression\"],SUM:[\"conditionalOrExpression\"],MIN:[\"conditionalOrExpression\"],MAX:[\"conditionalOrExpression\"],AVG:[\"conditionalOrExpression\"],SAMPLE:[\"conditionalOrExpression\"],GROUP_CONCAT:[\"conditionalOrExpression\"],SUBSTR:[\"conditionalOrExpression\"],REPLACE:[\"conditionalOrExpression\"],REGEX:[\"conditionalOrExpression\"],EXISTS:[\"conditionalOrExpression\"],NOT:[\"conditionalOrExpression\"],IRI_REF:[\"conditionalOrExpression\"],STRING_LITERAL1:[\"conditionalOrExpression\"],STRING_LITERAL2:[\"conditionalOrExpression\"],STRING_LITERAL_LONG1:[\"conditionalOrExpression\"],STRING_LITERAL_LONG2:[\"conditionalOrExpression\"],INTEGER:[\"conditionalOrExpression\"],DECIMAL:[\"conditionalOrExpression\"],DOUBLE:[\"conditionalOrExpression\"],INTEGER_POSITIVE:[\"conditionalOrExpression\"],DECIMAL_POSITIVE:[\"conditionalOrExpression\"],DOUBLE_POSITIVE:[\"conditionalOrExpression\"],INTEGER_NEGATIVE:[\"conditionalOrExpression\"],DECIMAL_NEGATIVE:[\"conditionalOrExpression\"],DOUBLE_NEGATIVE:[\"conditionalOrExpression\"],PNAME_LN:[\"conditionalOrExpression\"],PNAME_NS:[\"conditionalOrExpression\"]},expressionList:{NIL:[\"NIL\"],\"(\":[\"(\",\"expression\",\"*[,,expression]\",\")\"]},filter:{FILTER:[\"FILTER\",\"constraint\"]},functionCall:{IRI_REF:[\"iriRef\",\"argList\"],PNAME_LN:[\"iriRef\",\"argList\"],PNAME_NS:[\"iriRef\",\"argList\"]},graphGraphPattern:{GRAPH:[\"GRAPH\",\"varOrIRIref\",\"groupGraphPattern\"]},graphNode:{VAR1:[\"varOrTerm\"],VAR2:[\"varOrTerm\"],NIL:[\"varOrTerm\"],IRI_REF:[\"varOrTerm\"],TRUE:[\"varOrTerm\"],FALSE:[\"varOrTerm\"],BLANK_NODE_LABEL:[\"varOrTerm\"],ANON:[\"varOrTerm\"],PNAME_LN:[\"varOrTerm\"],PNAME_NS:[\"varOrTerm\"],STRING_LITERAL1:[\"varOrTerm\"],STRING_LITERAL2:[\"varOrTerm\"],STRING_LITERAL_LONG1:[\"varOrTerm\"],STRING_LITERAL_LONG2:[\"varOrTerm\"],INTEGER:[\"varOrTerm\"],DECIMAL:[\"varOrTerm\"],DOUBLE:[\"varOrTerm\"],INTEGER_POSITIVE:[\"varOrTerm\"],DECIMAL_POSITIVE:[\"varOrTerm\"],DOUBLE_POSITIVE:[\"varOrTerm\"],INTEGER_NEGATIVE:[\"varOrTerm\"],DECIMAL_NEGATIVE:[\"varOrTerm\"],DOUBLE_NEGATIVE:[\"varOrTerm\"],\"(\":[\"triplesNode\"],\"[\":[\"triplesNode\"]},graphNodePath:{VAR1:[\"varOrTerm\"],VAR2:[\"varOrTerm\"],NIL:[\"varOrTerm\"],IRI_REF:[\"varOrTerm\"],TRUE:[\"varOrTerm\"],FALSE:[\"varOrTerm\"],BLANK_NODE_LABEL:[\"varOrTerm\"],ANON:[\"varOrTerm\"],PNAME_LN:[\"varOrTerm\"],PNAME_NS:[\"varOrTerm\"],STRING_LITERAL1:[\"varOrTerm\"],STRING_LITERAL2:[\"varOrTerm\"],STRING_LITERAL_LONG1:[\"varOrTerm\"],STRING_LITERAL_LONG2:[\"varOrTerm\"],INTEGER:[\"varOrTerm\"],DECIMAL:[\"varOrTerm\"],DOUBLE:[\"varOrTerm\"],INTEGER_POSITIVE:[\"varOrTerm\"],DECIMAL_POSITIVE:[\"varOrTerm\"],DOUBLE_POSITIVE:[\"varOrTerm\"],INTEGER_NEGATIVE:[\"varOrTerm\"],DECIMAL_NEGATIVE:[\"varOrTerm\"],DOUBLE_NEGATIVE:[\"varOrTerm\"],\"(\":[\"triplesNodePath\"],\"[\":[\"triplesNodePath\"]},graphOrDefault:{DEFAULT:[\"DEFAULT\"],IRI_REF:[\"?GRAPH\",\"iriRef\"],PNAME_LN:[\"?GRAPH\",\"iriRef\"],PNAME_NS:[\"?GRAPH\",\"iriRef\"],GRAPH:[\"?GRAPH\",\"iriRef\"]},graphPatternNotTriples:{\"{\":[\"groupOrUnionGraphPattern\"],OPTIONAL:[\"optionalGraphPattern\"],MINUS:[\"minusGraphPattern\"],GRAPH:[\"graphGraphPattern\"],SERVICE:[\"serviceGraphPattern\"],FILTER:[\"filter\"],BIND:[\"bind\"],VALUES:[\"inlineData\"]},graphRef:{GRAPH:[\"GRAPH\",\"iriRef\"]},graphRefAll:{GRAPH:[\"graphRef\"],DEFAULT:[\"DEFAULT\"],NAMED:[\"NAMED\"],ALL:[\"ALL\"]},graphTerm:{IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"],STRING_LITERAL1:[\"rdfLiteral\"],STRING_LITERAL2:[\"rdfLiteral\"],STRING_LITERAL_LONG1:[\"rdfLiteral\"],STRING_LITERAL_LONG2:[\"rdfLiteral\"],INTEGER:[\"numericLiteral\"],DECIMAL:[\"numericLiteral\"],DOUBLE:[\"numericLiteral\"],INTEGER_POSITIVE:[\"numericLiteral\"],DECIMAL_POSITIVE:[\"numericLiteral\"],DOUBLE_POSITIVE:[\"numericLiteral\"],INTEGER_NEGATIVE:[\"numericLiteral\"],DECIMAL_NEGATIVE:[\"numericLiteral\"],DOUBLE_NEGATIVE:[\"numericLiteral\"],TRUE:[\"booleanLiteral\"],FALSE:[\"booleanLiteral\"],BLANK_NODE_LABEL:[\"blankNode\"],ANON:[\"blankNode\"],NIL:[\"NIL\"]},groupClause:{GROUP:[\"GROUP\",\"BY\",\"+groupCondition\"]},groupCondition:{STR:[\"builtInCall\"],LANG:[\"builtInCall\"],LANGMATCHES:[\"builtInCall\"],DATATYPE:[\"builtInCall\"],BOUND:[\"builtInCall\"],IRI:[\"builtInCall\"],URI:[\"builtInCall\"],BNODE:[\"builtInCall\"],RAND:[\"builtInCall\"],ABS:[\"builtInCall\"],CEIL:[\"builtInCall\"],FLOOR:[\"builtInCall\"],ROUND:[\"builtInCall\"],CONCAT:[\"builtInCall\"],STRLEN:[\"builtInCall\"],UCASE:[\"builtInCall\"],LCASE:[\"builtInCall\"],ENCODE_FOR_URI:[\"builtInCall\"],CONTAINS:[\"builtInCall\"],STRSTARTS:[\"builtInCall\"],STRENDS:[\"builtInCall\"],STRBEFORE:[\"builtInCall\"],STRAFTER:[\"builtInCall\"],YEAR:[\"builtInCall\"],MONTH:[\"builtInCall\"],DAY:[\"builtInCall\"],HOURS:[\"builtInCall\"],MINUTES:[\"builtInCall\"],SECONDS:[\"builtInCall\"],TIMEZONE:[\"builtInCall\"],TZ:[\"builtInCall\"],NOW:[\"builtInCall\"],UUID:[\"builtInCall\"],STRUUID:[\"builtInCall\"],MD5:[\"builtInCall\"],SHA1:[\"builtInCall\"],SHA256:[\"builtInCall\"],SHA384:[\"builtInCall\"],SHA512:[\"builtInCall\"],COALESCE:[\"builtInCall\"],IF:[\"builtInCall\"],STRLANG:[\"builtInCall\"],STRDT:[\"builtInCall\"],SAMETERM:[\"builtInCall\"],ISIRI:[\"builtInCall\"],ISURI:[\"builtInCall\"],ISBLANK:[\"builtInCall\"],ISLITERAL:[\"builtInCall\"],ISNUMERIC:[\"builtInCall\"],SUBSTR:[\"builtInCall\"],REPLACE:[\"builtInCall\"],REGEX:[\"builtInCall\"],EXISTS:[\"builtInCall\"],NOT:[\"builtInCall\"],IRI_REF:[\"functionCall\"],PNAME_LN:[\"functionCall\"],PNAME_NS:[\"functionCall\"],\"(\":[\"(\",\"expression\",\"?[AS,var]\",\")\"],VAR1:[\"var\"],VAR2:[\"var\"]},groupGraphPattern:{\"{\":[\"{\",\"or([subSelect,groupGraphPatternSub])\",\"}\"]},groupGraphPatternSub:{\"{\":[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],OPTIONAL:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],MINUS:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],GRAPH:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],SERVICE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],FILTER:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],BIND:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],VALUES:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],VAR1:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],VAR2:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],NIL:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],\"(\":[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],\"[\":[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],IRI_REF:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],TRUE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],FALSE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],BLANK_NODE_LABEL:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],ANON:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],PNAME_LN:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],PNAME_NS:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],STRING_LITERAL1:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],STRING_LITERAL2:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],STRING_LITERAL_LONG1:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],STRING_LITERAL_LONG2:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],INTEGER:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],DECIMAL:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],DOUBLE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],INTEGER_POSITIVE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],DECIMAL_POSITIVE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],DOUBLE_POSITIVE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],INTEGER_NEGATIVE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],DECIMAL_NEGATIVE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],DOUBLE_NEGATIVE:[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"],\"}\":[\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"]},groupOrUnionGraphPattern:{\"{\":[\"groupGraphPattern\",\"*[UNION,groupGraphPattern]\"]},havingClause:{HAVING:[\"HAVING\",\"+havingCondition\"]},havingCondition:{\"(\":[\"constraint\"],STR:[\"constraint\"],LANG:[\"constraint\"],LANGMATCHES:[\"constraint\"],DATATYPE:[\"constraint\"],BOUND:[\"constraint\"],IRI:[\"constraint\"],URI:[\"constraint\"],BNODE:[\"constraint\"],RAND:[\"constraint\"],ABS:[\"constraint\"],CEIL:[\"constraint\"],FLOOR:[\"constraint\"],ROUND:[\"constraint\"],CONCAT:[\"constraint\"],STRLEN:[\"constraint\"],UCASE:[\"constraint\"],LCASE:[\"constraint\"],ENCODE_FOR_URI:[\"constraint\"],CONTAINS:[\"constraint\"],STRSTARTS:[\"constraint\"],STRENDS:[\"constraint\"],STRBEFORE:[\"constraint\"],STRAFTER:[\"constraint\"],YEAR:[\"constraint\"],MONTH:[\"constraint\"],DAY:[\"constraint\"],HOURS:[\"constraint\"],MINUTES:[\"constraint\"],SECONDS:[\"constraint\"],TIMEZONE:[\"constraint\"],TZ:[\"constraint\"],NOW:[\"constraint\"],UUID:[\"constraint\"],STRUUID:[\"constraint\"],MD5:[\"constraint\"],SHA1:[\"constraint\"],SHA256:[\"constraint\"],SHA384:[\"constraint\"],SHA512:[\"constraint\"],COALESCE:[\"constraint\"],IF:[\"constraint\"],STRLANG:[\"constraint\"],STRDT:[\"constraint\"],SAMETERM:[\"constraint\"],ISIRI:[\"constraint\"],ISURI:[\"constraint\"],ISBLANK:[\"constraint\"],ISLITERAL:[\"constraint\"],ISNUMERIC:[\"constraint\"],SUBSTR:[\"constraint\"],REPLACE:[\"constraint\"],REGEX:[\"constraint\"],EXISTS:[\"constraint\"],NOT:[\"constraint\"],IRI_REF:[\"constraint\"],PNAME_LN:[\"constraint\"],PNAME_NS:[\"constraint\"]},inlineData:{VALUES:[\"VALUES\",\"dataBlock\"]},inlineDataFull:{NIL:[\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"],\"(\":[\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"]},inlineDataOneVar:{VAR1:[\"var\",\"{\",\"*dataBlockValue\",\"}\"],VAR2:[\"var\",\"{\",\"*dataBlockValue\",\"}\"]},insert1:{DATA:[\"DATA\",\"quadData\"],\"{\":[\"quadPattern\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]},insertClause:{INSERT:[\"INSERT\",\"quadPattern\"]},integer:{INTEGER:[\"INTEGER\"]},iriRef:{IRI_REF:[\"IRI_REF\"],PNAME_LN:[\"prefixedName\"],PNAME_NS:[\"prefixedName\"]},iriRefOrFunction:{IRI_REF:[\"iriRef\",\"?argList\"],PNAME_LN:[\"iriRef\",\"?argList\"],PNAME_NS:[\"iriRef\",\"?argList\"]},limitClause:{LIMIT:[\"LIMIT\",\"INTEGER\"]},limitOffsetClauses:{LIMIT:[\"limitClause\",\"?offsetClause\"],OFFSET:[\"offsetClause\",\"?limitClause\"]},load:{LOAD:[\"LOAD\",\"?SILENT_1\",\"iriRef\",\"?[INTO,graphRef]\"]},minusGraphPattern:{MINUS:[\"MINUS\",\"groupGraphPattern\"]},modify:{WITH:[\"WITH\",\"iriRef\",\"or([[deleteClause,?insertClause],insertClause])\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]},move:{MOVE:[\"MOVE\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]},multiplicativeExpression:{\"!\":[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],\"+\":[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],\"-\":[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],VAR1:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],VAR2:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],\"(\":[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STR:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],LANG:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],LANGMATCHES:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DATATYPE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],BOUND:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],IRI:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],URI:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],BNODE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],RAND:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ABS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],CEIL:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],FLOOR:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ROUND:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],CONCAT:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRLEN:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],UCASE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],LCASE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ENCODE_FOR_URI:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],CONTAINS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRSTARTS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRENDS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRBEFORE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRAFTER:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],YEAR:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],MONTH:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DAY:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],HOURS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],MINUTES:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SECONDS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],TIMEZONE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],TZ:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],NOW:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],UUID:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRUUID:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],MD5:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SHA1:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SHA256:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SHA384:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SHA512:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],COALESCE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],IF:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRLANG:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRDT:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SAMETERM:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ISIRI:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ISURI:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ISBLANK:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ISLITERAL:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],ISNUMERIC:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],TRUE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],FALSE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],COUNT:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SUM:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],MIN:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],MAX:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],AVG:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SAMPLE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],GROUP_CONCAT:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],SUBSTR:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],REPLACE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],REGEX:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],EXISTS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],NOT:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],IRI_REF:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRING_LITERAL1:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRING_LITERAL2:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRING_LITERAL_LONG1:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],STRING_LITERAL_LONG2:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],INTEGER:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DECIMAL:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DOUBLE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],INTEGER_POSITIVE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DECIMAL_POSITIVE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DOUBLE_POSITIVE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],INTEGER_NEGATIVE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DECIMAL_NEGATIVE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],DOUBLE_NEGATIVE:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],PNAME_LN:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"],PNAME_NS:[\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"]},namedGraphClause:{NAMED:[\"NAMED\",\"sourceSelector\"]},notExistsFunc:{NOT:[\"NOT\",\"EXISTS\",\"groupGraphPattern\"]},numericExpression:{\"!\":[\"additiveExpression\"],\"+\":[\"additiveExpression\"],\"-\":[\"additiveExpression\"],VAR1:[\"additiveExpression\"],VAR2:[\"additiveExpression\"],\"(\":[\"additiveExpression\"],STR:[\"additiveExpression\"],LANG:[\"additiveExpression\"],LANGMATCHES:[\"additiveExpression\"],DATATYPE:[\"additiveExpression\"],BOUND:[\"additiveExpression\"],IRI:[\"additiveExpression\"],URI:[\"additiveExpression\"],BNODE:[\"additiveExpression\"],RAND:[\"additiveExpression\"],ABS:[\"additiveExpression\"],CEIL:[\"additiveExpression\"],FLOOR:[\"additiveExpression\"],ROUND:[\"additiveExpression\"],CONCAT:[\"additiveExpression\"],STRLEN:[\"additiveExpression\"],UCASE:[\"additiveExpression\"],LCASE:[\"additiveExpression\"],ENCODE_FOR_URI:[\"additiveExpression\"],CONTAINS:[\"additiveExpression\"],STRSTARTS:[\"additiveExpression\"],STRENDS:[\"additiveExpression\"],STRBEFORE:[\"additiveExpression\"],STRAFTER:[\"additiveExpression\"],YEAR:[\"additiveExpression\"],MONTH:[\"additiveExpression\"],DAY:[\"additiveExpression\"],HOURS:[\"additiveExpression\"],MINUTES:[\"additiveExpression\"],SECONDS:[\"additiveExpression\"],TIMEZONE:[\"additiveExpression\"],TZ:[\"additiveExpression\"],NOW:[\"additiveExpression\"],UUID:[\"additiveExpression\"],STRUUID:[\"additiveExpression\"],MD5:[\"additiveExpression\"],SHA1:[\"additiveExpression\"],SHA256:[\"additiveExpression\"],SHA384:[\"additiveExpression\"],SHA512:[\"additiveExpression\"],COALESCE:[\"additiveExpression\"],IF:[\"additiveExpression\"],STRLANG:[\"additiveExpression\"],STRDT:[\"additiveExpression\"],SAMETERM:[\"additiveExpression\"],ISIRI:[\"additiveExpression\"],ISURI:[\"additiveExpression\"],ISBLANK:[\"additiveExpression\"],ISLITERAL:[\"additiveExpression\"],ISNUMERIC:[\"additiveExpression\"],TRUE:[\"additiveExpression\"],FALSE:[\"additiveExpression\"],COUNT:[\"additiveExpression\"],SUM:[\"additiveExpression\"],MIN:[\"additiveExpression\"],MAX:[\"additiveExpression\"],AVG:[\"additiveExpression\"],SAMPLE:[\"additiveExpression\"],GROUP_CONCAT:[\"additiveExpression\"],SUBSTR:[\"additiveExpression\"],REPLACE:[\"additiveExpression\"],REGEX:[\"additiveExpression\"],EXISTS:[\"additiveExpression\"],NOT:[\"additiveExpression\"],IRI_REF:[\"additiveExpression\"],STRING_LITERAL1:[\"additiveExpression\"],STRING_LITERAL2:[\"additiveExpression\"],STRING_LITERAL_LONG1:[\"additiveExpression\"],STRING_LITERAL_LONG2:[\"additiveExpression\"],INTEGER:[\"additiveExpression\"],DECIMAL:[\"additiveExpression\"],DOUBLE:[\"additiveExpression\"],INTEGER_POSITIVE:[\"additiveExpression\"],DECIMAL_POSITIVE:[\"additiveExpression\"],DOUBLE_POSITIVE:[\"additiveExpression\"],INTEGER_NEGATIVE:[\"additiveExpression\"],DECIMAL_NEGATIVE:[\"additiveExpression\"],DOUBLE_NEGATIVE:[\"additiveExpression\"],PNAME_LN:[\"additiveExpression\"],PNAME_NS:[\"additiveExpression\"]},numericLiteral:{INTEGER:[\"numericLiteralUnsigned\"],DECIMAL:[\"numericLiteralUnsigned\"],DOUBLE:[\"numericLiteralUnsigned\"],INTEGER_POSITIVE:[\"numericLiteralPositive\"],DECIMAL_POSITIVE:[\"numericLiteralPositive\"],DOUBLE_POSITIVE:[\"numericLiteralPositive\"],INTEGER_NEGATIVE:[\"numericLiteralNegative\"],DECIMAL_NEGATIVE:[\"numericLiteralNegative\"],DOUBLE_NEGATIVE:[\"numericLiteralNegative\"]},numericLiteralNegative:{INTEGER_NEGATIVE:[\"INTEGER_NEGATIVE\"],DECIMAL_NEGATIVE:[\"DECIMAL_NEGATIVE\"],DOUBLE_NEGATIVE:[\"DOUBLE_NEGATIVE\"]},numericLiteralPositive:{INTEGER_POSITIVE:[\"INTEGER_POSITIVE\"],DECIMAL_POSITIVE:[\"DECIMAL_POSITIVE\"],DOUBLE_POSITIVE:[\"DOUBLE_POSITIVE\"]},numericLiteralUnsigned:{INTEGER:[\"INTEGER\"],DECIMAL:[\"DECIMAL\"],DOUBLE:[\"DOUBLE\"]},object:{\"(\":[\"graphNode\"],\"[\":[\"graphNode\"],VAR1:[\"graphNode\"],VAR2:[\"graphNode\"],NIL:[\"graphNode\"],IRI_REF:[\"graphNode\"],TRUE:[\"graphNode\"],FALSE:[\"graphNode\"],BLANK_NODE_LABEL:[\"graphNode\"],ANON:[\"graphNode\"],PNAME_LN:[\"graphNode\"],PNAME_NS:[\"graphNode\"],STRING_LITERAL1:[\"graphNode\"],STRING_LITERAL2:[\"graphNode\"],STRING_LITERAL_LONG1:[\"graphNode\"],STRING_LITERAL_LONG2:[\"graphNode\"],INTEGER:[\"graphNode\"],DECIMAL:[\"graphNode\"],DOUBLE:[\"graphNode\"],INTEGER_POSITIVE:[\"graphNode\"],DECIMAL_POSITIVE:[\"graphNode\"],DOUBLE_POSITIVE:[\"graphNode\"],INTEGER_NEGATIVE:[\"graphNode\"],DECIMAL_NEGATIVE:[\"graphNode\"],DOUBLE_NEGATIVE:[\"graphNode\"]},objectList:{\"(\":[\"object\",\"*[,,object]\"],\"[\":[\"object\",\"*[,,object]\"],VAR1:[\"object\",\"*[,,object]\"],VAR2:[\"object\",\"*[,,object]\"],NIL:[\"object\",\"*[,,object]\"],IRI_REF:[\"object\",\"*[,,object]\"],TRUE:[\"object\",\"*[,,object]\"],FALSE:[\"object\",\"*[,,object]\"],BLANK_NODE_LABEL:[\"object\",\"*[,,object]\"],ANON:[\"object\",\"*[,,object]\"],PNAME_LN:[\"object\",\"*[,,object]\"],PNAME_NS:[\"object\",\"*[,,object]\"],STRING_LITERAL1:[\"object\",\"*[,,object]\"],STRING_LITERAL2:[\"object\",\"*[,,object]\"],STRING_LITERAL_LONG1:[\"object\",\"*[,,object]\"],STRING_LITERAL_LONG2:[\"object\",\"*[,,object]\"],INTEGER:[\"object\",\"*[,,object]\"],DECIMAL:[\"object\",\"*[,,object]\"],DOUBLE:[\"object\",\"*[,,object]\"],INTEGER_POSITIVE:[\"object\",\"*[,,object]\"],DECIMAL_POSITIVE:[\"object\",\"*[,,object]\"],DOUBLE_POSITIVE:[\"object\",\"*[,,object]\"],INTEGER_NEGATIVE:[\"object\",\"*[,,object]\"],DECIMAL_NEGATIVE:[\"object\",\"*[,,object]\"],DOUBLE_NEGATIVE:[\"object\",\"*[,,object]\"]},objectListPath:{\"(\":[\"objectPath\",\"*[,,objectPath]\"],\"[\":[\"objectPath\",\"*[,,objectPath]\"],VAR1:[\"objectPath\",\"*[,,objectPath]\"],VAR2:[\"objectPath\",\"*[,,objectPath]\"],NIL:[\"objectPath\",\"*[,,objectPath]\"],IRI_REF:[\"objectPath\",\"*[,,objectPath]\"],TRUE:[\"objectPath\",\"*[,,objectPath]\"],FALSE:[\"objectPath\",\"*[,,objectPath]\"],BLANK_NODE_LABEL:[\"objectPath\",\"*[,,objectPath]\"],ANON:[\"objectPath\",\"*[,,objectPath]\"],PNAME_LN:[\"objectPath\",\"*[,,objectPath]\"],PNAME_NS:[\"objectPath\",\"*[,,objectPath]\"],STRING_LITERAL1:[\"objectPath\",\"*[,,objectPath]\"],STRING_LITERAL2:[\"objectPath\",\"*[,,objectPath]\"],STRING_LITERAL_LONG1:[\"objectPath\",\"*[,,objectPath]\"],STRING_LITERAL_LONG2:[\"objectPath\",\"*[,,objectPath]\"],INTEGER:[\"objectPath\",\"*[,,objectPath]\"],DECIMAL:[\"objectPath\",\"*[,,objectPath]\"],DOUBLE:[\"objectPath\",\"*[,,objectPath]\"],INTEGER_POSITIVE:[\"objectPath\",\"*[,,objectPath]\"],DECIMAL_POSITIVE:[\"objectPath\",\"*[,,objectPath]\"],DOUBLE_POSITIVE:[\"objectPath\",\"*[,,objectPath]\"],INTEGER_NEGATIVE:[\"objectPath\",\"*[,,objectPath]\"],DECIMAL_NEGATIVE:[\"objectPath\",\"*[,,objectPath]\"],DOUBLE_NEGATIVE:[\"objectPath\",\"*[,,objectPath]\"]},objectPath:{\"(\":[\"graphNodePath\"],\"[\":[\"graphNodePath\"],VAR1:[\"graphNodePath\"],VAR2:[\"graphNodePath\"],NIL:[\"graphNodePath\"],IRI_REF:[\"graphNodePath\"],TRUE:[\"graphNodePath\"],FALSE:[\"graphNodePath\"],BLANK_NODE_LABEL:[\"graphNodePath\"],ANON:[\"graphNodePath\"],PNAME_LN:[\"graphNodePath\"],PNAME_NS:[\"graphNodePath\"],STRING_LITERAL1:[\"graphNodePath\"],STRING_LITERAL2:[\"graphNodePath\"],STRING_LITERAL_LONG1:[\"graphNodePath\"],STRING_LITERAL_LONG2:[\"graphNodePath\"],INTEGER:[\"graphNodePath\"],DECIMAL:[\"graphNodePath\"],DOUBLE:[\"graphNodePath\"],INTEGER_POSITIVE:[\"graphNodePath\"],DECIMAL_POSITIVE:[\"graphNodePath\"],DOUBLE_POSITIVE:[\"graphNodePath\"],INTEGER_NEGATIVE:[\"graphNodePath\"],DECIMAL_NEGATIVE:[\"graphNodePath\"],DOUBLE_NEGATIVE:[\"graphNodePath\"]},offsetClause:{OFFSET:[\"OFFSET\",\"INTEGER\"]},optionalGraphPattern:{OPTIONAL:[\"OPTIONAL\",\"groupGraphPattern\"]},\"or([*,expression])\":{\"*\":[\"*\"],\"!\":[\"expression\"],\"+\":[\"expression\"],\"-\":[\"expression\"],VAR1:[\"expression\"],VAR2:[\"expression\"],\"(\":[\"expression\"],STR:[\"expression\"],LANG:[\"expression\"],LANGMATCHES:[\"expression\"],DATATYPE:[\"expression\"],BOUND:[\"expression\"],IRI:[\"expression\"],URI:[\"expression\"],BNODE:[\"expression\"],RAND:[\"expression\"],ABS:[\"expression\"],CEIL:[\"expression\"],FLOOR:[\"expression\"],ROUND:[\"expression\"],CONCAT:[\"expression\"],STRLEN:[\"expression\"],UCASE:[\"expression\"],LCASE:[\"expression\"],ENCODE_FOR_URI:[\"expression\"],CONTAINS:[\"expression\"],STRSTARTS:[\"expression\"],STRENDS:[\"expression\"],STRBEFORE:[\"expression\"],STRAFTER:[\"expression\"],YEAR:[\"expression\"],MONTH:[\"expression\"],DAY:[\"expression\"],HOURS:[\"expression\"],MINUTES:[\"expression\"],SECONDS:[\"expression\"],TIMEZONE:[\"expression\"],TZ:[\"expression\"],NOW:[\"expression\"],UUID:[\"expression\"],STRUUID:[\"expression\"],MD5:[\"expression\"],SHA1:[\"expression\"],SHA256:[\"expression\"],SHA384:[\"expression\"],SHA512:[\"expression\"],COALESCE:[\"expression\"],IF:[\"expression\"],STRLANG:[\"expression\"],STRDT:[\"expression\"],SAMETERM:[\"expression\"],ISIRI:[\"expression\"],ISURI:[\"expression\"],ISBLANK:[\"expression\"],ISLITERAL:[\"expression\"],ISNUMERIC:[\"expression\"],TRUE:[\"expression\"],FALSE:[\"expression\"],COUNT:[\"expression\"],SUM:[\"expression\"],MIN:[\"expression\"],MAX:[\"expression\"],AVG:[\"expression\"],SAMPLE:[\"expression\"],GROUP_CONCAT:[\"expression\"],SUBSTR:[\"expression\"],REPLACE:[\"expression\"],REGEX:[\"expression\"],EXISTS:[\"expression\"],NOT:[\"expression\"],IRI_REF:[\"expression\"],STRING_LITERAL1:[\"expression\"],STRING_LITERAL2:[\"expression\"],STRING_LITERAL_LONG1:[\"expression\"],STRING_LITERAL_LONG2:[\"expression\"],INTEGER:[\"expression\"],DECIMAL:[\"expression\"],DOUBLE:[\"expression\"],INTEGER_POSITIVE:[\"expression\"],DECIMAL_POSITIVE:[\"expression\"],DOUBLE_POSITIVE:[\"expression\"],INTEGER_NEGATIVE:[\"expression\"],DECIMAL_NEGATIVE:[\"expression\"],DOUBLE_NEGATIVE:[\"expression\"],PNAME_LN:[\"expression\"],PNAME_NS:[\"expression\"]},\"or([+or([var,[ (,expression,AS,var,)]]),*])\":{\"(\":[\"+or([var,[ (,expression,AS,var,)]])\"],VAR1:[\"+or([var,[ (,expression,AS,var,)]])\"],VAR2:[\"+or([var,[ (,expression,AS,var,)]])\"],\"*\":[\"*\"]},\"or([+varOrIRIref,*])\":{VAR1:[\"+varOrIRIref\"],VAR2:[\"+varOrIRIref\"],IRI_REF:[\"+varOrIRIref\"],PNAME_LN:[\"+varOrIRIref\"],PNAME_NS:[\"+varOrIRIref\"],\"*\":[\"*\"]},\"or([ASC,DESC])\":{ASC:[\"ASC\"],DESC:[\"DESC\"]},\"or([DISTINCT,REDUCED])\":{DISTINCT:[\"DISTINCT\"],REDUCED:[\"REDUCED\"]},\"or([LANGTAG,[^^,iriRef]])\":{LANGTAG:[\"LANGTAG\"],\"^^\":[\"[^^,iriRef]\"]},\"or([NIL,[ (,*var,)]])\":{NIL:[\"NIL\"],\"(\":[\"[ (,*var,)]\"]},\"or([[ (,*dataBlockValue,)],NIL])\":{\"(\":[\"[ (,*dataBlockValue,)]\"],NIL:[\"NIL\"]},\"or([[ (,expression,)],NIL])\":{\"(\":[\"[ (,expression,)]\"],NIL:[\"NIL\"]},\"or([[*,unaryExpression],[/,unaryExpression]])\":{\"*\":[\"[*,unaryExpression]\"],\"/\":[\"[/,unaryExpression]\"]},\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\":{\"+\":[\"[+,multiplicativeExpression]\"],\"-\":[\"[-,multiplicativeExpression]\"],INTEGER_POSITIVE:[\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"],DECIMAL_POSITIVE:[\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"],DOUBLE_POSITIVE:[\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"],INTEGER_NEGATIVE:[\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"],DECIMAL_NEGATIVE:[\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"],DOUBLE_NEGATIVE:[\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"]},\"or([[,,or([},[integer,}]])],}])\":{\",\":[\"[,,or([},[integer,}]])]\"],\"}\":[\"}\"]},\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\":{\"=\":[\"[=,numericExpression]\"],\"!=\":[\"[!=,numericExpression]\"],\"<\":[\"[<,numericExpression]\"],\">\":[\"[>,numericExpression]\"],\"<=\":[\"[<=,numericExpression]\"],\">=\":[\"[>=,numericExpression]\"],IN:[\"[IN,expressionList]\"],NOT:[\"[NOT,IN,expressionList]\"]},\"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\":{\"{\":[\"[constructTemplate,*datasetClause,whereClause,solutionModifier]\"],WHERE:[\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"],FROM:[\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"]},\"or([[deleteClause,?insertClause],insertClause])\":{DELETE:[\"[deleteClause,?insertClause]\"],INSERT:[\"insertClause\"]},\"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\":{INTEGER:[\"[integer,or([[,,or([},[integer,}]])],}])]\"],\",\":[\"[,,integer,}]\"]},\"or([defaultGraphClause,namedGraphClause])\":{IRI_REF:[\"defaultGraphClause\"],PNAME_LN:[\"defaultGraphClause\"],PNAME_NS:[\"defaultGraphClause\"],NAMED:[\"namedGraphClause\"]},\"or([inlineDataOneVar,inlineDataFull])\":{VAR1:[\"inlineDataOneVar\"],VAR2:[\"inlineDataOneVar\"],NIL:[\"inlineDataFull\"],\"(\":[\"inlineDataFull\"]},\"or([iriRef,[NAMED,iriRef]])\":{IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"],NAMED:[\"[NAMED,iriRef]\"]},\"or([iriRef,a])\":{IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"],a:[\"a\"]},\"or([numericLiteralPositive,numericLiteralNegative])\":{INTEGER_POSITIVE:[\"numericLiteralPositive\"],DECIMAL_POSITIVE:[\"numericLiteralPositive\"],DOUBLE_POSITIVE:[\"numericLiteralPositive\"],INTEGER_NEGATIVE:[\"numericLiteralNegative\"],DECIMAL_NEGATIVE:[\"numericLiteralNegative\"],DOUBLE_NEGATIVE:[\"numericLiteralNegative\"]},\"or([queryAll,updateAll])\":{CONSTRUCT:[\"queryAll\"],DESCRIBE:[\"queryAll\"],ASK:[\"queryAll\"],SELECT:[\"queryAll\"],INSERT:[\"updateAll\"],DELETE:[\"updateAll\"],LOAD:[\"updateAll\"],CLEAR:[\"updateAll\"],DROP:[\"updateAll\"],ADD:[\"updateAll\"],MOVE:[\"updateAll\"],COPY:[\"updateAll\"],CREATE:[\"updateAll\"],WITH:[\"updateAll\"],$:[\"updateAll\"]},\"or([selectQuery,constructQuery,describeQuery,askQuery])\":{SELECT:[\"selectQuery\"],CONSTRUCT:[\"constructQuery\"],DESCRIBE:[\"describeQuery\"],ASK:[\"askQuery\"]},\"or([subSelect,groupGraphPatternSub])\":{SELECT:[\"subSelect\"],\"{\":[\"groupGraphPatternSub\"],OPTIONAL:[\"groupGraphPatternSub\"],MINUS:[\"groupGraphPatternSub\"],GRAPH:[\"groupGraphPatternSub\"],SERVICE:[\"groupGraphPatternSub\"],FILTER:[\"groupGraphPatternSub\"],BIND:[\"groupGraphPatternSub\"],VALUES:[\"groupGraphPatternSub\"],VAR1:[\"groupGraphPatternSub\"],VAR2:[\"groupGraphPatternSub\"],NIL:[\"groupGraphPatternSub\"],\"(\":[\"groupGraphPatternSub\"],\"[\":[\"groupGraphPatternSub\"],IRI_REF:[\"groupGraphPatternSub\"],TRUE:[\"groupGraphPatternSub\"],FALSE:[\"groupGraphPatternSub\"],BLANK_NODE_LABEL:[\"groupGraphPatternSub\"],ANON:[\"groupGraphPatternSub\"],PNAME_LN:[\"groupGraphPatternSub\"],PNAME_NS:[\"groupGraphPatternSub\"],STRING_LITERAL1:[\"groupGraphPatternSub\"],STRING_LITERAL2:[\"groupGraphPatternSub\"],STRING_LITERAL_LONG1:[\"groupGraphPatternSub\"],STRING_LITERAL_LONG2:[\"groupGraphPatternSub\"],INTEGER:[\"groupGraphPatternSub\"],DECIMAL:[\"groupGraphPatternSub\"],DOUBLE:[\"groupGraphPatternSub\"],INTEGER_POSITIVE:[\"groupGraphPatternSub\"],DECIMAL_POSITIVE:[\"groupGraphPatternSub\"],DOUBLE_POSITIVE:[\"groupGraphPatternSub\"],INTEGER_NEGATIVE:[\"groupGraphPatternSub\"],DECIMAL_NEGATIVE:[\"groupGraphPatternSub\"],DOUBLE_NEGATIVE:[\"groupGraphPatternSub\"],\"}\":[\"groupGraphPatternSub\"]},\"or([var,[ (,expression,AS,var,)]])\":{VAR1:[\"var\"],VAR2:[\"var\"],\"(\":[\"[ (,expression,AS,var,)]\"]},\"or([verbPath,verbSimple])\":{\"^\":[\"verbPath\"],a:[\"verbPath\"],\"!\":[\"verbPath\"],\"(\":[\"verbPath\"],IRI_REF:[\"verbPath\"],PNAME_LN:[\"verbPath\"],PNAME_NS:[\"verbPath\"],VAR1:[\"verbSimple\"],VAR2:[\"verbSimple\"]},\"or([},[integer,}]])\":{\"}\":[\"}\"],INTEGER:[\"[integer,}]\"]},orderClause:{ORDER:[\"ORDER\",\"BY\",\"+orderCondition\"]},orderCondition:{ASC:[\"or([ASC,DESC])\",\"brackettedExpression\"],DESC:[\"or([ASC,DESC])\",\"brackettedExpression\"],\"(\":[\"constraint\"],STR:[\"constraint\"],LANG:[\"constraint\"],LANGMATCHES:[\"constraint\"],DATATYPE:[\"constraint\"],BOUND:[\"constraint\"],IRI:[\"constraint\"],URI:[\"constraint\"],BNODE:[\"constraint\"],RAND:[\"constraint\"],ABS:[\"constraint\"],CEIL:[\"constraint\"],FLOOR:[\"constraint\"],ROUND:[\"constraint\"],CONCAT:[\"constraint\"],STRLEN:[\"constraint\"],UCASE:[\"constraint\"],LCASE:[\"constraint\"],ENCODE_FOR_URI:[\"constraint\"],CONTAINS:[\"constraint\"],STRSTARTS:[\"constraint\"],STRENDS:[\"constraint\"],STRBEFORE:[\"constraint\"],STRAFTER:[\"constraint\"],YEAR:[\"constraint\"],MONTH:[\"constraint\"],DAY:[\"constraint\"],HOURS:[\"constraint\"],MINUTES:[\"constraint\"],SECONDS:[\"constraint\"],TIMEZONE:[\"constraint\"],TZ:[\"constraint\"],NOW:[\"constraint\"],UUID:[\"constraint\"],STRUUID:[\"constraint\"],MD5:[\"constraint\"],SHA1:[\"constraint\"],SHA256:[\"constraint\"],SHA384:[\"constraint\"],SHA512:[\"constraint\"],COALESCE:[\"constraint\"],IF:[\"constraint\"],STRLANG:[\"constraint\"],STRDT:[\"constraint\"],SAMETERM:[\"constraint\"],ISIRI:[\"constraint\"],ISURI:[\"constraint\"],ISBLANK:[\"constraint\"],ISLITERAL:[\"constraint\"],ISNUMERIC:[\"constraint\"],SUBSTR:[\"constraint\"],REPLACE:[\"constraint\"],REGEX:[\"constraint\"],EXISTS:[\"constraint\"],NOT:[\"constraint\"],IRI_REF:[\"constraint\"],PNAME_LN:[\"constraint\"],PNAME_NS:[\"constraint\"],VAR1:[\"var\"],VAR2:[\"var\"]},path:{\"^\":[\"pathAlternative\"],a:[\"pathAlternative\"],\"!\":[\"pathAlternative\"],\"(\":[\"pathAlternative\"],IRI_REF:[\"pathAlternative\"],PNAME_LN:[\"pathAlternative\"],PNAME_NS:[\"pathAlternative\"]},pathAlternative:{\"^\":[\"pathSequence\",\"*[|,pathSequence]\"],a:[\"pathSequence\",\"*[|,pathSequence]\"],\"!\":[\"pathSequence\",\"*[|,pathSequence]\"],\"(\":[\"pathSequence\",\"*[|,pathSequence]\"],IRI_REF:[\"pathSequence\",\"*[|,pathSequence]\"],PNAME_LN:[\"pathSequence\",\"*[|,pathSequence]\"],PNAME_NS:[\"pathSequence\",\"*[|,pathSequence]\"]},pathElt:{a:[\"pathPrimary\",\"?pathMod\"],\"!\":[\"pathPrimary\",\"?pathMod\"],\"(\":[\"pathPrimary\",\"?pathMod\"],IRI_REF:[\"pathPrimary\",\"?pathMod\"],PNAME_LN:[\"pathPrimary\",\"?pathMod\"],PNAME_NS:[\"pathPrimary\",\"?pathMod\"]},pathEltOrInverse:{a:[\"pathElt\"],\"!\":[\"pathElt\"],\"(\":[\"pathElt\"],IRI_REF:[\"pathElt\"],PNAME_LN:[\"pathElt\"],PNAME_NS:[\"pathElt\"],\"^\":[\"^\",\"pathElt\"]},pathMod:{\"*\":[\"*\"],\"?\":[\"?\"],\"+\":[\"+\"],\"{\":[\"{\",\"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\"]},pathNegatedPropertySet:{a:[\"pathOneInPropertySet\"],\"^\":[\"pathOneInPropertySet\"],IRI_REF:[\"pathOneInPropertySet\"],PNAME_LN:[\"pathOneInPropertySet\"],PNAME_NS:[\"pathOneInPropertySet\"],\"(\":[\"(\",\"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\",\")\"]},pathOneInPropertySet:{IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"],a:[\"a\"],\"^\":[\"^\",\"or([iriRef,a])\"]},pathPrimary:{IRI_REF:[\"storeProperty\",\"iriRef\"],PNAME_LN:[\"storeProperty\",\"iriRef\"],PNAME_NS:[\"storeProperty\",\"iriRef\"],a:[\"storeProperty\",\"a\"],\"!\":[\"!\",\"pathNegatedPropertySet\"],\"(\":[\"(\",\"path\",\")\"]},pathSequence:{\"^\":[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"],a:[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"],\"!\":[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"],\"(\":[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"],IRI_REF:[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"],PNAME_LN:[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"],PNAME_NS:[\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"]},prefixDecl:{PREFIX:[\"PREFIX\",\"PNAME_NS\",\"IRI_REF\"]},prefixedName:{PNAME_LN:[\"PNAME_LN\"],PNAME_NS:[\"PNAME_NS\"]},primaryExpression:{\"(\":[\"brackettedExpression\"],STR:[\"builtInCall\"],LANG:[\"builtInCall\"],LANGMATCHES:[\"builtInCall\"],DATATYPE:[\"builtInCall\"],BOUND:[\"builtInCall\"],IRI:[\"builtInCall\"],URI:[\"builtInCall\"],BNODE:[\"builtInCall\"],RAND:[\"builtInCall\"],ABS:[\"builtInCall\"],CEIL:[\"builtInCall\"],FLOOR:[\"builtInCall\"],ROUND:[\"builtInCall\"],CONCAT:[\"builtInCall\"],STRLEN:[\"builtInCall\"],UCASE:[\"builtInCall\"],LCASE:[\"builtInCall\"],ENCODE_FOR_URI:[\"builtInCall\"],CONTAINS:[\"builtInCall\"],STRSTARTS:[\"builtInCall\"],STRENDS:[\"builtInCall\"],STRBEFORE:[\"builtInCall\"],STRAFTER:[\"builtInCall\"],YEAR:[\"builtInCall\"],MONTH:[\"builtInCall\"],DAY:[\"builtInCall\"],HOURS:[\"builtInCall\"],MINUTES:[\"builtInCall\"],SECONDS:[\"builtInCall\"],TIMEZONE:[\"builtInCall\"],TZ:[\"builtInCall\"],NOW:[\"builtInCall\"],UUID:[\"builtInCall\"],STRUUID:[\"builtInCall\"],MD5:[\"builtInCall\"],SHA1:[\"builtInCall\"],SHA256:[\"builtInCall\"],SHA384:[\"builtInCall\"],SHA512:[\"builtInCall\"],COALESCE:[\"builtInCall\"],IF:[\"builtInCall\"],STRLANG:[\"builtInCall\"],STRDT:[\"builtInCall\"],SAMETERM:[\"builtInCall\"],ISIRI:[\"builtInCall\"],ISURI:[\"builtInCall\"],ISBLANK:[\"builtInCall\"],ISLITERAL:[\"builtInCall\"],ISNUMERIC:[\"builtInCall\"],SUBSTR:[\"builtInCall\"],REPLACE:[\"builtInCall\"],REGEX:[\"builtInCall\"],EXISTS:[\"builtInCall\"],NOT:[\"builtInCall\"],IRI_REF:[\"iriRefOrFunction\"],PNAME_LN:[\"iriRefOrFunction\"],PNAME_NS:[\"iriRefOrFunction\"],STRING_LITERAL1:[\"rdfLiteral\"],STRING_LITERAL2:[\"rdfLiteral\"],STRING_LITERAL_LONG1:[\"rdfLiteral\"],STRING_LITERAL_LONG2:[\"rdfLiteral\"],INTEGER:[\"numericLiteral\"],DECIMAL:[\"numericLiteral\"],DOUBLE:[\"numericLiteral\"],INTEGER_POSITIVE:[\"numericLiteral\"],DECIMAL_POSITIVE:[\"numericLiteral\"],DOUBLE_POSITIVE:[\"numericLiteral\"],INTEGER_NEGATIVE:[\"numericLiteral\"],DECIMAL_NEGATIVE:[\"numericLiteral\"],DOUBLE_NEGATIVE:[\"numericLiteral\"],TRUE:[\"booleanLiteral\"],FALSE:[\"booleanLiteral\"],VAR1:[\"var\"],VAR2:[\"var\"],COUNT:[\"aggregate\"],SUM:[\"aggregate\"],MIN:[\"aggregate\"],MAX:[\"aggregate\"],AVG:[\"aggregate\"],SAMPLE:[\"aggregate\"],GROUP_CONCAT:[\"aggregate\"]},prologue:{PREFIX:[\"?baseDecl\",\"*prefixDecl\"],BASE:[\"?baseDecl\",\"*prefixDecl\"],$:[\"?baseDecl\",\"*prefixDecl\"],CONSTRUCT:[\"?baseDecl\",\"*prefixDecl\"],DESCRIBE:[\"?baseDecl\",\"*prefixDecl\"],ASK:[\"?baseDecl\",\"*prefixDecl\"],INSERT:[\"?baseDecl\",\"*prefixDecl\"],DELETE:[\"?baseDecl\",\"*prefixDecl\"],SELECT:[\"?baseDecl\",\"*prefixDecl\"],LOAD:[\"?baseDecl\",\"*prefixDecl\"],CLEAR:[\"?baseDecl\",\"*prefixDecl\"],DROP:[\"?baseDecl\",\"*prefixDecl\"],ADD:[\"?baseDecl\",\"*prefixDecl\"],MOVE:[\"?baseDecl\",\"*prefixDecl\"],COPY:[\"?baseDecl\",\"*prefixDecl\"],CREATE:[\"?baseDecl\",\"*prefixDecl\"],WITH:[\"?baseDecl\",\"*prefixDecl\"]},propertyList:{a:[\"propertyListNotEmpty\"],VAR1:[\"propertyListNotEmpty\"],VAR2:[\"propertyListNotEmpty\"],IRI_REF:[\"propertyListNotEmpty\"],PNAME_LN:[\"propertyListNotEmpty\"],PNAME_NS:[\"propertyListNotEmpty\"],\".\":[],\"}\":[],GRAPH:[]},propertyListNotEmpty:{a:[\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"],VAR1:[\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"],VAR2:[\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"],IRI_REF:[\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"],PNAME_LN:[\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"],PNAME_NS:[\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"]},propertyListPath:{a:[\"propertyListNotEmpty\"],VAR1:[\"propertyListNotEmpty\"],VAR2:[\"propertyListNotEmpty\"],IRI_REF:[\"propertyListNotEmpty\"],PNAME_LN:[\"propertyListNotEmpty\"],PNAME_NS:[\"propertyListNotEmpty\"],\".\":[],\"{\":[],OPTIONAL:[],MINUS:[],GRAPH:[],SERVICE:[],FILTER:[],BIND:[],VALUES:[],\"}\":[]},propertyListPathNotEmpty:{VAR1:[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],VAR2:[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\"^\":[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],a:[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\"!\":[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\"(\":[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],IRI_REF:[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],PNAME_LN:[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"],PNAME_NS:[\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"]},quadData:{\"{\":[\"{\",\"disallowVars\",\"quads\",\"allowVars\",\"}\"]},quadDataNoBnodes:{\"{\":[\"{\",\"disallowBnodes\",\"disallowVars\",\"quads\",\"allowVars\",\"allowBnodes\",\"}\"]},quadPattern:{\"{\":[\"{\",\"quads\",\"}\"]},quadPatternNoBnodes:{\"{\":[\"{\",\"disallowBnodes\",\"quads\",\"allowBnodes\",\"}\"]},quads:{GRAPH:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],VAR1:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],VAR2:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],NIL:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],\"(\":[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],\"[\":[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],IRI_REF:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],TRUE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],FALSE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],BLANK_NODE_LABEL:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],ANON:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],PNAME_LN:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],PNAME_NS:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],STRING_LITERAL1:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],STRING_LITERAL2:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],STRING_LITERAL_LONG1:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],STRING_LITERAL_LONG2:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],INTEGER:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],DECIMAL:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],DOUBLE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],INTEGER_POSITIVE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],DECIMAL_POSITIVE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],DOUBLE_POSITIVE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],INTEGER_NEGATIVE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],DECIMAL_NEGATIVE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],DOUBLE_NEGATIVE:[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"],\"}\":[\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"]},quadsNotTriples:{GRAPH:[\"GRAPH\",\"varOrIRIref\",\"{\",\"?triplesTemplate\",\"}\"]},queryAll:{CONSTRUCT:[\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"],DESCRIBE:[\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"],ASK:[\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"],SELECT:[\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"]},rdfLiteral:{STRING_LITERAL1:[\"string\",\"?or([LANGTAG,[^^,iriRef]])\"],STRING_LITERAL2:[\"string\",\"?or([LANGTAG,[^^,iriRef]])\"],STRING_LITERAL_LONG1:[\"string\",\"?or([LANGTAG,[^^,iriRef]])\"],STRING_LITERAL_LONG2:[\"string\",\"?or([LANGTAG,[^^,iriRef]])\"]},regexExpression:{REGEX:[\"REGEX\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]},relationalExpression:{\"!\":[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\"+\":[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\"-\":[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],VAR1:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],VAR2:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],\"(\":[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STR:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],LANG:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],LANGMATCHES:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DATATYPE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],BOUND:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],IRI:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],URI:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],BNODE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],RAND:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ABS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],CEIL:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],FLOOR:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ROUND:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],CONCAT:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRLEN:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],UCASE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],LCASE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ENCODE_FOR_URI:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],CONTAINS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRSTARTS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRENDS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRBEFORE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRAFTER:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],YEAR:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],MONTH:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DAY:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],HOURS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],MINUTES:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SECONDS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],TIMEZONE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],TZ:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],NOW:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],UUID:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRUUID:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],MD5:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SHA1:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SHA256:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SHA384:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SHA512:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],COALESCE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],IF:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRLANG:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRDT:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SAMETERM:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ISIRI:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ISURI:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ISBLANK:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ISLITERAL:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],ISNUMERIC:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],TRUE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],FALSE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],COUNT:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SUM:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],MIN:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],MAX:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],AVG:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SAMPLE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],GROUP_CONCAT:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],SUBSTR:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],REPLACE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],REGEX:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],EXISTS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],NOT:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],IRI_REF:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRING_LITERAL1:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRING_LITERAL2:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRING_LITERAL_LONG1:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],STRING_LITERAL_LONG2:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],INTEGER:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DECIMAL:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DOUBLE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],INTEGER_POSITIVE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DECIMAL_POSITIVE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DOUBLE_POSITIVE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],INTEGER_NEGATIVE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DECIMAL_NEGATIVE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],DOUBLE_NEGATIVE:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],PNAME_LN:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"],PNAME_NS:[\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"]},selectClause:{SELECT:[\"SELECT\",\"?or([DISTINCT,REDUCED])\",\"or([+or([var,[ (,expression,AS,var,)]]),*])\"]},selectQuery:{SELECT:[\"selectClause\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]},serviceGraphPattern:{SERVICE:[\"SERVICE\",\"?SILENT\",\"varOrIRIref\",\"groupGraphPattern\"]},solutionModifier:{LIMIT:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],OFFSET:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],ORDER:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],HAVING:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],GROUP:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],VALUES:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],$:[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"],\"}\":[\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"]},sourceSelector:{IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"]},sparql11:{$:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],CONSTRUCT:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],DESCRIBE:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],ASK:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],INSERT:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],DELETE:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],SELECT:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],LOAD:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],CLEAR:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],DROP:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],ADD:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],MOVE:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],COPY:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],CREATE:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],WITH:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],PREFIX:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"],BASE:[\"prologue\",\"or([queryAll,updateAll])\",\"$\"]},storeProperty:{VAR1:[],VAR2:[],IRI_REF:[],PNAME_LN:[],PNAME_NS:[],a:[]},strReplaceExpression:{REPLACE:[\"REPLACE\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]},string:{STRING_LITERAL1:[\"STRING_LITERAL1\"],STRING_LITERAL2:[\"STRING_LITERAL2\"],STRING_LITERAL_LONG1:[\"STRING_LITERAL_LONG1\"],STRING_LITERAL_LONG2:[\"STRING_LITERAL_LONG2\"]},subSelect:{SELECT:[\"selectClause\",\"whereClause\",\"solutionModifier\",\"valuesClause\"]},substringExpression:{SUBSTR:[\"SUBSTR\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]},triplesBlock:{VAR1:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],VAR2:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],NIL:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],\"(\":[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],\"[\":[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],IRI_REF:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],TRUE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],FALSE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],BLANK_NODE_LABEL:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],ANON:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],PNAME_LN:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],PNAME_NS:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],STRING_LITERAL1:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],STRING_LITERAL2:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],STRING_LITERAL_LONG1:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],STRING_LITERAL_LONG2:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],INTEGER:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],DECIMAL:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],DOUBLE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],INTEGER_POSITIVE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],DECIMAL_POSITIVE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],DOUBLE_POSITIVE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],INTEGER_NEGATIVE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],DECIMAL_NEGATIVE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"],DOUBLE_NEGATIVE:[\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"]},triplesNode:{\"(\":[\"collection\"],\"[\":[\"blankNodePropertyList\"]},triplesNodePath:{\"(\":[\"collectionPath\"],\"[\":[\"blankNodePropertyListPath\"]},triplesSameSubject:{VAR1:[\"varOrTerm\",\"propertyListNotEmpty\"],VAR2:[\"varOrTerm\",\"propertyListNotEmpty\"],NIL:[\"varOrTerm\",\"propertyListNotEmpty\"],IRI_REF:[\"varOrTerm\",\"propertyListNotEmpty\"],TRUE:[\"varOrTerm\",\"propertyListNotEmpty\"],FALSE:[\"varOrTerm\",\"propertyListNotEmpty\"],BLANK_NODE_LABEL:[\"varOrTerm\",\"propertyListNotEmpty\"],ANON:[\"varOrTerm\",\"propertyListNotEmpty\"],PNAME_LN:[\"varOrTerm\",\"propertyListNotEmpty\"],PNAME_NS:[\"varOrTerm\",\"propertyListNotEmpty\"],STRING_LITERAL1:[\"varOrTerm\",\"propertyListNotEmpty\"],STRING_LITERAL2:[\"varOrTerm\",\"propertyListNotEmpty\"],STRING_LITERAL_LONG1:[\"varOrTerm\",\"propertyListNotEmpty\"],STRING_LITERAL_LONG2:[\"varOrTerm\",\"propertyListNotEmpty\"],INTEGER:[\"varOrTerm\",\"propertyListNotEmpty\"],DECIMAL:[\"varOrTerm\",\"propertyListNotEmpty\"],DOUBLE:[\"varOrTerm\",\"propertyListNotEmpty\"],INTEGER_POSITIVE:[\"varOrTerm\",\"propertyListNotEmpty\"],DECIMAL_POSITIVE:[\"varOrTerm\",\"propertyListNotEmpty\"],DOUBLE_POSITIVE:[\"varOrTerm\",\"propertyListNotEmpty\"],INTEGER_NEGATIVE:[\"varOrTerm\",\"propertyListNotEmpty\"],DECIMAL_NEGATIVE:[\"varOrTerm\",\"propertyListNotEmpty\"],DOUBLE_NEGATIVE:[\"varOrTerm\",\"propertyListNotEmpty\"],\"(\":[\"triplesNode\",\"propertyList\"],\"[\":[\"triplesNode\",\"propertyList\"]},triplesSameSubjectPath:{VAR1:[\"varOrTerm\",\"propertyListPathNotEmpty\"],VAR2:[\"varOrTerm\",\"propertyListPathNotEmpty\"],NIL:[\"varOrTerm\",\"propertyListPathNotEmpty\"],IRI_REF:[\"varOrTerm\",\"propertyListPathNotEmpty\"],TRUE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],FALSE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],BLANK_NODE_LABEL:[\"varOrTerm\",\"propertyListPathNotEmpty\"],ANON:[\"varOrTerm\",\"propertyListPathNotEmpty\"],PNAME_LN:[\"varOrTerm\",\"propertyListPathNotEmpty\"],PNAME_NS:[\"varOrTerm\",\"propertyListPathNotEmpty\"],STRING_LITERAL1:[\"varOrTerm\",\"propertyListPathNotEmpty\"],STRING_LITERAL2:[\"varOrTerm\",\"propertyListPathNotEmpty\"],STRING_LITERAL_LONG1:[\"varOrTerm\",\"propertyListPathNotEmpty\"],STRING_LITERAL_LONG2:[\"varOrTerm\",\"propertyListPathNotEmpty\"],INTEGER:[\"varOrTerm\",\"propertyListPathNotEmpty\"],DECIMAL:[\"varOrTerm\",\"propertyListPathNotEmpty\"],DOUBLE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],INTEGER_POSITIVE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],DECIMAL_POSITIVE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],DOUBLE_POSITIVE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],INTEGER_NEGATIVE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],DECIMAL_NEGATIVE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],DOUBLE_NEGATIVE:[\"varOrTerm\",\"propertyListPathNotEmpty\"],\"(\":[\"triplesNodePath\",\"propertyListPath\"],\"[\":[\"triplesNodePath\",\"propertyListPath\"]},triplesTemplate:{VAR1:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],VAR2:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],NIL:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],\"(\":[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],\"[\":[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],IRI_REF:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],TRUE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],FALSE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],BLANK_NODE_LABEL:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],ANON:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],PNAME_LN:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],PNAME_NS:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],STRING_LITERAL1:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],STRING_LITERAL2:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],STRING_LITERAL_LONG1:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],STRING_LITERAL_LONG2:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],INTEGER:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],DECIMAL:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],DOUBLE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],INTEGER_POSITIVE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],DECIMAL_POSITIVE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],DOUBLE_POSITIVE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],INTEGER_NEGATIVE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],DECIMAL_NEGATIVE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"],DOUBLE_NEGATIVE:[\"triplesSameSubject\",\"?[.,?triplesTemplate]\"]},unaryExpression:{\"!\":[\"!\",\"primaryExpression\"],\"+\":[\"+\",\"primaryExpression\"],\"-\":[\"-\",\"primaryExpression\"],VAR1:[\"primaryExpression\"],VAR2:[\"primaryExpression\"],\"(\":[\"primaryExpression\"],STR:[\"primaryExpression\"],LANG:[\"primaryExpression\"],LANGMATCHES:[\"primaryExpression\"],DATATYPE:[\"primaryExpression\"],BOUND:[\"primaryExpression\"],IRI:[\"primaryExpression\"],URI:[\"primaryExpression\"],BNODE:[\"primaryExpression\"],RAND:[\"primaryExpression\"],ABS:[\"primaryExpression\"],CEIL:[\"primaryExpression\"],FLOOR:[\"primaryExpression\"],ROUND:[\"primaryExpression\"],CONCAT:[\"primaryExpression\"],STRLEN:[\"primaryExpression\"],UCASE:[\"primaryExpression\"],LCASE:[\"primaryExpression\"],ENCODE_FOR_URI:[\"primaryExpression\"],CONTAINS:[\"primaryExpression\"],STRSTARTS:[\"primaryExpression\"],STRENDS:[\"primaryExpression\"],STRBEFORE:[\"primaryExpression\"],STRAFTER:[\"primaryExpression\"],YEAR:[\"primaryExpression\"],MONTH:[\"primaryExpression\"],DAY:[\"primaryExpression\"],HOURS:[\"primaryExpression\"],MINUTES:[\"primaryExpression\"],SECONDS:[\"primaryExpression\"],TIMEZONE:[\"primaryExpression\"],TZ:[\"primaryExpression\"],NOW:[\"primaryExpression\"],UUID:[\"primaryExpression\"],STRUUID:[\"primaryExpression\"],MD5:[\"primaryExpression\"],SHA1:[\"primaryExpression\"],SHA256:[\"primaryExpression\"],SHA384:[\"primaryExpression\"],SHA512:[\"primaryExpression\"],COALESCE:[\"primaryExpression\"],IF:[\"primaryExpression\"],STRLANG:[\"primaryExpression\"],STRDT:[\"primaryExpression\"],SAMETERM:[\"primaryExpression\"],ISIRI:[\"primaryExpression\"],ISURI:[\"primaryExpression\"],ISBLANK:[\"primaryExpression\"],ISLITERAL:[\"primaryExpression\"],ISNUMERIC:[\"primaryExpression\"],TRUE:[\"primaryExpression\"],FALSE:[\"primaryExpression\"],COUNT:[\"primaryExpression\"],SUM:[\"primaryExpression\"],MIN:[\"primaryExpression\"],MAX:[\"primaryExpression\"],AVG:[\"primaryExpression\"],SAMPLE:[\"primaryExpression\"],GROUP_CONCAT:[\"primaryExpression\"],SUBSTR:[\"primaryExpression\"],REPLACE:[\"primaryExpression\"],REGEX:[\"primaryExpression\"],EXISTS:[\"primaryExpression\"],NOT:[\"primaryExpression\"],IRI_REF:[\"primaryExpression\"],STRING_LITERAL1:[\"primaryExpression\"],STRING_LITERAL2:[\"primaryExpression\"],STRING_LITERAL_LONG1:[\"primaryExpression\"],STRING_LITERAL_LONG2:[\"primaryExpression\"],INTEGER:[\"primaryExpression\"],DECIMAL:[\"primaryExpression\"],DOUBLE:[\"primaryExpression\"],INTEGER_POSITIVE:[\"primaryExpression\"],DECIMAL_POSITIVE:[\"primaryExpression\"],DOUBLE_POSITIVE:[\"primaryExpression\"],INTEGER_NEGATIVE:[\"primaryExpression\"],DECIMAL_NEGATIVE:[\"primaryExpression\"],DOUBLE_NEGATIVE:[\"primaryExpression\"],PNAME_LN:[\"primaryExpression\"],PNAME_NS:[\"primaryExpression\"]},update:{INSERT:[\"prologue\",\"?[update1,?[;,update]]\"],DELETE:[\"prologue\",\"?[update1,?[;,update]]\"],LOAD:[\"prologue\",\"?[update1,?[;,update]]\"],CLEAR:[\"prologue\",\"?[update1,?[;,update]]\"],DROP:[\"prologue\",\"?[update1,?[;,update]]\"],ADD:[\"prologue\",\"?[update1,?[;,update]]\"],MOVE:[\"prologue\",\"?[update1,?[;,update]]\"],COPY:[\"prologue\",\"?[update1,?[;,update]]\"],CREATE:[\"prologue\",\"?[update1,?[;,update]]\"],WITH:[\"prologue\",\"?[update1,?[;,update]]\"],PREFIX:[\"prologue\",\"?[update1,?[;,update]]\"],BASE:[\"prologue\",\"?[update1,?[;,update]]\"],$:[\"prologue\",\"?[update1,?[;,update]]\"]},update1:{LOAD:[\"load\"],CLEAR:[\"clear\"],DROP:[\"drop\"],ADD:[\"add\"],MOVE:[\"move\"],COPY:[\"copy\"],CREATE:[\"create\"],INSERT:[\"INSERT\",\"insert1\"],DELETE:[\"DELETE\",\"delete1\"],WITH:[\"modify\"]},updateAll:{INSERT:[\"?[update1,?[;,update]]\"],DELETE:[\"?[update1,?[;,update]]\"],LOAD:[\"?[update1,?[;,update]]\"],CLEAR:[\"?[update1,?[;,update]]\"],DROP:[\"?[update1,?[;,update]]\"],ADD:[\"?[update1,?[;,update]]\"],MOVE:[\"?[update1,?[;,update]]\"],COPY:[\"?[update1,?[;,update]]\"],CREATE:[\"?[update1,?[;,update]]\"],WITH:[\"?[update1,?[;,update]]\"],$:[\"?[update1,?[;,update]]\"]},usingClause:{USING:[\"USING\",\"or([iriRef,[NAMED,iriRef]])\"]},valueLogical:{\"!\":[\"relationalExpression\"],\"+\":[\"relationalExpression\"],\"-\":[\"relationalExpression\"],VAR1:[\"relationalExpression\"],VAR2:[\"relationalExpression\"],\"(\":[\"relationalExpression\"],STR:[\"relationalExpression\"],LANG:[\"relationalExpression\"],LANGMATCHES:[\"relationalExpression\"],DATATYPE:[\"relationalExpression\"],BOUND:[\"relationalExpression\"],IRI:[\"relationalExpression\"],URI:[\"relationalExpression\"],BNODE:[\"relationalExpression\"],RAND:[\"relationalExpression\"],ABS:[\"relationalExpression\"],CEIL:[\"relationalExpression\"],FLOOR:[\"relationalExpression\"],ROUND:[\"relationalExpression\"],CONCAT:[\"relationalExpression\"],STRLEN:[\"relationalExpression\"],UCASE:[\"relationalExpression\"],LCASE:[\"relationalExpression\"],ENCODE_FOR_URI:[\"relationalExpression\"],CONTAINS:[\"relationalExpression\"],STRSTARTS:[\"relationalExpression\"],STRENDS:[\"relationalExpression\"],STRBEFORE:[\"relationalExpression\"],STRAFTER:[\"relationalExpression\"],YEAR:[\"relationalExpression\"],MONTH:[\"relationalExpression\"],DAY:[\"relationalExpression\"],HOURS:[\"relationalExpression\"],MINUTES:[\"relationalExpression\"],SECONDS:[\"relationalExpression\"],TIMEZONE:[\"relationalExpression\"],TZ:[\"relationalExpression\"],NOW:[\"relationalExpression\"],UUID:[\"relationalExpression\"],STRUUID:[\"relationalExpression\"],MD5:[\"relationalExpression\"],SHA1:[\"relationalExpression\"],SHA256:[\"relationalExpression\"],SHA384:[\"relationalExpression\"],SHA512:[\"relationalExpression\"],COALESCE:[\"relationalExpression\"],IF:[\"relationalExpression\"],STRLANG:[\"relationalExpression\"],STRDT:[\"relationalExpression\"],SAMETERM:[\"relationalExpression\"],ISIRI:[\"relationalExpression\"],ISURI:[\"relationalExpression\"],ISBLANK:[\"relationalExpression\"],ISLITERAL:[\"relationalExpression\"],ISNUMERIC:[\"relationalExpression\"],TRUE:[\"relationalExpression\"],FALSE:[\"relationalExpression\"],COUNT:[\"relationalExpression\"],SUM:[\"relationalExpression\"],MIN:[\"relationalExpression\"],MAX:[\"relationalExpression\"],AVG:[\"relationalExpression\"],SAMPLE:[\"relationalExpression\"],GROUP_CONCAT:[\"relationalExpression\"],SUBSTR:[\"relationalExpression\"],REPLACE:[\"relationalExpression\"],REGEX:[\"relationalExpression\"],EXISTS:[\"relationalExpression\"],NOT:[\"relationalExpression\"],IRI_REF:[\"relationalExpression\"],STRING_LITERAL1:[\"relationalExpression\"],STRING_LITERAL2:[\"relationalExpression\"],STRING_LITERAL_LONG1:[\"relationalExpression\"],STRING_LITERAL_LONG2:[\"relationalExpression\"],INTEGER:[\"relationalExpression\"],DECIMAL:[\"relationalExpression\"],DOUBLE:[\"relationalExpression\"],INTEGER_POSITIVE:[\"relationalExpression\"],DECIMAL_POSITIVE:[\"relationalExpression\"],DOUBLE_POSITIVE:[\"relationalExpression\"],INTEGER_NEGATIVE:[\"relationalExpression\"],DECIMAL_NEGATIVE:[\"relationalExpression\"],DOUBLE_NEGATIVE:[\"relationalExpression\"],PNAME_LN:[\"relationalExpression\"],PNAME_NS:[\"relationalExpression\"]},valuesClause:{VALUES:[\"VALUES\",\"dataBlock\"],$:[],\"}\":[]},\"var\":{VAR1:[\"VAR1\"],VAR2:[\"VAR2\"]},varOrIRIref:{VAR1:[\"var\"],VAR2:[\"var\"],IRI_REF:[\"iriRef\"],PNAME_LN:[\"iriRef\"],PNAME_NS:[\"iriRef\"]},varOrTerm:{VAR1:[\"var\"],VAR2:[\"var\"],NIL:[\"graphTerm\"],IRI_REF:[\"graphTerm\"],TRUE:[\"graphTerm\"],FALSE:[\"graphTerm\"],BLANK_NODE_LABEL:[\"graphTerm\"],ANON:[\"graphTerm\"],PNAME_LN:[\"graphTerm\"],PNAME_NS:[\"graphTerm\"],STRING_LITERAL1:[\"graphTerm\"],STRING_LITERAL2:[\"graphTerm\"],STRING_LITERAL_LONG1:[\"graphTerm\"],STRING_LITERAL_LONG2:[\"graphTerm\"],INTEGER:[\"graphTerm\"],DECIMAL:[\"graphTerm\"],DOUBLE:[\"graphTerm\"],INTEGER_POSITIVE:[\"graphTerm\"],DECIMAL_POSITIVE:[\"graphTerm\"],DOUBLE_POSITIVE:[\"graphTerm\"],INTEGER_NEGATIVE:[\"graphTerm\"],DECIMAL_NEGATIVE:[\"graphTerm\"],DOUBLE_NEGATIVE:[\"graphTerm\"]},verb:{VAR1:[\"storeProperty\",\"varOrIRIref\"],VAR2:[\"storeProperty\",\"varOrIRIref\"],IRI_REF:[\"storeProperty\",\"varOrIRIref\"],PNAME_LN:[\"storeProperty\",\"varOrIRIref\"],PNAME_NS:[\"storeProperty\",\"varOrIRIref\"],a:[\"storeProperty\",\"a\"]},verbPath:{\"^\":[\"path\"],a:[\"path\"],\"!\":[\"path\"],\"(\":[\"path\"],IRI_REF:[\"path\"],PNAME_LN:[\"path\"],PNAME_NS:[\"path\"]},verbSimple:{VAR1:[\"var\"],VAR2:[\"var\"]},whereClause:{\"{\":[\"?WHERE\",\"groupGraphPattern\"],WHERE:[\"?WHERE\",\"groupGraphPattern\"]}}),s=/^(GROUP_CONCAT|DATATYPE|BASE|PREFIX|SELECT|CONSTRUCT|DESCRIBE|ASK|FROM|NAMED|ORDER|BY|LIMIT|ASC|DESC|OFFSET|DISTINCT|REDUCED|WHERE|GRAPH|OPTIONAL|UNION|FILTER|GROUP|HAVING|AS|VALUES|LOAD|CLEAR|DROP|CREATE|MOVE|COPY|SILENT|INSERT|DELETE|DATA|WITH|TO|USING|NAMED|MINUS|BIND|LANGMATCHES|LANG|BOUND|SAMETERM|ISIRI|ISURI|ISBLANK|ISLITERAL|REGEX|TRUE|FALSE|UNDEF|ADD|DEFAULT|ALL|SERVICE|INTO|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|STR)/i,a=/^(\\*|a|\\.|\\{|\\}|,|\\(|\\)|;|\\[|\\]|\\|\\||&&|=|!=|!|<=|>=|<|>|\\+|-|\\/|\\^\\^|\\?|\\||\\^)/,p=null,l=\"sparql11\",E=\"sparql11\",u=!0,c=i(),d=c.terminal,N={\"*[,, object]\":3,\"*[(,),object]\":3,\"*[(,),objectPath]\":3,\"*[/,pathEltOrInverse]\":2,object:2,objectPath:2,objectList:2,objectListPath:2,storeProperty:2,pathMod:2,\"?pathMod\":2,propertyListNotEmpty:1,propertyList:1,propertyListPath:1,propertyListPathNotEmpty:1,\"?[verb,objectList]\":1,\"?[or([verbPath, verbSimple]),objectList]\":1},I={\"}\":1,\"]\":0,\")\":1,\"{\":-1,\"(\":-1,\"*[;,?[or([verbPath,verbSimple]),objectList]]\":1};\nreturn{token:n,startState:function(){return{tokenize:n,OK:!0,complete:u,errorStartPos:null,errorEndPos:null,queryType:p,possibleCurrent:r(E),possibleNext:r(E),allowVars:!0,allowBnodes:!0,storeProperty:!1,lastProperty:\"\",stack:[E]}},indent:o,electricChars:\"}])\"}});e.defineMIME(\"application/x-sparql-query\",\"sparql11\")})},{codemirror:void 0}],4:[function(e,i){var r=i.exports=function(){this.words=0;this.prefixes=0;this.children=[]};r.prototype={insert:function(e,i){if(0!=e.length){var n,o,t=this;void 0===i&&(i=0);if(i!==e.length){t.prefixes++;n=e[i];void 0===t.children[n]&&(t.children[n]=new r);o=t.children[n];o.insert(e,i+1)}else t.words++}},remove:function(e,i){if(0!=e.length){var r,n,o=this;void 0===i&&(i=0);if(void 0!==o)if(i!==e.length){o.prefixes--;r=e[i];n=o.children[r];n.remove(e,i+1)}else o.words--}},update:function(e,i){if(0!=e.length&&0!=i.length){this.remove(e);this.insert(i)}},countWord:function(e,i){if(0==e.length)return 0;var r,n,o=this,t=0;void 0===i&&(i=0);if(i===e.length)return o.words;r=e[i];n=o.children[r];void 0!==n&&(t=n.countWord(e,i+1));return t},countPrefix:function(e,i){if(0==e.length)return 0;var r,n,o=this,t=0;void 0===i&&(i=0);if(i===e.length)return o.prefixes;var r=e[i];n=o.children[r];void 0!==n&&(t=n.countPrefix(e,i+1));return t},find:function(e){return 0==e.length?!1:this.countWord(e)>0?!0:!1},getAllWords:function(e){var i,r,n=this,o=[];void 0===e&&(e=\"\");if(void 0===n)return[];n.words>0&&o.push(e);for(i in n.children){r=n.children[i];o=o.concat(r.getAllWords(e+i))}return o},autoComplete:function(e,i){var r,n,o=this;if(0==e.length)return void 0===i?o.getAllWords(e):[];void 0===i&&(i=0);r=e[i];n=o.children[r];return void 0===n?[]:i===e.length-1?n.getAllWords(e):n.autoComplete(e,i+1)}}},{}],5:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";function i(e){var i=e.getWrapperElement();e.state.fullScreenRestore={scrollTop:window.pageYOffset,scrollLeft:window.pageXOffset,width:i.style.width,height:i.style.height};i.style.width=\"\";i.style.height=\"auto\";i.className+=\" CodeMirror-fullscreen\";document.documentElement.style.overflow=\"hidden\";e.refresh()}function r(e){var i=e.getWrapperElement();i.className=i.className.replace(/\\s*CodeMirror-fullscreen\\b/,\"\");document.documentElement.style.overflow=\"\";var r=e.state.fullScreenRestore;i.style.width=r.width;i.style.height=r.height;window.scrollTo(r.scrollLeft,r.scrollTop);e.refresh()}e.defineOption(\"fullScreen\",!1,function(n,o,t){t==e.Init&&(t=!1);!t!=!o&&(o?i(n):r(n))})})},{codemirror:void 0}],6:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){function i(e,i,n,o){var t=e.getLineHandle(i.line),p=i.ch-1,l=p>=0&&a[t.text.charAt(p)]||a[t.text.charAt(++p)];if(!l)return null;var E=\">\"==l.charAt(1)?1:-1;if(n&&E>0!=(p==i.ch))return null;var u=e.getTokenTypeAt(s(i.line,p+1)),c=r(e,s(i.line,p+(E>0?1:0)),E,u||null,o);return null==c?null:{from:s(i.line,p),to:c&&c.pos,match:c&&c.ch==l.charAt(0),forward:E>0}}function r(e,i,r,n,o){for(var t=o&&o.maxScanLineLength||1e4,p=o&&o.maxScanLines||1e3,l=[],E=o&&o.bracketRegex?o.bracketRegex:/[(){}[\\]]/,u=r>0?Math.min(i.line+p,e.lastLine()+1):Math.max(e.firstLine()-1,i.line-p),c=i.line;c!=u;c+=r){var d=e.getLine(c);if(d){var N=r>0?0:d.length-1,I=r>0?d.length:-1;if(!(d.length>t)){c==i.line&&(N=i.ch-(0>r?1:0));for(;N!=I;N+=r){var x=d.charAt(N);if(E.test(x)&&(void 0===n||e.getTokenTypeAt(s(c,N+1))==n)){var m=a[x];if(\">\"==m.charAt(1)==r>0)l.push(x);else{if(!l.length)return{pos:s(c,N),ch:x};l.pop()}}}}}}return c-r==(r>0?e.lastLine():e.firstLine())?!1:null}function n(e,r,n){for(var o=e.state.matchBrackets.maxHighlightLineLength||1e3,a=[],p=e.listSelections(),l=0;l<p.length;l++){var E=p[l].empty()&&i(e,p[l].head,!1,n);if(E&&e.getLine(E.from.line).length<=o){var u=E.match?\"CodeMirror-matchingbracket\":\"CodeMirror-nonmatchingbracket\";a.push(e.markText(E.from,s(E.from.line,E.from.ch+1),{className:u}));E.to&&e.getLine(E.to.line).length<=o&&a.push(e.markText(E.to,s(E.to.line,E.to.ch+1),{className:u}))}}if(a.length){t&&e.state.focused&&e.display.input.focus();var c=function(){e.operation(function(){for(var e=0;e<a.length;e++)a[e].clear()})};if(!r)return c;setTimeout(c,800)}}function o(e){e.operation(function(){if(p){p();p=null}p=n(e,!1,e.state.matchBrackets)})}var t=/MSIE \\d/.test(navigator.userAgent)&&(null==document.documentMode||document.documentMode<8),s=e.Pos,a={\"(\":\")>\",\")\":\"(<\",\"[\":\"]>\",\"]\":\"[<\",\"{\":\"}>\",\"}\":\"{<\"},p=null;e.defineOption(\"matchBrackets\",!1,function(i,r,n){n&&n!=e.Init&&i.off(\"cursorActivity\",o);if(r){i.state.matchBrackets=\"object\"==typeof r?r:{};i.on(\"cursorActivity\",o)}});e.defineExtension(\"matchBrackets\",function(){n(this,!0)});e.defineExtension(\"findMatchingBracket\",function(e,r,n){return i(this,e,r,n)});e.defineExtension(\"scanForBracket\",function(e,i,n,o){return r(this,e,i,n,o)})})},{codemirror:void 0}],7:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";e.registerHelper(\"fold\",\"brace\",function(i,r){function n(n){for(var o=r.ch,p=0;;){var l=0>=o?-1:a.lastIndexOf(n,o-1);if(-1!=l){if(1==p&&l<r.ch)break;t=i.getTokenTypeAt(e.Pos(s,l+1));if(!/^(comment|string)/.test(t))return l+1;o=l-1}else{if(1==p)break;p=1;o=a.length}}}var o,t,s=r.line,a=i.getLine(s),p=\"{\",l=\"}\",o=n(\"{\");if(null==o){p=\"[\",l=\"]\";o=n(\"[\")}if(null!=o){var E,u,c=1,d=i.lastLine();e:for(var N=s;d>=N;++N)for(var I=i.getLine(N),x=N==s?o:0;;){var m=I.indexOf(p,x),L=I.indexOf(l,x);0>m&&(m=I.length);0>L&&(L=I.length);x=Math.min(m,L);if(x==I.length)break;if(i.getTokenTypeAt(e.Pos(N,x+1))==t)if(x==m)++c;else if(!--c){E=N;u=x;break e}++x}if(null!=E&&(s!=E||u!=o))return{from:e.Pos(s,o),to:e.Pos(E,u)}}});e.registerHelper(\"fold\",\"import\",function(i,r){function n(r){if(r<i.firstLine()||r>i.lastLine())return null;var n=i.getTokenAt(e.Pos(r,1));/\\S/.test(n.string)||(n=i.getTokenAt(e.Pos(r,n.end+1)));if(\"keyword\"!=n.type||\"import\"!=n.string)return null;for(var o=r,t=Math.min(i.lastLine(),r+10);t>=o;++o){var s=i.getLine(o),a=s.indexOf(\";\");if(-1!=a)return{startCh:n.end,end:e.Pos(o,a)}}}var o,r=r.line,t=n(r);if(!t||n(r-1)||(o=n(r-2))&&o.end.line==r-1)return null;for(var s=t.end;;){var a=n(s.line+1);if(null==a)break;s=a.end}return{from:i.clipPos(e.Pos(r,t.startCh+1)),to:s}});e.registerHelper(\"fold\",\"include\",function(i,r){function n(r){if(r<i.firstLine()||r>i.lastLine())return null;var n=i.getTokenAt(e.Pos(r,1));/\\S/.test(n.string)||(n=i.getTokenAt(e.Pos(r,n.end+1)));return\"meta\"==n.type&&\"#include\"==n.string.slice(0,8)?n.start+8:void 0}var r=r.line,o=n(r);if(null==o||null!=n(r-1))return null;for(var t=r;;){var s=n(t+1);if(null==s)break;++t}return{from:e.Pos(r,o+1),to:i.clipPos(e.Pos(t))}})})},{codemirror:void 0}],8:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";function i(i,o,t,s){function a(e){var r=p(i,o);if(!r||r.to.line-r.from.line<l)return null;for(var n=i.findMarksAt(r.from),t=0;t<n.length;++t)if(n[t].__isFold&&\"fold\"!==s){if(!e)return null;r.cleared=!0;n[t].clear()}return r}if(t&&t.call){var p=t;t=null}else var p=n(i,t,\"rangeFinder\");\"number\"==typeof o&&(o=e.Pos(o,0));var l=n(i,t,\"minFoldSize\"),E=a(!0);if(n(i,t,\"scanUp\"))for(;!E&&o.line>i.firstLine();){o=e.Pos(o.line-1,0);E=a(!1)}if(E&&!E.cleared&&\"unfold\"!==s){var u=r(i,t);e.on(u,\"mousedown\",function(i){c.clear();e.e_preventDefault(i)});var c=i.markText(E.from,E.to,{replacedWith:u,clearOnEnter:!0,__isFold:!0});c.on(\"clear\",function(r,n){e.signal(i,\"unfold\",i,r,n)});e.signal(i,\"fold\",i,E.from,E.to)}}function r(e,i){var r=n(e,i,\"widget\");if(\"string\"==typeof r){var o=document.createTextNode(r);r=document.createElement(\"span\");r.appendChild(o);r.className=\"CodeMirror-foldmarker\"}return r}function n(e,i,r){if(i&&void 0!==i[r])return i[r];var n=e.options.foldOptions;return n&&void 0!==n[r]?n[r]:o[r]}e.newFoldFunction=function(e,r){return function(n,o){i(n,o,{rangeFinder:e,widget:r})}};e.defineExtension(\"foldCode\",function(e,r,n){i(this,e,r,n)});e.defineExtension(\"isFolded\",function(e){for(var i=this.findMarksAt(e),r=0;r<i.length;++r)if(i[r].__isFold)return!0});e.commands.toggleFold=function(e){e.foldCode(e.getCursor())};e.commands.fold=function(e){e.foldCode(e.getCursor(),null,\"fold\")};e.commands.unfold=function(e){e.foldCode(e.getCursor(),null,\"unfold\")};e.commands.foldAll=function(i){i.operation(function(){for(var r=i.firstLine(),n=i.lastLine();n>=r;r++)i.foldCode(e.Pos(r,0),null,\"fold\")})};e.commands.unfoldAll=function(i){i.operation(function(){for(var r=i.firstLine(),n=i.lastLine();n>=r;r++)i.foldCode(e.Pos(r,0),null,\"unfold\")})};e.registerHelper(\"fold\",\"combine\",function(){var e=Array.prototype.slice.call(arguments,0);return function(i,r){for(var n=0;n<e.length;++n){var o=e[n](i,r);if(o)return o}}});e.registerHelper(\"fold\",\"auto\",function(e,i){for(var r=e.getHelpers(i,\"fold\"),n=0;n<r.length;n++){var o=r[n](e,i);if(o)return o}});var o={rangeFinder:e.fold.auto,widget:\"↔\",minFoldSize:0,scanUp:!1};e.defineOption(\"foldOptions\",null);e.defineExtension(\"foldOption\",function(e,i){return n(this,e,i)})})},{codemirror:void 0}],9:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}(),i(\"./foldcode\")):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\",\"./foldcode\"],o):o(CodeMirror)})(function(e){\"use strict\";function i(e){this.options=e;this.from=this.to=0}function r(e){e===!0&&(e={});null==e.gutter&&(e.gutter=\"CodeMirror-foldgutter\");null==e.indicatorOpen&&(e.indicatorOpen=\"CodeMirror-foldgutter-open\");null==e.indicatorFolded&&(e.indicatorFolded=\"CodeMirror-foldgutter-folded\");return e}function n(e,i){for(var r=e.findMarksAt(u(i)),n=0;n<r.length;++n)if(r[n].__isFold&&r[n].find().from.line==i)return!0}function o(e){if(\"string\"==typeof e){var i=document.createElement(\"div\");i.className=e+\" CodeMirror-guttermarker-subtle\";return i}return e.cloneNode(!0)}function t(e,i,r){var t=e.state.foldGutter.options,s=i,a=e.foldOption(t,\"minFoldSize\"),p=e.foldOption(t,\"rangeFinder\");e.eachLine(i,r,function(i){var r=null;if(n(e,s))r=o(t.indicatorFolded);else{var l=u(s,0),E=p&&p(e,l);E&&E.to.line-E.from.line>=a&&(r=o(t.indicatorOpen))}e.setGutterMarker(i,t.gutter,r);++s})}function s(e){var i=e.getViewport(),r=e.state.foldGutter;if(r){e.operation(function(){t(e,i.from,i.to)});r.from=i.from;r.to=i.to}}function a(e,i,r){var n=e.state.foldGutter.options;r==n.gutter&&e.foldCode(u(i,0),n.rangeFinder)}function p(e){var i=e.state.foldGutter,r=e.state.foldGutter.options;i.from=i.to=0;clearTimeout(i.changeUpdate);i.changeUpdate=setTimeout(function(){s(e)},r.foldOnChangeTimeSpan||600)}function l(e){var i=e.state.foldGutter,r=e.state.foldGutter.options;clearTimeout(i.changeUpdate);i.changeUpdate=setTimeout(function(){var r=e.getViewport();i.from==i.to||r.from-i.to>20||i.from-r.to>20?s(e):e.operation(function(){if(r.from<i.from){t(e,r.from,i.from);i.from=r.from}if(r.to>i.to){t(e,i.to,r.to);i.to=r.to}})},r.updateViewportTimeSpan||400)}function E(e,i){var r=e.state.foldGutter,n=i.line;n>=r.from&&n<r.to&&t(e,n,n+1)}e.defineOption(\"foldGutter\",!1,function(n,o,t){if(t&&t!=e.Init){n.clearGutter(n.state.foldGutter.options.gutter);n.state.foldGutter=null;n.off(\"gutterClick\",a);n.off(\"change\",p);n.off(\"viewportChange\",l);n.off(\"fold\",E);n.off(\"unfold\",E);n.off(\"swapDoc\",s)}if(o){n.state.foldGutter=new i(r(o));s(n);n.on(\"gutterClick\",a);n.on(\"change\",p);n.on(\"viewportChange\",l);n.on(\"fold\",E);n.on(\"unfold\",E);n.on(\"swapDoc\",s)}});var u=e.Pos})},{\"./foldcode\":8,codemirror:void 0}],10:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";function i(e,i){return e.line-i.line||e.ch-i.ch}function r(e,i,r,n){this.line=i;this.ch=r;this.cm=e;this.text=e.getLine(i);this.min=n?n.from:e.firstLine();this.max=n?n.to-1:e.lastLine()}function n(e,i){var r=e.cm.getTokenTypeAt(c(e.line,i));return r&&/\\btag\\b/.test(r)}function o(e){if(!(e.line>=e.max)){e.ch=0;e.text=e.cm.getLine(++e.line);return!0}}function t(e){if(!(e.line<=e.min)){e.text=e.cm.getLine(--e.line);e.ch=e.text.length;return!0}}function s(e){for(;;){var i=e.text.indexOf(\">\",e.ch);if(-1==i){if(o(e))continue;return}if(n(e,i+1)){var r=e.text.lastIndexOf(\"/\",i),t=r>-1&&!/\\S/.test(e.text.slice(r+1,i));e.ch=i+1;return t?\"selfClose\":\"regular\"}e.ch=i+1}}function a(e){for(;;){var i=e.ch?e.text.lastIndexOf(\"<\",e.ch-1):-1;if(-1==i){if(t(e))continue;return}if(n(e,i+1)){I.lastIndex=i;e.ch=i;var r=I.exec(e.text);if(r&&r.index==i)return r}else e.ch=i}}function p(e){for(;;){I.lastIndex=e.ch;var i=I.exec(e.text);if(!i){if(o(e))continue;return}if(n(e,i.index+1)){e.ch=i.index+i[0].length;return i}e.ch=i.index+1}}function l(e){for(;;){var i=e.ch?e.text.lastIndexOf(\">\",e.ch-1):-1;if(-1==i){if(t(e))continue;return}if(n(e,i+1)){var r=e.text.lastIndexOf(\"/\",i),o=r>-1&&!/\\S/.test(e.text.slice(r+1,i));e.ch=i+1;return o?\"selfClose\":\"regular\"}e.ch=i}}function E(e,i){for(var r=[];;){var n,o=p(e),t=e.line,a=e.ch-(o?o[0].length:0);if(!o||!(n=s(e)))return;if(\"selfClose\"!=n)if(o[1]){for(var l=r.length-1;l>=0;--l)if(r[l]==o[2]){r.length=l;break}if(0>l&&(!i||i==o[2]))return{tag:o[2],from:c(t,a),to:c(e.line,e.ch)}}else r.push(o[2])}}function u(e,i){for(var r=[];;){var n=l(e);if(!n)return;if(\"selfClose\"!=n){var o=e.line,t=e.ch,s=a(e);if(!s)return;if(s[1])r.push(s[2]);else{for(var p=r.length-1;p>=0;--p)if(r[p]==s[2]){r.length=p;break}if(0>p&&(!i||i==s[2]))return{tag:s[2],from:c(e.line,e.ch),to:c(o,t)}}}else a(e)}}var c=e.Pos,d=\"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\",N=d+\"-:.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\",I=new RegExp(\"<(/?)([\"+d+\"][\"+N+\"]*)\",\"g\");e.registerHelper(\"fold\",\"xml\",function(e,i){for(var n=new r(e,i.line,0);;){var o,t=p(n);if(!t||n.line!=i.line||!(o=s(n)))return;if(!t[1]&&\"selfClose\"!=o){var i=c(n.line,n.ch),a=E(n,t[2]);return a&&{from:i,to:a.from}}}});e.findMatchingTag=function(e,n,o){var t=new r(e,n.line,n.ch,o);if(-1!=t.text.indexOf(\">\")||-1!=t.text.indexOf(\"<\")){var p=s(t),l=p&&c(t.line,t.ch),d=p&&a(t);if(p&&d&&!(i(t,n)>0)){var N={from:c(t.line,t.ch),to:l,tag:d[2]};if(\"selfClose\"==p)return{open:N,close:null,at:\"open\"};if(d[1])return{open:u(t,d[2]),close:N,at:\"close\"};t=new r(e,l.line,l.ch,o);return{open:N,close:E(t,d[2]),at:\"open\"}}}};e.findEnclosingTag=function(e,i,n){for(var o=new r(e,i.line,i.ch,n);;){var t=u(o);if(!t)break;var s=new r(e,i.line,i.ch,n),a=E(s,t.tag);if(a)return{open:t,close:a}}};e.scanForClosingTag=function(e,i,n,o){var t=new r(e,i.line,i.ch,o?{from:0,to:o}:null);return E(t,n)}})},{codemirror:void 0}],11:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";function i(e,i){this.cm=e;this.options=this.buildOptions(i);this.widget=this.onClose=null}function r(e){return\"string\"==typeof e?e:e.text}function n(e,i){function r(e,r){var o;o=\"string\"!=typeof r?function(e){return r(e,i)}:n.hasOwnProperty(r)?n[r]:r;t[e]=o}var n={Up:function(){i.moveFocus(-1)},Down:function(){i.moveFocus(1)},PageUp:function(){i.moveFocus(-i.menuSize()+1,!0)},PageDown:function(){i.moveFocus(i.menuSize()-1,!0)},Home:function(){i.setFocus(0)},End:function(){i.setFocus(i.length-1)},Enter:i.pick,Tab:i.pick,Esc:i.close},o=e.options.customKeys,t=o?{}:n;if(o)for(var s in o)o.hasOwnProperty(s)&&r(s,o[s]);var a=e.options.extraKeys;if(a)for(var s in a)a.hasOwnProperty(s)&&r(s,a[s]);return t}function o(e,i){for(;i&&i!=e;){if(\"LI\"===i.nodeName.toUpperCase()&&i.parentNode==e)return i;i=i.parentNode}}function t(i,t){this.completion=i;this.data=t;var p=this,l=i.cm,E=this.hints=document.createElement(\"ul\");E.className=\"CodeMirror-hints\";this.selectedHint=t.selectedHint||0;for(var u=t.list,c=0;c<u.length;++c){var d=E.appendChild(document.createElement(\"li\")),N=u[c],I=s+(c!=this.selectedHint?\"\":\" \"+a);null!=N.className&&(I=N.className+\" \"+I);d.className=I;N.render?N.render(d,t,N):d.appendChild(document.createTextNode(N.displayText||r(N)));d.hintId=c}var x=l.cursorCoords(i.options.alignWithWord?t.from:null),m=x.left,L=x.bottom,T=!0;E.style.left=m+\"px\";E.style.top=L+\"px\";var A=window.innerWidth||Math.max(document.body.offsetWidth,document.documentElement.offsetWidth),g=window.innerHeight||Math.max(document.body.offsetHeight,document.documentElement.offsetHeight);(i.options.container||document.body).appendChild(E);var S=E.getBoundingClientRect(),R=S.bottom-g;if(R>0){var v=S.bottom-S.top,h=x.top-(x.bottom-S.top);if(h-v>0){E.style.top=(L=x.top-v)+\"px\";T=!1}else if(v>g){E.style.height=g-5+\"px\";E.style.top=(L=x.bottom-S.top)+\"px\";var C=l.getCursor();if(t.from.ch!=C.ch){x=l.cursorCoords(C);E.style.left=(m=x.left)+\"px\";S=E.getBoundingClientRect()}}}var f=S.right-A;if(f>0){if(S.right-S.left>A){E.style.width=A-5+\"px\";f-=S.right-S.left-A}E.style.left=(m=x.left-f)+\"px\"}l.addKeyMap(this.keyMap=n(i,{moveFocus:function(e,i){p.changeActive(p.selectedHint+e,i)},setFocus:function(e){p.changeActive(e)},menuSize:function(){return p.screenAmount()},length:u.length,close:function(){i.close()},pick:function(){p.pick()},data:t}));if(i.options.closeOnUnfocus){var O;l.on(\"blur\",this.onBlur=function(){O=setTimeout(function(){i.close()},100)});l.on(\"focus\",this.onFocus=function(){clearTimeout(O)})}var y=l.getScrollInfo();l.on(\"scroll\",this.onScroll=function(){var e=l.getScrollInfo(),r=l.getWrapperElement().getBoundingClientRect(),n=L+y.top-e.top,o=n-(window.pageYOffset||(document.documentElement||document.body).scrollTop);T||(o+=E.offsetHeight);if(o<=r.top||o>=r.bottom)return i.close();E.style.top=n+\"px\";E.style.left=m+y.left-e.left+\"px\"});e.on(E,\"dblclick\",function(e){var i=o(E,e.target||e.srcElement);if(i&&null!=i.hintId){p.changeActive(i.hintId);p.pick()}});e.on(E,\"click\",function(e){var r=o(E,e.target||e.srcElement);if(r&&null!=r.hintId){p.changeActive(r.hintId);i.options.completeOnSingleClick&&p.pick()}});e.on(E,\"mousedown\",function(){setTimeout(function(){l.focus()},20)});e.signal(t,\"select\",u[0],E.firstChild);return!0}var s=\"CodeMirror-hint\",a=\"CodeMirror-hint-active\";e.showHint=function(e,i,r){if(!i)return e.showHint(r);r&&r.async&&(i.async=!0);var n={hint:i};if(r)for(var o in r)n[o]=r[o];return e.showHint(n)};e.defineExtension(\"showHint\",function(r){if(!(this.listSelections().length>1||this.somethingSelected())){this.state.completionActive&&this.state.completionActive.close();var n=this.state.completionActive=new i(this,r),o=n.options.hint;if(o){e.signal(this,\"startCompletion\",this);if(!o.async)return n.showHints(o(this,n.options));o(this,function(e){n.showHints(e)},n.options);return void 0}}});i.prototype={close:function(){if(this.active()){this.cm.state.completionActive=null;this.widget&&this.widget.close();this.onClose&&this.onClose();e.signal(this.cm,\"endCompletion\",this.cm)}},active:function(){return this.cm.state.completionActive==this},pick:function(i,n){var o=i.list[n];o.hint?o.hint(this.cm,i,o):this.cm.replaceRange(r(o),o.from||i.from,o.to||i.to,\"complete\");e.signal(i,\"pick\",o);this.close()},showHints:function(e){if(!e||!e.list.length||!this.active())return this.close();this.options.completeSingle&&1==e.list.length?this.pick(e,0):this.showWidget(e);return void 0},showWidget:function(i){function r(){if(!p){p=!0;E.close();E.cm.off(\"cursorActivity\",a);i&&e.signal(i,\"close\")}}function n(){if(!p){e.signal(i,\"update\");var r=E.options.hint;r.async?r(E.cm,o,E.options):o(r(E.cm,E.options))}}function o(e){i=e;if(!p){if(!i||!i.list.length)return r();E.widget&&E.widget.close();E.widget=new t(E,i)}}function s(){if(l){I(l);l=0}}function a(){s();var e=E.cm.getCursor(),i=E.cm.getLine(e.line);if(e.line!=c.line||i.length-e.ch!=d-c.ch||e.ch<c.ch||E.cm.somethingSelected()||e.ch&&u.test(i.charAt(e.ch-1)))E.close();else{l=N(n);E.widget&&E.widget.close()}}this.widget=new t(this,i);e.signal(i,\"shown\");var p,l=0,E=this,u=this.options.closeCharacters,c=this.cm.getCursor(),d=this.cm.getLine(c.line).length,N=window.requestAnimationFrame||function(e){return setTimeout(e,1e3/60)},I=window.cancelAnimationFrame||clearTimeout;this.cm.on(\"cursorActivity\",a);this.onClose=r},buildOptions:function(e){var i=this.cm.options.hintOptions,r={};for(var n in p)r[n]=p[n];if(i)for(var n in i)void 0!==i[n]&&(r[n]=i[n]);if(e)for(var n in e)void 0!==e[n]&&(r[n]=e[n]);return r}};t.prototype={close:function(){if(this.completion.widget==this){this.completion.widget=null;this.hints.parentNode.removeChild(this.hints);this.completion.cm.removeKeyMap(this.keyMap);var e=this.completion.cm;if(this.completion.options.closeOnUnfocus){e.off(\"blur\",this.onBlur);e.off(\"focus\",this.onFocus)}e.off(\"scroll\",this.onScroll)}},pick:function(){this.completion.pick(this.data,this.selectedHint)},changeActive:function(i,r){i>=this.data.list.length?i=r?this.data.list.length-1:0:0>i&&(i=r?0:this.data.list.length-1);if(this.selectedHint!=i){var n=this.hints.childNodes[this.selectedHint];n.className=n.className.replace(\" \"+a,\"\");n=this.hints.childNodes[this.selectedHint=i];n.className+=\" \"+a;n.offsetTop<this.hints.scrollTop?this.hints.scrollTop=n.offsetTop-3:n.offsetTop+n.offsetHeight>this.hints.scrollTop+this.hints.clientHeight&&(this.hints.scrollTop=n.offsetTop+n.offsetHeight-this.hints.clientHeight+3);e.signal(this.data,\"select\",this.data.list[this.selectedHint],n)}},screenAmount:function(){return Math.floor(this.hints.clientHeight/this.hints.firstChild.offsetHeight)||1}};e.registerHelper(\"hint\",\"auto\",function(i,r){var n,o=i.getHelpers(i.getCursor(),\"hint\");if(o.length)for(var t=0;t<o.length;t++){var s=o[t](i,r);if(s&&s.list.length)return s}else if(n=i.getHelper(i.getCursor(),\"hintWords\")){if(n)return e.hint.fromList(i,{words:n})}else if(e.hint.anyword)return e.hint.anyword(i,r)});e.registerHelper(\"hint\",\"fromList\",function(i,r){for(var n=i.getCursor(),o=i.getTokenAt(n),t=[],s=0;s<r.words.length;s++){var a=r.words[s];a.slice(0,o.string.length)==o.string&&t.push(a)}return t.length?{list:t,from:e.Pos(n.line,o.start),to:e.Pos(n.line,o.end)}:void 0});e.commands.autocomplete=e.showHint;var p={hint:e.hint.auto,completeSingle:!0,alignWithWord:!0,closeCharacters:/[\\s()\\[\\]{};:>,]/,closeOnUnfocus:!0,completeOnSingleClick:!1,container:null,customKeys:null,extraKeys:null};e.defineOption(\"hintOptions\",null)})},{codemirror:void 0}],12:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";e.runMode=function(i,r,n,o){var t=e.getMode(e.defaults,r),s=/MSIE \\d/.test(navigator.userAgent),a=s&&(null==document.documentMode||document.documentMode<9);if(1==n.nodeType){var p=o&&o.tabSize||e.defaults.tabSize,l=n,E=0;l.innerHTML=\"\";n=function(e,i){if(\"\\n\"!=e){for(var r=\"\",n=0;;){var o=e.indexOf(\"\t\",n);if(-1==o){r+=e.slice(n);E+=e.length-n;break}E+=o-n;r+=e.slice(n,o);var t=p-E%p;E+=t;for(var s=0;t>s;++s)r+=\" \";n=o+1}if(i){var u=l.appendChild(document.createElement(\"span\"));u.className=\"cm-\"+i.replace(/ +/g,\" cm-\");u.appendChild(document.createTextNode(r))}else l.appendChild(document.createTextNode(r))}else{l.appendChild(document.createTextNode(a?\"\\r\":e));E=0}}}for(var u=e.splitLines(i),c=o&&o.state||e.startState(t),d=0,N=u.length;N>d;++d){d&&n(\"\\n\");var I=new e.StringStream(u[d]);!I.string&&t.blankLine&&t.blankLine(c);for(;!I.eol();){var x=t.token(I,c);n(I.current(),x,d,I.start,c);I.start=I.pos}}}})},{codemirror:void 0}],13:[function(i,r,n){(function(o){\"object\"==typeof n&&\"object\"==typeof r?o(function(){try{return i(\"codemirror\")}catch(e){return window.CodeMirror}}()):\"function\"==typeof e&&e.amd?e([\"../../lib/codemirror\"],o):o(CodeMirror)})(function(e){\"use strict\";function i(e,i,o,t){this.atOccurrence=!1;this.doc=e;null==t&&\"string\"==typeof i&&(t=!1);o=o?e.clipPos(o):n(0,0);this.pos={from:o,to:o};if(\"string\"!=typeof i){i.global||(i=new RegExp(i.source,i.ignoreCase?\"ig\":\"g\"));this.matches=function(r,o){if(r){i.lastIndex=0;for(var t,s,a=e.getLine(o.line).slice(0,o.ch),p=0;;){i.lastIndex=p;var l=i.exec(a);if(!l)break;t=l;s=t.index;p=t.index+(t[0].length||1);if(p==a.length)break}var E=t&&t[0].length||0;E||(0==s&&0==a.length?t=void 0:s!=e.getLine(o.line).length&&E++)}else{i.lastIndex=o.ch;var a=e.getLine(o.line),t=i.exec(a),E=t&&t[0].length||0,s=t&&t.index;s+E==a.length||E||(E=1)}return t&&E?{from:n(o.line,s),to:n(o.line,s+E),match:t}:void 0}}else{var s=i;t&&(i=i.toLowerCase());var a=t?function(e){return e.toLowerCase()}:function(e){return e},p=i.split(\"\\n\");if(1==p.length)this.matches=i.length?function(o,t){if(o){var p=e.getLine(t.line).slice(0,t.ch),l=a(p),E=l.lastIndexOf(i);if(E>-1){E=r(p,l,E);return{from:n(t.line,E),to:n(t.line,E+s.length)}}}else{var p=e.getLine(t.line).slice(t.ch),l=a(p),E=l.indexOf(i);if(E>-1){E=r(p,l,E)+t.ch;return{from:n(t.line,E),to:n(t.line,E+s.length)}}}}:function(){};else{var l=s.split(\"\\n\");this.matches=function(i,r){var o=p.length-1;if(i){if(r.line-(p.length-1)<e.firstLine())return;if(a(e.getLine(r.line).slice(0,l[o].length))!=p[p.length-1])return;for(var t=n(r.line,l[o].length),s=r.line-1,E=o-1;E>=1;--E,--s)if(p[E]!=a(e.getLine(s)))return;var u=e.getLine(s),c=u.length-l[0].length;if(a(u.slice(c))!=p[0])return;return{from:n(s,c),to:t}}if(!(r.line+(p.length-1)>e.lastLine())){var u=e.getLine(r.line),c=u.length-l[0].length;if(a(u.slice(c))==p[0]){for(var d=n(r.line,c),s=r.line+1,E=1;o>E;++E,++s)if(p[E]!=a(e.getLine(s)))return;if(a(e.getLine(s).slice(0,l[o].length))==p[o])return{from:d,to:n(s,l[o].length)}}}}}}}function r(e,i,r){if(e.length==i.length)return r;for(var n=Math.min(r,e.length);;){var o=e.slice(0,n).toLowerCase().length;if(r>o)++n;else{if(!(o>r))return n;--n}}}var n=e.Pos;i.prototype={findNext:function(){return this.find(!1)},findPrevious:function(){return this.find(!0)},find:function(e){function i(e){var i=n(e,0);r.pos={from:i,to:i};r.atOccurrence=!1;return!1}for(var r=this,o=this.doc.clipPos(e?this.pos.from:this.pos.to);;){if(this.pos=this.matches(e,o)){this.atOccurrence=!0;return this.pos.match||!0}if(e){if(!o.line)return i(0);o=n(o.line-1,this.doc.getLine(o.line-1).length)}else{var t=this.doc.lineCount();if(o.line==t-1)return i(t);o=n(o.line+1,0)}}},from:function(){return this.atOccurrence?this.pos.from:void 0},to:function(){return this.atOccurrence?this.pos.to:void 0},replace:function(i){if(this.atOccurrence){var r=e.splitLines(i);this.doc.replaceRange(r,this.pos.from,this.pos.to);this.pos.to=n(this.pos.from.line+r.length-1,r[r.length-1].length+(1==r.length?this.pos.from.ch:0))}}};e.defineExtension(\"getSearchCursor\",function(e,r,n){return new i(this.doc,e,r,n)});e.defineDocExtension(\"getSearchCursor\",function(e,r,n){return new i(this,e,r,n)});e.defineExtension(\"selectMatches\",function(i,r){for(var n,o=[],t=this.getSearchCursor(i,this.getCursor(\"from\"),r);(n=t.findNext())&&!(e.cmpPos(t.to(),this.getCursor(\"to\"))>0);)o.push({anchor:t.from(),head:t.to()});o.length&&this.setSelections(o,0)})})},{codemirror:void 0}],14:[function(i,r){(function(i){function n(){try{return p in i&&i[p]}catch(e){return!1}}function o(e){return e.replace(/^d/,\"___$&\").replace(N,\"___\")}var t,s={},a=i.document,p=\"localStorage\",l=\"script\";s.disabled=!1;s.version=\"1.3.17\";s.set=function(){};s.get=function(){};s.has=function(e){return void 0!==s.get(e)};s.remove=function(){};s.clear=function(){};s.transact=function(e,i,r){if(null==r){r=i;i=null}null==i&&(i={});var n=s.get(e,i);r(n);s.set(e,n)};s.getAll=function(){};s.forEach=function(){};s.serialize=function(e){return JSON.stringify(e)};s.deserialize=function(e){if(\"string\"!=typeof e)return void 0;try{return JSON.parse(e)}catch(i){return e||void 0}};if(n()){t=i[p];s.set=function(e,i){if(void 0===i)return s.remove(e);t.setItem(e,s.serialize(i));return i};s.get=function(e,i){var r=s.deserialize(t.getItem(e));return void 0===r?i:r};s.remove=function(e){t.removeItem(e)};s.clear=function(){t.clear()};s.getAll=function(){var e={};s.forEach(function(i,r){e[i]=r});return e};s.forEach=function(e){for(var i=0;i<t.length;i++){var r=t.key(i);e(r,s.get(r))}}}else if(a.documentElement.addBehavior){var E,u;try{u=new ActiveXObject(\"htmlfile\");u.open();u.write(\"<\"+l+\">document.w=window</\"+l+'><iframe src=\"/favicon.ico\"></iframe>');u.close();E=u.w.frames[0].document;t=E.createElement(\"div\")}catch(c){t=a.createElement(\"div\");E=a.body}var d=function(e){return function(){var i=Array.prototype.slice.call(arguments,0);i.unshift(t);E.appendChild(t);t.addBehavior(\"#default#userData\");t.load(p);var r=e.apply(s,i);E.removeChild(t);return r}},N=new RegExp(\"[!\\\"#$%&'()*+,/\\\\\\\\:;<=>?@[\\\\]^`{|}~]\",\"g\");s.set=d(function(e,i,r){i=o(i);if(void 0===r)return s.remove(i);e.setAttribute(i,s.serialize(r));e.save(p);return r});s.get=d(function(e,i,r){i=o(i);var n=s.deserialize(e.getAttribute(i));return void 0===n?r:n});s.remove=d(function(e,i){i=o(i);e.removeAttribute(i);e.save(p)});s.clear=d(function(e){var i=e.XMLDocument.documentElement.attributes;e.load(p);for(var r,n=0;r=i[n];n++)e.removeAttribute(r.name);e.save(p)});s.getAll=function(){var e={};s.forEach(function(i,r){e[i]=r});return e};s.forEach=d(function(e,i){for(var r,n=e.XMLDocument.documentElement.attributes,o=0;r=n[o];++o)i(r.name,s.deserialize(e.getAttribute(r.name)))})}try{var I=\"__storejs__\";s.set(I,I);s.get(I)!=I&&(s.disabled=!0);s.remove(I)}catch(c){s.disabled=!0}s.enabled=!s.disabled;\"undefined\"!=typeof r&&r.exports&&this.module!==r?r.exports=s:\"function\"==typeof e&&e.amd?e(s):i.store=s})(Function(\"return this\")())},{}],15:[function(e,i){i.exports={name:\"yasgui-utils\",version:\"1.5.0\",description:\"Utils for YASGUI libs\",main:\"src/main.js\",repository:{type:\"git\",url:\"git://github.com/YASGUI/Utils.git\"},licenses:[{type:\"MIT\",url:\"http://yasgui.github.io/license.txt\"}],author:\"Laurens Rietveld\",maintainers:[{name:\"Laurens Rietveld\",email:\"laurens.rietveld@gmail.com\",web:\"http://laurensrietveld.nl\"}],bugs:{url:\"https://github.com/YASGUI/Utils/issues\"},homepage:\"https://github.com/YASGUI/Utils\",dependencies:{store:\"^1.3.14\"}}},{}],16:[function(e,i){window.console=window.console||{log:function(){}};i.exports={storage:e(\"./storage.js\"),svg:e(\"./svg.js\"),version:{\"yasgui-utils\":e(\"../package.json\").version}}},{\"../package.json\":15,\"./storage.js\":17,\"./svg.js\":18}],17:[function(e,i){{var r=e(\"store\"),n={day:function(){return 864e5},month:function(){30*n.day()},year:function(){12*n.month()}};i.exports={set:function(e,i,o){if(r.enabled&&e&&i){\"string\"==typeof o&&(o=n[o]());i.documentElement&&(i=(new XMLSerializer).serializeToString(i.documentElement));r.set(e,{val:i,exp:o,time:(new Date).getTime()})}},remove:function(e){r.enabled&&e&&r.remove(e)},get:function(e){if(!r.enabled)return null;if(e){var i=r.get(e);return i?i.exp&&(new Date).getTime()-i.time>i.exp?null:i.val:null}return null}}}},{store:14}],18:[function(e,i){i.exports={draw:function(e,r){if(e){var n=i.exports.getElement(r);n&&(e.append?e.append(n):e.appendChild(n))}},getElement:function(e){if(e&&0==e.indexOf(\"<svg\")){var i=new DOMParser,r=i.parseFromString(e,\"text/xml\"),n=r.documentElement,o=document.createElement(\"div\");o.className=\"svgImg\";o.appendChild(n);return o}return!1}}},{}],19:[function(e,i){i.exports={name:\"yasgui-yasqe\",description:\"Yet Another SPARQL Query Editor\",version:\"2.3.3\",main:\"src/main.js\",licenses:[{type:\"MIT\",url:\"http://yasqe.yasgui.org/license.txt\"}],author:\"Laurens Rietveld\",homepage:\"http://yasqe.yasgui.org\",devDependencies:{browserify:\"^6.1.0\",gulp:\"~3.6.0\",\"gulp-bump\":\"^0.1.11\",\"gulp-concat\":\"^2.4.1\",\"gulp-connect\":\"^2.0.5\",\"gulp-embedlr\":\"^0.5.2\",\"gulp-filter\":\"^1.0.2\",\"gulp-git\":\"^0.5.2\",\"gulp-jsvalidate\":\"^0.2.0\",\"gulp-livereload\":\"^1.3.1\",\"gulp-minify-css\":\"^0.3.11\",\"gulp-notify\":\"^2.0.1\",\"gulp-rename\":\"^1.2.0\",\"gulp-streamify\":\"0.0.5\",\"gulp-tag-version\":\"^1.1.0\",\"gulp-uglify\":\"^1.0.1\",\"require-dir\":\"^0.1.0\",\"run-sequence\":\"^1.0.1\",\"vinyl-buffer\":\"^1.0.0\",\"vinyl-source-stream\":\"~0.1.1\",watchify:\"^0.6.4\",\"gulp-sourcemaps\":\"^1.2.8\",exorcist:\"^0.1.6\",\"vinyl-transform\":\"0.0.1\",\"gulp-sass\":\"^1.2.2\",\"bootstrap-sass\":\"^3.3.1\",\"browserify-transform-tools\":\"^1.2.1\",\"gulp-cssimport\":\"^1.3.1\"},bugs:\"https://github.com/YASGUI/YASQE/issues/\",keywords:[\"JavaScript\",\"SPARQL\",\"Editor\",\"Semantic Web\",\"Linked Data\"],maintainers:[{name:\"Laurens Rietveld\",email:\"laurens.rietveld@gmail.com\",web:\"http://laurensrietveld.nl\"}],repository:{type:\"git\",url:\"https://github.com/YASGUI/YASQE.git\"},dependencies:{jquery:\"~ 1.11.0\",codemirror:\"^4.7.0\",\"yasgui-utils\":\"^1.4.1\"},optionalShim:{codemirror:{require:\"codemirror\",global:\"CodeMirror\"},jquery:{require:\"jquery\",global:\"jQuery\"},\"../../lib/codemirror\":{require:\"codemirror\",global:\"CodeMirror\"}}}\n},{}],20:[function(e,i){\"use strict\";var r=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),n=e(\"../utils.js\"),o=e(\"yasgui-utils\"),t=e(\"../../lib/trie.js\");i.exports=function(e,i){var a={},p={},l={};i.on(\"cursorActivity\",function(){c(!0)});i.on(\"change\",function(){var e=[];for(var n in a)a[n].is(\":visible\")&&e.push(a[n]);if(e.length>0){var o=r(i.getWrapperElement()).find(\".CodeMirror-vscrollbar\"),t=0;o.is(\":visible\")&&(t=o.outerWidth());e.forEach(function(e){e.css(\"right\",t)})}});var E=function(e,r){l[e.name]=new t;for(var s=0;s<r.length;s++)l[e.name].insert(r[s]);var a=n.getPersistencyId(i,e.persistent);a&&o.storage.set(a,r,\"month\")},u=function(e,r){var t=p[e]=new r(i,e);t.name=e;if(t.bulk){var s=function(e){e&&e instanceof Array&&e.length>0&&E(t,e)};if(t.get instanceof Array)s(t.get);else{var a=null,l=n.getPersistencyId(i,t.persistent);l&&(a=o.storage.get(l));a&&a.length>0?s(a):t.get instanceof Function&&(t.async?t.get(null,s):s(t.get()))}}},c=function(n){if(!i.somethingSelected()){var o=function(r){if(n&&(!r.autoShow||!r.bulk&&r.async))return!1;var o={closeCharacters:/(?=a)b/,completeSingle:!1};!r.bulk&&r.async&&(o.async=!0);{var t=function(e,i){return d(r,i)};e.showHint(i,t,o)}return!0};for(var t in p)if(-1!=r.inArray(t,i.options.autocompleters)){var s=p[t];if(s.isValidCompletionPosition)if(s.isValidCompletionPosition()){if(!s.callbacks||!s.callbacks.validPosition||s.callbacks.validPosition(i,s)!==!1){var a=o(s);if(a)break}}else s.callbacks&&s.callbacks.invalidPosition&&s.callbacks.invalidPosition(i,s)}}},d=function(e,r){var n=function(i){var r=i.autocompletionString||i.string,n=[];if(l[e.name])n=l[e.name].autoComplete(r);else if(\"function\"==typeof e.get&&0==e.async)n=e.get(r);else if(\"object\"==typeof e.get)for(var o=r.length,t=0;t<e.get.length;t++){var s=e.get[t];s.slice(0,o)==r&&n.push(s)}return N(n,e,i)},o=i.getCompleteToken();e.preProcessToken&&(o=e.preProcessToken(o));if(o){if(e.bulk||!e.async)return n(o);var t=function(i){r(N(i,e,o))};e.get(o,t)}},N=function(e,r,n){for(var o=[],t=0;t<e.length;t++){var a=e[t];r.postProcessToken&&(a=r.postProcessToken(n,a));o.push({text:a,displayText:a,hint:s})}var p=i.getCursor(),l={completionToken:n.string,list:o,from:{line:p.line,ch:n.start},to:{line:p.line,ch:n.end}};if(r.callbacks)for(var E in r.callbacks)r.callbacks[E]&&i.on(l,E,r.callbacks[E]);return l};return{init:u,completers:p,notifications:{getEl:function(e){return r(a[e.name])},show:function(e,i){if(!i.autoshow){a[i.name]||(a[i.name]=r(\"<div class='completionNotification'></div>\"));a[i.name].show().text(\"Press \"+(-1!=navigator.userAgent.indexOf(\"Mac OS X\")?\"CMD\":\"CTRL\")+\" - <spacebar> to autocomplete\").appendTo(r(e.getWrapperElement()))}},hide:function(e,i){a[i.name]&&a[i.name].hide()}},autoComplete:c,getTrie:function(e){return\"string\"==typeof e?l[e]:l[e.name]}}};var s=function(e,i,r){r.text!=e.getTokenAt(e.getCursor()).string&&e.replaceRange(r.text,i.from,i.to)}},{\"../../lib/trie.js\":4,\"../utils.js\":33,jquery:void 0,\"yasgui-utils\":16}],21:[function(e,i){\"use strict\";(function(){try{return e(\"jquery\")}catch(i){return window.jQuery}})();i.exports=function(r,n){return{isValidCompletionPosition:function(){return i.exports.isValidCompletionPosition(r)},get:function(i,n){return e(\"./utils\").fetchFromLov(r,this,i,n)},preProcessToken:function(e){return i.exports.preProcessToken(r,e)},postProcessToken:function(e,n){return i.exports.postProcessToken(r,e,n)},async:!0,bulk:!1,autoShow:!1,persistent:n,callbacks:{validPosition:r.autocompleters.notifications.show,invalidPosition:r.autocompleters.notifications.hide}}};i.exports.isValidCompletionPosition=function(e){var i=e.getCompleteToken();if(0==i.string.indexOf(\"?\"))return!1;var r=e.getCursor(),n=e.getPreviousNonWsToken(r.line,i);return\"a\"==n.string?!0:\"rdf:type\"==n.string?!0:\"rdfs:domain\"==n.string?!0:\"rdfs:range\"==n.string?!0:!1};i.exports.preProcessToken=function(i,r){return e(\"./utils.js\").preprocessResourceTokenForCompletion(i,r)};i.exports.postProcessToken=function(i,r,n){return e(\"./utils.js\").postprocessResourceTokenForCompletion(i,r,n)}},{\"./utils\":24,\"./utils.js\":24,jquery:void 0}],22:[function(e,i){\"use strict\";var r=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),n={\"string-2\":\"prefixed\",atom:\"var\"};i.exports=function(e,n){e.on(\"change\",function(){i.exports.appendPrefixIfNeeded(e,n)});return{isValidCompletionPosition:function(){return i.exports.isValidCompletionPosition(e)},get:function(e,i){r.get(\"http://prefix.cc/popular/all.file.json\",function(e){var r=[];for(var n in e)if(\"bif\"!=n){var o=n+\": <\"+e[n]+\">\";r.push(o)}r.sort();i(r)})},preProcessToken:function(r){return i.exports.preprocessPrefixTokenForCompletion(e,r)},async:!0,bulk:!0,autoShow:!0,persistent:n}};i.exports.isValidCompletionPosition=function(e){var i=e.getCursor(),n=e.getTokenAt(i);if(e.getLine(i.line).length>i.ch)return!1;\"ws\"!=n.type&&(n=e.getCompleteToken());if(0==!n.string.indexOf(\"a\")&&-1==r.inArray(\"PNAME_NS\",n.state.possibleCurrent))return!1;var o=e.getPreviousNonWsToken(i.line,n);return o&&\"PREFIX\"==o.string.toUpperCase()?!0:!1};i.exports.preprocessPrefixTokenForCompletion=function(e,i){var r=e.getPreviousNonWsToken(e.getCursor().line,i);r&&r.string&&\":\"==r.string.slice(-1)&&(i={start:r.start,end:i.end,string:r.string+\" \"+i.string,state:i.state});return i};i.exports.appendPrefixIfNeeded=function(e,i){if(e.autocompleters.getTrie(i)&&e.options.autocompleters&&-1!=e.options.autocompleters.indexOf(i)){var r=e.getCursor(),o=e.getTokenAt(r);if(\"prefixed\"==n[o.type]){var t=o.string.indexOf(\":\");if(-1!==t){var s=e.getPreviousNonWsToken(r.line,o).string.toUpperCase(),a=e.getTokenAt({line:r.line,ch:o.start});if(\"PREFIX\"!=s&&(\"ws\"==a.type||null==a.type)){var p=o.string.substring(0,t+1),l=e.getPrefixesFromQuery();if(null==l[p.slice(0,-1)]){var E=e.autocompleters.getTrie(i).autoComplete(p);E.length>0&&e.addPrefixes(E[0])}}}}}}},{jquery:void 0}],23:[function(e,i){\"use strict\";var r=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}();i.exports=function(r,n){return{isValidCompletionPosition:function(){return i.exports.isValidCompletionPosition(r)},get:function(i,n){return e(\"./utils\").fetchFromLov(r,this,i,n)},preProcessToken:function(e){return i.exports.preProcessToken(r,e)},postProcessToken:function(e,n){return i.exports.postProcessToken(r,e,n)},async:!0,bulk:!1,autoShow:!1,persistent:n,callbacks:{validPosition:r.autocompleters.notifications.show,invalidPosition:r.autocompleters.notifications.hide}}};i.exports.isValidCompletionPosition=function(e){var i=e.getCompleteToken();if(0==i.string.length)return!1;if(0==i.string.indexOf(\"?\"))return!1;if(r.inArray(\"a\",i.state.possibleCurrent)>=0)return!0;var n=e.getCursor(),o=e.getPreviousNonWsToken(n.line,i);return\"rdfs:subPropertyOf\"==o.string?!0:!1};i.exports.preProcessToken=function(i,r){return e(\"./utils.js\").preprocessResourceTokenForCompletion(i,r)};i.exports.postProcessToken=function(i,r,n){return e(\"./utils.js\").postprocessResourceTokenForCompletion(i,r,n)}},{\"./utils\":24,\"./utils.js\":24,jquery:void 0}],24:[function(e,i){\"use strict\";var r=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),n=(e(\"./utils.js\"),e(\"yasgui-utils\")),o=function(e,i){var r=e.getPrefixesFromQuery();if(0==!i.string.indexOf(\"<\")){i.tokenPrefix=i.string.substring(0,i.string.indexOf(\":\")+1);null!=r[i.tokenPrefix.slice(0,-1)]&&(i.tokenPrefixUri=r[i.tokenPrefix.slice(0,-1)])}i.autocompletionString=i.string.trim();if(0==!i.string.indexOf(\"<\")&&i.string.indexOf(\":\")>-1)for(var n in r)if(0==i.string.indexOf(n)){i.autocompletionString=r[n];i.autocompletionString+=i.string.substring(n.length+1);break}0==i.autocompletionString.indexOf(\"<\")&&(i.autocompletionString=i.autocompletionString.substring(1));-1!==i.autocompletionString.indexOf(\">\",i.length-1)&&(i.autocompletionString=i.autocompletionString.substring(0,i.autocompletionString.length-1));return i},t=function(e,i,r){r=i.tokenPrefix&&i.autocompletionString&&i.tokenPrefixUri?i.tokenPrefix+r.substring(i.tokenPrefixUri.length):\"<\"+r+\">\";return r},s=function(i,o,t,s){if(!t||!t.string||0==t.string.trim().length){i.autocompleters.notifications.getEl(o).empty().append(\"Nothing to autocomplete yet!\");return!1}var a=50,p={q:t.autocompletionString,page:1};p.type=\"classes\"==o.name?\"class\":\"property\";var l=[],E=\"\",u=function(){E=\"http://lov.okfn.org/dataset/lov/api/v2/autocomplete/terms?\"+r.param(p)};u();var c=function(){p.page++;u()},d=function(){r.get(E,function(e){for(var n=0;n<e.results.length;n++)l.push(r.isArray(e.results[n].uri)&&e.results[n].uri.length>0?e.results[n].uri[0]:e.results[n].uri);if(l.length<e.total_results&&l.length<a){c();d()}else{l.length>0?i.autocompleters.notifications.hide(i,o):i.autocompleters.notifications.getEl(o).text(\"0 matches found...\");s(l)}}).fail(function(){i.autocompleters.notifications.getEl(o).empty().append(\"Failed fetching suggestions..\")})};i.autocompleters.notifications.getEl(o).empty().append(r(\"<span>Fetchting autocompletions &nbsp;</span>\")).append(r(n.svg.getElement(e(\"../imgs.js\").loader)).addClass(\"notificationLoader\"));d()};i.exports={fetchFromLov:s,preprocessResourceTokenForCompletion:o,postprocessResourceTokenForCompletion:t}},{\"../imgs.js\":27,\"./utils.js\":24,jquery:void 0,\"yasgui-utils\":16}],25:[function(e,i){\"use strict\";var r=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}();i.exports=function(e){return{isValidCompletionPosition:function(){var i=e.getTokenAt(e.getCursor());if(\"ws\"!=i.type){i=e.getCompleteToken(i);if(i&&0==i.string.indexOf(\"?\"))return!0}return!1},get:function(i){if(0==i.trim().length)return[];var n={};r(e.getWrapperElement()).find(\".cm-atom\").each(function(){var e=this.innerHTML;if(0==e.indexOf(\"?\")){var o=r(this).next(),t=o.attr(\"class\");t&&o.attr(\"class\").indexOf(\"cm-atom\")>=0&&(e+=o.text());if(e.length<=1)return;if(0!==e.indexOf(i))return;if(e==i)return;n[e]=!0}});var o=[];for(var t in n)o.push(t);o.sort();return o},async:!1,bulk:!1,autoShow:!0}}},{jquery:void 0}],26:[function(e){var i=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),r=e(\"./main.js\");r.defaults=i.extend(!0,{},r.defaults,{mode:\"sparql11\",value:\"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nSELECT * WHERE {\\n  ?sub ?pred ?obj .\\n} \\nLIMIT 10\",highlightSelectionMatches:{showToken:/\\w/},tabMode:\"indent\",lineNumbers:!0,lineWrapping:!0,foldGutter:{rangeFinder:r.fold.brace},gutters:[\"gutterErrorBar\",\"CodeMirror-linenumbers\",\"CodeMirror-foldgutter\"],matchBrackets:!0,fixedGutter:!0,syntaxErrorCheck:!0,extraKeys:{\"Ctrl-Space\":r.autoComplete,\"Cmd-Space\":r.autoComplete,\"Ctrl-D\":r.deleteLine,\"Ctrl-K\":r.deleteLine,\"Cmd-D\":r.deleteLine,\"Cmd-K\":r.deleteLine,\"Ctrl-/\":r.commentLines,\"Cmd-/\":r.commentLines,\"Ctrl-Alt-Down\":r.copyLineDown,\"Ctrl-Alt-Up\":r.copyLineUp,\"Cmd-Alt-Down\":r.copyLineDown,\"Cmd-Alt-Up\":r.copyLineUp,\"Shift-Ctrl-F\":r.doAutoFormat,\"Shift-Cmd-F\":r.doAutoFormat,\"Ctrl-]\":r.indentMore,\"Cmd-]\":r.indentMore,\"Ctrl-[\":r.indentLess,\"Cmd-[\":r.indentLess,\"Ctrl-S\":r.storeQuery,\"Cmd-S\":r.storeQuery,\"Ctrl-Enter\":r.executeQuery,\"Cmd-Enter\":r.executeQuery,F11:function(e){e.setOption(\"fullScreen\",!e.getOption(\"fullScreen\"))},Esc:function(e){e.getOption(\"fullScreen\")&&e.setOption(\"fullScreen\",!1)}},cursorHeight:.9,createShareLink:r.createShareLink,consumeShareLink:r.consumeShareLink,persistent:function(e){return\"yasqe_\"+i(e.getWrapperElement()).closest(\"[id]\").attr(\"id\")+\"_queryVal\"},sparql:{showQueryButton:!1,endpoint:\"http://dbpedia.org/sparql\",requestMethod:\"POST\",acceptHeaderGraph:\"text/turtle,*/*;q=0.9\",acceptHeaderSelect:\"application/sparql-results+json,*/*;q=0.9\",acceptHeaderUpdate:\"text/plain,*/*;q=0.9\",namedGraphs:[],defaultGraphs:[],args:[],headers:{},callbacks:{beforeSend:null,complete:null,error:null,success:null},handlers:{}}})},{\"./main.js\":28,jquery:void 0}],27:[function(e,i){\"use strict\";i.exports={loader:'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"100%\" height=\"100%\" fill=\"black\">  <circle cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(45 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.125s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(90 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.25s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(135 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.375s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(180 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.5s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(225 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.625s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(270 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.75s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(315 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.875s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(180 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.5s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle></svg>',query:'<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 80 80\" enable-background=\"new 0 0 80 80\" xml:space=\"preserve\"><g ></g><g >\t<path d=\"M64.622,2.411H14.995c-6.627,0-12,5.373-12,12v49.897c0,6.627,5.373,12,12,12h49.627c6.627,0,12-5.373,12-12V14.411   C76.622,7.783,71.249,2.411,64.622,2.411z M24.125,63.906V15.093L61,39.168L24.125,63.906z\"/></g></svg>',queryInvalid:'<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"0 0 73.627 73.897\"   enable-background=\"new 0 0 80 80\"   xml:space=\"preserve\"      inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"warning.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     inkscape:zoom=\"3.1936344\"     inkscape:cx=\"36.8135\"     inkscape:cy=\"36.9485\"     inkscape:window-x=\"2625\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"svg2\" /><g     transform=\"translate(-2.995,-2.411)\"      /><g     transform=\"translate(-2.995,-2.411)\"     ><path       d=\"M 64.622,2.411 H 14.995 c -6.627,0 -12,5.373 -12,12 v 49.897 c 0,6.627 5.373,12 12,12 h 49.627 c 6.627,0 12,-5.373 12,-12 V 14.411 c 0,-6.628 -5.373,-12 -12,-12 z M 24.125,63.906 V 15.093 L 61,39.168 24.125,63.906 z\"       inkscape:connector-curvature=\"0\"        /></g><path     d=\"M 66.129381,65.903784 H 49.769875 c -1.64721,0 -2.889385,-0.581146 -3.498678,-1.63595 -0.609293,-1.055608 -0.491079,-2.422161 0.332391,-3.848223 l 8.179753,-14.167069 c 0.822934,-1.42633 1.9477,-2.211737 3.166018,-2.211737 1.218319,0 2.343086,0.785407 3.166019,2.211737 l 8.179751,14.167069 c 0.823472,1.426062 0.941686,2.792615 0.33239,3.848223 -0.609023,1.054804 -1.851197,1.63595 -3.498138,1.63595 z M 59.618815,60.91766 c 0,-0.850276 -0.68944,-1.539719 -1.539717,-1.539719 -0.850276,0 -1.539718,0.689443 -1.539718,1.539719 0,0.850277 0.689442,1.539718 1.539718,1.539718 0.850277,0 1.539717,-0.689441 1.539717,-1.539718 z m 0.04155,-9.265919 c 0,-0.873061 -0.707939,-1.580998 -1.580999,-1.580998 -0.873061,0 -1.580999,0.707937 -1.580999,1.580998 l 0.373403,5.610965 h 0.0051 c 0.05415,0.619747 0.568548,1.10761 1.202504,1.10761 0.586239,0 1.075443,-0.415756 1.188563,-0.968489 0.0092,-0.04476 0.0099,-0.09248 0.01392,-0.138854 h 0.01072 l 0.367776,-5.611232 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#aa8800\" /></svg>',download:'<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" baseProfile=\"tiny\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xml:space=\"preserve\"><g ></g><g >\t<path fill-rule=\"evenodd\" fill=\"#000000\" d=\"M88,84v-2c0-2.961-0.859-4-4-4H16c-2.961,0-4,0.98-4,4v2c0,3.102,1.039,4,4,4h68   C87.02,88,88,87.039,88,84z M58,12H42c-5,0-6,0.941-6,6v22H16l34,34l34-34H64V18C64,12.941,62.939,12,58,12z\"/></g></svg>',share:'<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"  x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\"><path d=\"M36.764,50c0,0.308-0.07,0.598-0.088,0.905l32.247,16.119c2.76-2.338,6.293-3.797,10.195-3.797  C87.89,63.228,95,70.338,95,79.109C95,87.89,87.89,95,79.118,95c-8.78,0-15.882-7.11-15.882-15.891c0-0.316,0.07-0.598,0.088-0.905  L31.077,62.085c-2.769,2.329-6.293,3.788-10.195,3.788C12.11,65.873,5,58.771,5,50c0-8.78,7.11-15.891,15.882-15.891  c3.902,0,7.427,1.468,10.195,3.797l32.247-16.119c-0.018-0.308-0.088-0.598-0.088-0.914C63.236,12.11,70.338,5,79.118,5  C87.89,5,95,12.11,95,20.873c0,8.78-7.11,15.891-15.882,15.891c-3.911,0-7.436-1.468-10.195-3.806L36.676,49.086  C36.693,49.394,36.764,49.684,36.764,50z\"/></svg>',warning:'<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   viewBox=\"0 0 66.399998 66.399998\"   enable-background=\"new 0 0 69.3 69.3\"   xml:space=\"preserve\"   height=\"100%\"   width=\"100%\"   inkscape:version=\"0.48.4 r9939\"   ><g      transform=\"translate(-1.5,-1.5)\"     style=\"fill:#ff0000\"><path       d=\"M 34.7,1.5 C 16.4,1.5 1.5,16.4 1.5,34.7 1.5,53 16.4,67.9 34.7,67.9 53,67.9 67.9,53 67.9,34.7 67.9,16.4 53,1.5 34.7,1.5 z m 0,59.4 C 20.2,60.9 8.5,49.1 8.5,34.7 8.5,20.2 20.3,8.5 34.7,8.5 c 14.4,0 26.2,11.8 26.2,26.2 0,14.4 -11.8,26.2 -26.2,26.2 z\"      inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.6,47.1 c -1.4,0 -2.5,0.5 -3.5,1.5 -0.9,1 -1.4,2.2 -1.4,3.6 0,1.6 0.5,2.8 1.5,3.8 1,0.9 2.1,1.3 3.4,1.3 1.3,0 2.4,-0.5 3.4,-1.4 1,-0.9 1.5,-2.2 1.5,-3.7 0,-1.4 -0.5,-2.6 -1.4,-3.6 -0.9,-1 -2.1,-1.5 -3.5,-1.5 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.8,13.9 c -1.5,0 -2.8,0.5 -3.7,1.6 -0.9,1 -1.4,2.4 -1.4,4.2 0,1.1 0.1,2.9 0.2,5.6 l 0.8,13.1 c 0.2,1.8 0.4,3.2 0.9,4.1 0.5,1.2 1.5,1.8 2.9,1.8 1.3,0 2.3,-0.7 2.9,-1.9 0.5,-1 0.7,-2.3 0.9,-4 L 39.4,25 c 0.1,-1.3 0.2,-2.5 0.2,-3.8 0,-2.2 -0.3,-3.9 -0.8,-5.1 -0.5,-1 -1.6,-2.2 -4,-2.2 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /></g></svg>',fullscreen:'<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"640\"     inkscape:window-height=\"480\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"0\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m -7.962963,-10 v 38.889 l 16.667,-16.667 16.667,16.667 5.555,-5.555 -16.667,-16.667 16.667,-16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 92.037037,-10 v 38.889 l -16.667,-16.667 -16.666,16.667 -5.556,-5.555 16.666,-16.667 -16.666,-16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M -7.962963,90 V 51.111 l 16.667,16.666 16.667,-16.666 5.555,5.556 -16.667,16.666 16.667,16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M 92.037037,90 V 51.111 l -16.667,16.666 -16.666,-16.666 -5.556,5.556 16.666,16.666 -16.666,16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',smallscreen:'<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m 30.926037,28.889 0,-38.889 -16.667,16.667 -16.667,-16.667 -5.555,5.555 16.667,16.667 -16.667,16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,28.889 0,-38.889 16.667,16.667 16.666,-16.667 5.556,5.555 -16.666,16.667 16.666,16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 30.926037,51.111 0,38.889 -16.667,-16.666 -16.667,16.666 -5.555,-5.556 16.667,-16.666 -16.667,-16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,51.111 0,38.889 16.667,-16.666 16.666,16.666 5.556,-5.556 -16.666,-16.666 16.666,-16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>'}},{}],28:[function(e,i){\"use strict\";window.console=window.console||{log:function(){}};var r=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),n=function(){try{return e(\"codemirror\")}catch(i){return window.CodeMirror}}(),o=e(\"./utils.js\"),t=e(\"yasgui-utils\"),s=e(\"./imgs.js\");e(\"../lib/deparam.js\");e(\"codemirror/addon/fold/foldcode.js\");e(\"codemirror/addon/fold/foldgutter.js\");e(\"codemirror/addon/fold/xml-fold.js\");e(\"codemirror/addon/fold/brace-fold.js\");e(\"codemirror/addon/hint/show-hint.js\");e(\"codemirror/addon/search/searchcursor.js\");e(\"codemirror/addon/edit/matchbrackets.js\");e(\"codemirror/addon/runmode/runmode.js\");e(\"codemirror/addon/display/fullscreen.js\");e(\"../lib/flint.js\");var a=i.exports=function(e,i){var o=r(\"<div>\",{\"class\":\"yasqe\"}).appendTo(r(e));i=p(i);var t=l(n(o[0],i));c(t);return t},p=function(e){var i=r.extend(!0,{},a.defaults,e);return i},l=function(i){i.autocompleters=e(\"./autocompleters/autocompleterBase.js\")(a,i);i.options.autocompleters&&i.options.autocompleters.forEach(function(e){a.Autocompleters[e]&&i.autocompleters.init(e,a.Autocompleters[e])});i.getCompleteToken=function(r,n){return e(\"./tokenUtils.js\").getCompleteToken(i,r,n)};i.getPreviousNonWsToken=function(r,n){return e(\"./tokenUtils.js\").getPreviousNonWsToken(i,r,n)};i.getNextNonWsToken=function(r,n){return e(\"./tokenUtils.js\").getNextNonWsToken(i,r,n)};i.query=function(e){a.executeQuery(i,e)};i.getUrlArguments=function(e){return a.getUrlArguments(i,e)};i.getPrefixesFromQuery=function(){return e(\"./prefixUtils.js\").getPrefixesFromQuery(i)};i.addPrefixes=function(r){return e(\"./prefixUtils.js\").addPrefixes(i,r)};i.removePrefixes=function(r){return e(\"./prefixUtils.js\").removePrefixes(i,r)};i.getValueWithoutComments=function(){var e=\"\";a.runMode(i.getValue(),\"sparql11\",function(i,r){\"comment\"!=r&&(e+=i)});return e};i.getQueryType=function(){return i.queryType};i.getQueryMode=function(){var e=i.getQueryType();return\"INSERT\"==e||\"DELETE\"==e||\"LOAD\"==e||\"CLEAR\"==e||\"CREATE\"==e||\"DROP\"==e||\"COPY\"==e||\"MOVE\"==e||\"ADD\"==e?\"update\":\"query\"};i.setCheckSyntaxErrors=function(e){i.options.syntaxErrorCheck=e;N(i)};i.enableCompleter=function(e){E(i.options,e);a.Autocompleters[e]&&i.autocompleters.init(e,a.Autocompleters[e])};i.disableCompleter=function(e){u(i.options,e)};return i},E=function(e,i){e.autocompleters||(e.autocompleters=[]);e.autocompleters.push(i)},u=function(e,i){if(\"object\"==typeof e.autocompleters){var n=r.inArray(i,e.autocompleters);if(n>=0){e.autocompleters.splice(n,1);u(e,i)}}},c=function(e){var i=o.getPersistencyId(e,e.options.persistent);if(i){var n=t.storage.get(i);n&&e.setValue(n)}a.drawButtons(e);e.on(\"blur\",function(e){a.storeQuery(e)});e.on(\"change\",function(e){N(e);a.updateQueryButton(e);a.positionButtons(e)});e.on(\"changes\",function(){N(e);a.updateQueryButton(e);a.positionButtons(e)});e.on(\"cursorActivity\",function(e){d(e)});e.prevQueryValid=!1;N(e);a.positionButtons(e);if(e.options.consumeShareLink){var s=r.deparam(window.location.search.substring(1));e.options.consumeShareLink(e,s)}},d=function(e){e.cursor=r(\".CodeMirror-cursor\");e.buttons&&e.buttons.is(\":visible\")&&e.cursor.length>0&&(o.elementsOverlap(e.cursor,e.buttons)?e.buttons.find(\"svg\").attr(\"opacity\",\"0.2\"):e.buttons.find(\"svg\").attr(\"opacity\",\"1.0\"))},N=function(i,n){i.queryValid=!0;i.clearGutter(\"gutterErrorBar\");for(var o=null,a=0;a<i.lineCount();++a){var p=!1;i.prevQueryValid||(p=!0);var l=i.getTokenAt({line:a,ch:i.getLine(a).length},p),o=l.state;i.queryType=o.queryType;if(0==o.OK){if(!i.options.syntaxErrorCheck){r(i.getWrapperElement).find(\".sp-error\").css(\"color\",\"black\");return}var E=t.svg.getElement(s.warning);o.possibleCurrent&&o.possibleCurrent.length>0&&e(\"./tooltip\")(i,E,function(){var e=[];o.possibleCurrent.forEach(function(i){e.push(\"<strong style='text-decoration:underline'>\"+r(\"<div/>\").text(i).html()+\"</strong>\")});return\"This line is invalid. Expected: \"+e.join(\", \")});E.style.marginTop=\"2px\";E.style.marginLeft=\"2px\";E.className=\"parseErrorIcon\";i.setGutterMarker(a,\"gutterErrorBar\",E);i.queryValid=!1;break}}i.prevQueryValid=i.queryValid;if(n&&null!=o&&void 0!=o.stack){var u=o.stack,c=o.stack.length;c>1?i.queryValid=!1:1==c&&\"solutionModifier\"!=u[0]&&\"?limitOffsetClauses\"!=u[0]&&\"?offsetClause\"!=u[0]&&(i.queryValid=!1)}};r.extend(a,n);a.Autocompleters={};a.registerAutocompleter=function(e,i){a.Autocompleters[e]=i;E(a.defaults,e)};a.autoComplete=function(e){e.autocompleters.autoComplete(!1)};a.registerAutocompleter(\"prefixes\",e(\"./autocompleters/prefixes.js\"));a.registerAutocompleter(\"properties\",e(\"./autocompleters/properties.js\"));a.registerAutocompleter(\"classes\",e(\"./autocompleters/classes.js\"));a.registerAutocompleter(\"variables\",e(\"./autocompleters/variables.js\"));a.positionButtons=function(e){var i=r(e.getWrapperElement()).find(\".CodeMirror-vscrollbar\"),n=0;i.is(\":visible\")&&(n=i.outerWidth());e.buttons.is(\":visible\")&&e.buttons.css(\"right\",n+6)};a.createShareLink=function(e){var i=r.deparam(window.location.search.substring(1));i.query=e.getValue();return i};a.consumeShareLink=function(e,i){i.query&&e.setValue(i.query)};a.drawButtons=function(e){e.buttons=r(\"<div class='yasqe_buttons'></div>\").appendTo(r(e.getWrapperElement()));if(e.options.createShareLink){var i=r(t.svg.getElement(s.share));i.click(function(n){n.stopPropagation();var o=r(\"<div class='yasqe_sharePopup'></div>\").appendTo(e.buttons);r(\"html\").click(function(){o&&o.remove()});o.click(function(e){e.stopPropagation()});var t=r(\"<textarea></textarea>\").val(location.protocol+\"//\"+location.host+location.pathname+\"?\"+r.param(e.options.createShareLink(e)));t.focus(function(){var e=r(this);e.select();e.mouseup(function(){e.unbind(\"mouseup\");return!1})});o.empty().append(t);var s=i.position();o.css(\"top\",s.top+i.outerHeight()+\"px\").css(\"left\",s.left+i.outerWidth()-o.outerWidth()+\"px\")}).addClass(\"yasqe_share\").attr(\"title\",\"Share your query\").appendTo(e.buttons)}var n=r(\"<div>\",{\"class\":\"fullscreenToggleBtns\"}).append(r(t.svg.getElement(s.fullscreen)).addClass(\"yasqe_fullscreenBtn\").attr(\"title\",\"Set editor full screen\").click(function(){e.setOption(\"fullScreen\",!0)})).append(r(t.svg.getElement(s.smallscreen)).addClass(\"yasqe_smallscreenBtn\").attr(\"title\",\"Set editor to normale size\").click(function(){e.setOption(\"fullScreen\",!1)}));e.buttons.append(n);if(e.options.sparql.showQueryButton){r(\"<div>\",{\"class\":\"yasqe_queryButton\"}).click(function(){if(r(this).hasClass(\"query_busy\")){e.xhr&&e.xhr.abort();a.updateQueryButton(e)}else e.query()}).appendTo(e.buttons);a.updateQueryButton(e)}};var I={busy:\"loader\",valid:\"query\",error:\"queryInvalid\"};a.updateQueryButton=function(e,i){var n=r(e.getWrapperElement()).find(\".yasqe_queryButton\");if(0!=n.length){if(!i){i=\"valid\";e.queryValid===!1&&(i=\"error\")}if(i!=e.queryStatus&&(\"busy\"==i||\"valid\"==i||\"error\"==i)){n.empty().removeClass(function(e,i){return i.split(\" \").filter(function(e){return 0==e.indexOf(\"query_\")}).join(\" \")}).addClass(\"query_\"+i);t.svg.draw(n,s[I[i]]);e.queryStatus=i}}};a.fromTextArea=function(e,i){i=p(i);var o=(r(\"<div>\",{\"class\":\"yasqe\"}).insertBefore(r(e)).append(r(e)),l(n.fromTextArea(e,i)));\nc(o);return o};a.storeQuery=function(e){var i=o.getPersistencyId(e,e.options.persistent);i&&t.storage.set(i,e.getValue(),\"month\")};a.commentLines=function(e){for(var i=e.getCursor(!0).line,r=e.getCursor(!1).line,n=Math.min(i,r),o=Math.max(i,r),t=!0,s=n;o>=s;s++){var a=e.getLine(s);if(0==a.length||\"#\"!=a.substring(0,1)){t=!1;break}}for(var s=n;o>=s;s++)t?e.replaceRange(\"\",{line:s,ch:0},{line:s,ch:1}):e.replaceRange(\"#\",{line:s,ch:0})};a.copyLineUp=function(e){var i=e.getCursor(),r=e.lineCount();e.replaceRange(\"\\n\",{line:r-1,ch:e.getLine(r-1).length});for(var n=r;n>i.line;n--){var o=e.getLine(n-1);e.replaceRange(o,{line:n,ch:0},{line:n,ch:e.getLine(n).length})}};a.copyLineDown=function(e){a.copyLineUp(e);var i=e.getCursor();i.line++;e.setCursor(i)};a.doAutoFormat=function(e){if(e.somethingSelected()){var i={line:e.getCursor(!1).line,ch:e.getSelection().length};x(e,e.getCursor(!0),i)}else{var r=e.lineCount(),n=e.getTextArea().value.length;x(e,{line:0,ch:0},{line:r,ch:n})}};var x=function(e,i,r){var n=e.indexFromPos(i),o=e.indexFromPos(r),t=m(e.getValue(),n,o);e.operation(function(){e.replaceRange(t,i,r);for(var o=e.posFromIndex(n).line,s=e.posFromIndex(n+t.length).line,a=o;s>=a;a++)e.indentLine(a,\"smart\")})},m=function(e,i,o){e=e.substring(i,o);var t=[[\"keyword\",\"ws\",\"prefixed\",\"ws\",\"uri\"],[\"keyword\",\"ws\",\"uri\"]],s=[\"{\",\".\",\";\"],a=[\"}\"],p=function(e){for(var i=0;i<t.length;i++)if(u.valueOf().toString()==t[i].valueOf().toString())return 1;for(var i=0;i<s.length;i++)if(e==s[i])return 1;for(var i=0;i<a.length;i++)if(\"\"!=r.trim(E)&&e==a[i])return-1;return 0},l=\"\",E=\"\",u=[];n.runMode(e,\"sparql11\",function(e,i){u.push(i);var r=p(e,i);if(0!=r){if(1==r){l+=e+\"\\n\";E=\"\"}else{l+=\"\\n\"+e;E=e}u=[]}else{E+=e;l+=e}1==u.length&&\"sp-ws\"==u[0]&&(u=[])});return r.trim(l.replace(/\\n\\s*\\n/g,\"\\n\"))};e(\"./sparql.js\"),e(\"./defaults.js\");a.version={CodeMirror:n.version,YASQE:e(\"../package.json\").version,jquery:r.fn.jquery,\"yasgui-utils\":t.version}},{\"../lib/deparam.js\":2,\"../lib/flint.js\":3,\"../package.json\":19,\"./autocompleters/autocompleterBase.js\":20,\"./autocompleters/classes.js\":21,\"./autocompleters/prefixes.js\":22,\"./autocompleters/properties.js\":23,\"./autocompleters/variables.js\":25,\"./defaults.js\":26,\"./imgs.js\":27,\"./prefixUtils.js\":29,\"./sparql.js\":30,\"./tokenUtils.js\":31,\"./tooltip\":32,\"./utils.js\":33,codemirror:void 0,\"codemirror/addon/display/fullscreen.js\":5,\"codemirror/addon/edit/matchbrackets.js\":6,\"codemirror/addon/fold/brace-fold.js\":7,\"codemirror/addon/fold/foldcode.js\":8,\"codemirror/addon/fold/foldgutter.js\":9,\"codemirror/addon/fold/xml-fold.js\":10,\"codemirror/addon/hint/show-hint.js\":11,\"codemirror/addon/runmode/runmode.js\":12,\"codemirror/addon/search/searchcursor.js\":13,jquery:void 0,\"yasgui-utils\":16}],29:[function(e,i){\"use strict\";var r=function(e,i){var r=e.getPrefixesFromQuery();if(\"string\"==typeof i)n(e,i);else for(var o in i)o in r||n(e,o+\": <\"+i[o]+\">\")},n=function(e,i){for(var r=null,n=0,o=e.lineCount(),t=0;o>t;t++){var a=e.getNextNonWsToken(t);if(null!=a&&(\"PREFIX\"==a.string||\"BASE\"==a.string)){r=a;n=t}}if(null==r)e.replaceRange(\"PREFIX \"+i+\"\\n\",{line:0,ch:0});else{var p=s(e,n);e.replaceRange(\"\\n\"+p+\"PREFIX \"+i,{line:n})}},o=function(e,i){var r=function(e){return e.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g,\"\\\\$&\")};for(var n in i)e.setValue(e.getValue().replace(new RegExp(\"PREFIX\\\\s*\"+n+\":\\\\s*\"+r(\"<\"+i[n]+\">\")+\"\\\\s*\",\"ig\"),\"\"))},t=function(e){for(var i={},r=!0,n=function(o,s){if(r){s||(s=1);var a=e.getNextNonWsToken(t,s);if(a){-1==a.state.possibleCurrent.indexOf(\"PREFIX\")&&-1==a.state.possibleNext.indexOf(\"PREFIX\")&&(r=!1);if(\"PREFIX\"==a.string.toUpperCase()){var p=e.getNextNonWsToken(t,a.end+1);if(p){var l=e.getNextNonWsToken(t,p.end+1);if(l){var E=l.string;0==E.indexOf(\"<\")&&(E=E.substring(1));\">\"==E.slice(-1)&&(E=E.substring(0,E.length-1));i[p.string.slice(0,-1)]=E;n(o,l.end+1)}else n(o,p.end+1)}else n(o,a.end+1)}else n(o,a.end+1)}}},o=e.lineCount(),t=0;o>t&&r;t++)n(t);return i},s=function(e,i,r){void 0==r&&(r=1);var n=e.getTokenAt({line:i,ch:r});return null==n||void 0==n||\"ws\"!=n.type?\"\":n.string+s(e,i,n.end+1)};i.exports={addPrefixes:r,getPrefixesFromQuery:t,removePrefixes:o}},{}],30:[function(e){\"use strict\";var i=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),r=e(\"./main.js\");r.executeQuery=function(e,o){var t=\"function\"==typeof o?o:null,s=\"object\"==typeof o?o:{};e.options.sparql&&(s=i.extend({},e.options.sparql,s));s.handlers&&i.extend(!0,s.callbacks,s.handlers);if(s.endpoint&&0!=s.endpoint.length){var a={url:\"function\"==typeof s.endpoint?s.endpoint(e):s.endpoint,type:\"function\"==typeof s.requestMethod?s.requestMethod(e):s.requestMethod,headers:{Accept:n(e,s)}},p=!1;if(s.callbacks)for(var l in s.callbacks)if(s.callbacks[l]){p=!0;a[l]=s.callbacks[l]}a.data=e.getUrlArguments(s);if(p||t){t&&(a.complete=t);s.headers&&!i.isEmptyObject(s.headers)&&i.extend(a.headers,s.headers);r.updateQueryButton(e,\"busy\");var E=function(){r.updateQueryButton(e)};a.complete=a.complete?[E,a.complete]:E;e.xhr=i.ajax(a)}}};r.getUrlArguments=function(e,r){var n=e.getQueryMode(),o=[{name:e.getQueryMode(),value:e.getValue()}];if(r.namedGraphs&&r.namedGraphs.length>0)for(var t=\"query\"==n?\"named-graph-uri\":\"using-named-graph-uri \",s=0;s<r.namedGraphs.length;s++)o.push({name:t,value:r.namedGraphs[s]});if(r.defaultGraphs&&r.defaultGraphs.length>0)for(var t=\"query\"==n?\"default-graph-uri\":\"using-graph-uri \",s=0;s<r.defaultGraphs.length;s++)o.push({name:t,value:r.defaultGraphs[s]});r.args&&r.args.length>0&&i.merge(o,r.args);return o};var n=function(e,i){var r=null;if(!i.acceptHeader||i.acceptHeaderGraph||i.acceptHeaderSelect||i.acceptHeaderUpdate)if(\"update\"==e.getQueryMode())r=\"function\"==typeof i.acceptHeader?i.acceptHeaderUpdate(e):i.acceptHeaderUpdate;else{var n=e.getQueryType();r=\"DESCRIBE\"==n||\"CONSTRUCT\"==n?\"function\"==typeof i.acceptHeaderGraph?i.acceptHeaderGraph(e):i.acceptHeaderGraph:\"function\"==typeof i.acceptHeaderSelect?i.acceptHeaderSelect(e):i.acceptHeaderSelect}else r=\"function\"==typeof i.acceptHeader?i.acceptHeader(e):i.acceptHeader;return r}},{\"./main.js\":28,jquery:void 0}],31:[function(e,i){\"use strict\";var r=function(e,i,n){n||(n=e.getCursor());i||(i=e.getTokenAt(n));var o=e.getTokenAt({line:n.line,ch:i.start});if(null!=o.type&&\"ws\"!=o.type&&null!=i.type&&\"ws\"!=i.type){i.start=o.start;i.string=o.string+i.string;return r(e,i,{line:n.line,ch:o.start})}if(null!=i.type&&\"ws\"==i.type){i.start=i.start+1;i.string=i.string.substring(1);return i}return i},n=function(e,i,r){var o=e.getTokenAt({line:i,ch:r.start});null!=o&&\"ws\"==o.type&&(o=n(e,i,o));return o},o=function(e,i,r){void 0==r&&(r=1);var n=e.getTokenAt({line:i,ch:r});return null==n||void 0==n||n.end<r?null:\"ws\"==n.type?o(e,i,n.end+1):n};i.exports={getPreviousNonWsToken:n,getCompleteToken:r,getNextNonWsToken:o}},{}],32:[function(e,i){\"use strict\";{var r=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}();e(\"./utils.js\")}i.exports=function(e,i,n){var o,i=r(i);i.hover(function(){\"function\"==typeof n&&(n=n());o=r(\"<div>\").addClass(\"yasqe_tooltip\").html(n).appendTo(i);t()},function(){r(\".yasqe_tooltip\").remove()});var t=function(){if(r(e.getWrapperElement()).offset().top>=o.offset().top){o.css(\"bottom\",\"auto\");o.css(\"top\",\"26px\")}}}},{\"./utils.js\":33,jquery:void 0}],33:[function(e,i){\"use strict\";var r=function(){try{return e(\"jquery\")}catch(i){return window.jQuery}}(),n=function(e,i){var r=!1;try{void 0!==e[i]&&(r=!0)}catch(n){}return r},o=function(e,i){var r=null;i&&(r=\"string\"==typeof i?i:i(e));return r},t=function(){function e(e){var i,n,o;i=r(e).offset();n=r(e).width();o=r(e).height();return[[i.left,i.left+n],[i.top,i.top+o]]}function i(e,i){var r,n;r=e[0]<i[0]?e:i;n=e[0]<i[0]?i:e;return r[1]>n[0]||r[0]===n[0]}return function(r,n){var o=e(r),t=e(n);return i(o[0],t[0])&&i(o[1],t[1])}}();i.exports={keyExists:n,getPersistencyId:o,elementsOverlap:t}},{jquery:void 0}]},{},[1])(1)});\n//# sourceMappingURL=yasqe.min.js.map","'use strict';\n/*\n  jQuery deparam is an extraction of the deparam method from Ben Alman's jQuery BBQ\n  http://benalman.com/projects/jquery-bbq-plugin/\n*/\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n$.deparam = function (params, coerce) {\nvar obj = {},\n\tcoerce_types = { 'true': !0, 'false': !1, 'null': null };\n  \n// Iterate over all name=value pairs.\n$.each(params.replace(/\\+/g, ' ').split('&'), function (j,v) {\n  var param = v.split('='),\n\t  key = decodeURIComponent(param[0]),\n\t  val,\n\t  cur = obj,\n\t  i = 0,\n\t\t\n\t  // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\n\t  // into its component parts.\n\t  keys = key.split(']['),\n\t  keys_last = keys.length - 1;\n\t\n  // If the first keys part contains [ and the last ends with ], then []\n  // are correctly balanced.\n  if (/\\[/.test(keys[0]) && /\\]$/.test(keys[keys_last])) {\n\t// Remove the trailing ] from the last keys part.\n\tkeys[keys_last] = keys[keys_last].replace(/\\]$/, '');\n\t  \n\t// Split first keys part into two parts on the [ and add them back onto\n\t// the beginning of the keys array.\n\tkeys = keys.shift().split('[').concat(keys);\n\t  \n\tkeys_last = keys.length - 1;\n  } else {\n\t// Basic 'foo' style key.\n\tkeys_last = 0;\n  }\n\t\n  // Are we dealing with a name=value pair, or just a name?\n  if (param.length === 2) {\n\tval = decodeURIComponent(param[1]);\n\t  \n\t// Coerce values.\n\tif (coerce) {\n\t  val = val && !isNaN(val)              ? +val              // number\n\t\t  : val === 'undefined'             ? undefined         // undefined\n\t\t  : coerce_types[val] !== undefined ? coerce_types[val] // true, false, null\n\t\t  : val;                                                // string\n\t}\n\t  \n\tif ( keys_last ) {\n\t  // Complex key, build deep object structure based on a few rules:\n\t  // * The 'cur' pointer starts at the object top-level.\n\t  // * [] = array push (n is set to array length), [n] = array if n is \n\t  //   numeric, otherwise object.\n\t  // * If at the last keys part, set the value.\n\t  // * For each keys part, if the current level is undefined create an\n\t  //   object or array based on the type of the next keys part.\n\t  // * Move the 'cur' pointer to the next level.\n\t  // * Rinse & repeat.\n\t  for (; i <= keys_last; i++) {\n\t\tkey = keys[i] === '' ? cur.length : keys[i];\n\t\tcur = cur[key] = i < keys_last\n\t\t  ? cur[key] || (keys[i+1] && isNaN(keys[i+1]) ? {} : [])\n\t\t  : val;\n\t  }\n\t\t\n\t} else {\n\t  // Simple key, even simpler rules, since only scalars and shallow\n\t  // arrays are allowed.\n\t\t\n\t  if ($.isArray(obj[key])) {\n\t\t// val is already an array, so push on the next value.\n\t\tobj[key].push( val );\n\t\t  \n\t  } else if (obj[key] !== undefined) {\n\t\t// val isn't an array, but since a second value has been specified,\n\t\t// convert val into an array.\n\t\tobj[key] = [obj[key], val];\n\t\t  \n\t  } else {\n\t\t// val is a scalar.\n\t\tobj[key] = val;\n\t  }\n\t}\n\t  \n  } else if (key) {\n\t// No value was defined, so set something meaningful.\n\tobj[key] = coerce\n\t  ? undefined\n\t  : '';\n  }\n});\n  \nreturn obj;\n};\n","(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  \n\tCodeMirror.defineMode(\"sparql11\", function(config, parserConfig) {\n\t\n\t\tvar indentUnit = config.indentUnit;\n\t\n\t\t// ll1_table is auto-generated from grammar\n\t\t// - do not edit manually\n\t\t// %%%table%%%\n\tvar ll1_table=\n\t{\n\t  \"*[&&,valueLogical]\" : {\n\t     \"&&\": [\"[&&,valueLogical]\",\"*[&&,valueLogical]\"], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \"||\": [], \n\t     \";\": []}, \n\t  \"*[,,expression]\" : {\n\t     \",\": [\"[,,expression]\",\"*[,,expression]\"], \n\t     \")\": []}, \n\t  \"*[,,objectPath]\" : {\n\t     \",\": [\"[,,objectPath]\",\"*[,,objectPath]\"], \n\t     \".\": [], \n\t     \";\": [], \n\t     \"]\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"*[,,object]\" : {\n\t     \",\": [\"[,,object]\",\"*[,,object]\"], \n\t     \".\": [], \n\t     \";\": [], \n\t     \"]\": [], \n\t     \"}\": [], \n\t     \"GRAPH\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": []}, \n\t  \"*[/,pathEltOrInverse]\" : {\n\t     \"/\": [\"[/,pathEltOrInverse]\",\"*[/,pathEltOrInverse]\"], \n\t     \"|\": [], \n\t     \")\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": []}, \n\t  \"*[;,?[or([verbPath,verbSimple]),objectList]]\" : {\n\t     \";\": [\"[;,?[or([verbPath,verbSimple]),objectList]]\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \".\": [], \n\t     \"]\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"*[;,?[verb,objectList]]\" : {\n\t     \";\": [\"[;,?[verb,objectList]]\",\"*[;,?[verb,objectList]]\"], \n\t     \".\": [], \n\t     \"]\": [], \n\t     \"}\": [], \n\t     \"GRAPH\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": []}, \n\t  \"*[UNION,groupGraphPattern]\" : {\n\t     \"UNION\": [\"[UNION,groupGraphPattern]\",\"*[UNION,groupGraphPattern]\"], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \".\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"*[graphPatternNotTriples,?.,?triplesBlock]\" : {\n\t     \"{\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"OPTIONAL\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"MINUS\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"GRAPH\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"SERVICE\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"FILTER\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"BIND\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"VALUES\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"}\": []}, \n\t  \"*[quadsNotTriples,?.,?triplesTemplate]\" : {\n\t     \"GRAPH\": [\"[quadsNotTriples,?.,?triplesTemplate]\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"}\": []}, \n\t  \"*[|,pathOneInPropertySet]\" : {\n\t     \"|\": [\"[|,pathOneInPropertySet]\",\"*[|,pathOneInPropertySet]\"], \n\t     \")\": []}, \n\t  \"*[|,pathSequence]\" : {\n\t     \"|\": [\"[|,pathSequence]\",\"*[|,pathSequence]\"], \n\t     \")\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": []}, \n\t  \"*[||,conditionalAndExpression]\" : {\n\t     \"||\": [\"[||,conditionalAndExpression]\",\"*[||,conditionalAndExpression]\"], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \";\": []}, \n\t  \"*dataBlockValue\" : {\n\t     \"UNDEF\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"IRI_REF\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"TRUE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"FALSE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"PNAME_LN\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"PNAME_NS\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"STRING_LITERAL1\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"STRING_LITERAL2\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"STRING_LITERAL_LONG1\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"STRING_LITERAL_LONG2\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"INTEGER\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"DECIMAL\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"DOUBLE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"INTEGER_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"DECIMAL_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"DOUBLE_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"INTEGER_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"DECIMAL_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"DOUBLE_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"}\": [], \n\t     \")\": []}, \n\t  \"*datasetClause\" : {\n\t     \"FROM\": [\"datasetClause\",\"*datasetClause\"], \n\t     \"WHERE\": [], \n\t     \"{\": []}, \n\t  \"*describeDatasetClause\" : {\n\t     \"FROM\": [\"describeDatasetClause\",\"*describeDatasetClause\"], \n\t     \"ORDER\": [], \n\t     \"HAVING\": [], \n\t     \"GROUP\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"WHERE\": [], \n\t     \"{\": [], \n\t     \"VALUES\": [], \n\t     \"$\": []}, \n\t  \"*graphNode\" : {\n\t     \"(\": [\"graphNode\",\"*graphNode\"], \n\t     \"[\": [\"graphNode\",\"*graphNode\"], \n\t     \"VAR1\": [\"graphNode\",\"*graphNode\"], \n\t     \"VAR2\": [\"graphNode\",\"*graphNode\"], \n\t     \"NIL\": [\"graphNode\",\"*graphNode\"], \n\t     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \n\t     \"TRUE\": [\"graphNode\",\"*graphNode\"], \n\t     \"FALSE\": [\"graphNode\",\"*graphNode\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \n\t     \"ANON\": [\"graphNode\",\"*graphNode\"], \n\t     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \n\t     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \n\t     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \n\t     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \n\t     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \n\t     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \")\": []}, \n\t  \"*graphNodePath\" : {\n\t     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \")\": []}, \n\t  \"*groupCondition\" : {\n\t     \"(\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"URI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"IF\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"VALUES\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"ORDER\": [], \n\t     \"HAVING\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"*havingCondition\" : {\n\t     \"(\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"URI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"IF\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"VALUES\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"ORDER\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"*or([[ (,*dataBlockValue,)],NIL])\" : {\n\t     \"(\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \n\t     \"NIL\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \n\t     \"}\": []}, \n\t  \"*or([[*,unaryExpression],[/,unaryExpression]])\" : {\n\t     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \"||\": [], \n\t     \"&&\": [], \n\t     \"=\": [], \n\t     \"!=\": [], \n\t     \"<\": [], \n\t     \">\": [], \n\t     \"<=\": [], \n\t     \">=\": [], \n\t     \"IN\": [], \n\t     \"NOT\": [], \n\t     \"+\": [], \n\t     \"-\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \";\": []}, \n\t  \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\n\t     \"+\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"-\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"INTEGER_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DECIMAL_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DOUBLE_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"INTEGER_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DECIMAL_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DOUBLE_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \"||\": [], \n\t     \"&&\": [], \n\t     \"=\": [], \n\t     \"!=\": [], \n\t     \"<\": [], \n\t     \">\": [], \n\t     \"<=\": [], \n\t     \">=\": [], \n\t     \"IN\": [], \n\t     \"NOT\": [], \n\t     \";\": []}, \n\t  \"*or([var,[ (,expression,AS,var,)]])\" : {\n\t     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n\t     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n\t     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n\t     \"WHERE\": [], \n\t     \"{\": [], \n\t     \"FROM\": []}, \n\t  \"*orderCondition\" : {\n\t     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"(\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"URI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"IF\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"VALUES\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"*prefixDecl\" : {\n\t     \"PREFIX\": [\"prefixDecl\",\"*prefixDecl\"], \n\t     \"$\": [], \n\t     \"CONSTRUCT\": [], \n\t     \"DESCRIBE\": [], \n\t     \"ASK\": [], \n\t     \"INSERT\": [], \n\t     \"DELETE\": [], \n\t     \"SELECT\": [], \n\t     \"LOAD\": [], \n\t     \"CLEAR\": [], \n\t     \"DROP\": [], \n\t     \"ADD\": [], \n\t     \"MOVE\": [], \n\t     \"COPY\": [], \n\t     \"CREATE\": [], \n\t     \"WITH\": []}, \n\t  \"*usingClause\" : {\n\t     \"USING\": [\"usingClause\",\"*usingClause\"], \n\t     \"WHERE\": []}, \n\t  \"*var\" : {\n\t     \"VAR1\": [\"var\",\"*var\"], \n\t     \"VAR2\": [\"var\",\"*var\"], \n\t     \")\": []}, \n\t  \"*varOrIRIref\" : {\n\t     \"VAR1\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"VAR2\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"IRI_REF\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"PNAME_LN\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"PNAME_NS\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"ORDER\": [], \n\t     \"HAVING\": [], \n\t     \"GROUP\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"WHERE\": [], \n\t     \"{\": [], \n\t     \"FROM\": [], \n\t     \"VALUES\": [], \n\t     \"$\": []}, \n\t  \"+graphNode\" : {\n\t     \"(\": [\"graphNode\",\"*graphNode\"], \n\t     \"[\": [\"graphNode\",\"*graphNode\"], \n\t     \"VAR1\": [\"graphNode\",\"*graphNode\"], \n\t     \"VAR2\": [\"graphNode\",\"*graphNode\"], \n\t     \"NIL\": [\"graphNode\",\"*graphNode\"], \n\t     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \n\t     \"TRUE\": [\"graphNode\",\"*graphNode\"], \n\t     \"FALSE\": [\"graphNode\",\"*graphNode\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \n\t     \"ANON\": [\"graphNode\",\"*graphNode\"], \n\t     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \n\t     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \n\t     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \n\t     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \n\t     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \n\t     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"]}, \n\t  \"+graphNodePath\" : {\n\t     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"]}, \n\t  \"+groupCondition\" : {\n\t     \"(\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"URI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"IF\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"]}, \n\t  \"+havingCondition\" : {\n\t     \"(\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"URI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"IF\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"]}, \n\t  \"+or([var,[ (,expression,AS,var,)]])\" : {\n\t     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n\t     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n\t     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"]}, \n\t  \"+orderCondition\" : {\n\t     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"(\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"URI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"IF\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"]}, \n\t  \"+varOrIRIref\" : {\n\t     \"VAR1\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"VAR2\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"IRI_REF\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"PNAME_LN\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"PNAME_NS\": [\"varOrIRIref\",\"*varOrIRIref\"]}, \n\t  \"?.\" : {\n\t     \".\": [\".\"], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \"GRAPH\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"?DISTINCT\" : {\n\t     \"DISTINCT\": [\"DISTINCT\"], \n\t     \"!\": [], \n\t     \"+\": [], \n\t     \"-\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"(\": [], \n\t     \"STR\": [], \n\t     \"LANG\": [], \n\t     \"LANGMATCHES\": [], \n\t     \"DATATYPE\": [], \n\t     \"BOUND\": [], \n\t     \"IRI\": [], \n\t     \"URI\": [], \n\t     \"BNODE\": [], \n\t     \"RAND\": [], \n\t     \"ABS\": [], \n\t     \"CEIL\": [], \n\t     \"FLOOR\": [], \n\t     \"ROUND\": [], \n\t     \"CONCAT\": [], \n\t     \"STRLEN\": [], \n\t     \"UCASE\": [], \n\t     \"LCASE\": [], \n\t     \"ENCODE_FOR_URI\": [], \n\t     \"CONTAINS\": [], \n\t     \"STRSTARTS\": [], \n\t     \"STRENDS\": [], \n\t     \"STRBEFORE\": [], \n\t     \"STRAFTER\": [], \n\t     \"YEAR\": [], \n\t     \"MONTH\": [], \n\t     \"DAY\": [], \n\t     \"HOURS\": [], \n\t     \"MINUTES\": [], \n\t     \"SECONDS\": [], \n\t     \"TIMEZONE\": [], \n\t     \"TZ\": [], \n\t     \"NOW\": [], \n\t     \"UUID\": [], \n\t     \"STRUUID\": [], \n\t     \"MD5\": [], \n\t     \"SHA1\": [], \n\t     \"SHA256\": [], \n\t     \"SHA384\": [], \n\t     \"SHA512\": [], \n\t     \"COALESCE\": [], \n\t     \"IF\": [], \n\t     \"STRLANG\": [], \n\t     \"STRDT\": [], \n\t     \"SAMETERM\": [], \n\t     \"ISIRI\": [], \n\t     \"ISURI\": [], \n\t     \"ISBLANK\": [], \n\t     \"ISLITERAL\": [], \n\t     \"ISNUMERIC\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"COUNT\": [], \n\t     \"SUM\": [], \n\t     \"MIN\": [], \n\t     \"MAX\": [], \n\t     \"AVG\": [], \n\t     \"SAMPLE\": [], \n\t     \"GROUP_CONCAT\": [], \n\t     \"SUBSTR\": [], \n\t     \"REPLACE\": [], \n\t     \"REGEX\": [], \n\t     \"EXISTS\": [], \n\t     \"NOT\": [], \n\t     \"IRI_REF\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"*\": []}, \n\t  \"?GRAPH\" : {\n\t     \"GRAPH\": [\"GRAPH\"], \n\t     \"IRI_REF\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": []}, \n\t  \"?SILENT\" : {\n\t     \"SILENT\": [\"SILENT\"], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"IRI_REF\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": []}, \n\t  \"?SILENT_1\" : {\n\t     \"SILENT\": [\"SILENT\"], \n\t     \"IRI_REF\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": []}, \n\t  \"?SILENT_2\" : {\n\t     \"SILENT\": [\"SILENT\"], \n\t     \"GRAPH\": [], \n\t     \"DEFAULT\": [], \n\t     \"NAMED\": [], \n\t     \"ALL\": []}, \n\t  \"?SILENT_3\" : {\n\t     \"SILENT\": [\"SILENT\"], \n\t     \"GRAPH\": []}, \n\t  \"?SILENT_4\" : {\n\t     \"SILENT\": [\"SILENT\"], \n\t     \"DEFAULT\": [], \n\t     \"GRAPH\": [], \n\t     \"IRI_REF\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": []}, \n\t  \"?WHERE\" : {\n\t     \"WHERE\": [\"WHERE\"], \n\t     \"{\": []}, \n\t  \"?[,,expression]\" : {\n\t     \",\": [\"[,,expression]\"], \n\t     \")\": []}, \n\t  \"?[.,?constructTriples]\" : {\n\t     \".\": [\"[.,?constructTriples]\"], \n\t     \"}\": []}, \n\t  \"?[.,?triplesBlock]\" : {\n\t     \".\": [\"[.,?triplesBlock]\"], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"?[.,?triplesTemplate]\" : {\n\t     \".\": [\"[.,?triplesTemplate]\"], \n\t     \"}\": [], \n\t     \"GRAPH\": []}, \n\t  \"?[;,SEPARATOR,=,string]\" : {\n\t     \";\": [\"[;,SEPARATOR,=,string]\"], \n\t     \")\": []}, \n\t  \"?[;,update]\" : {\n\t     \";\": [\"[;,update]\"], \n\t     \"$\": []}, \n\t  \"?[AS,var]\" : {\n\t     \"AS\": [\"[AS,var]\"], \n\t     \")\": []}, \n\t  \"?[INTO,graphRef]\" : {\n\t     \"INTO\": [\"[INTO,graphRef]\"], \n\t     \";\": [], \n\t     \"$\": []}, \n\t  \"?[or([verbPath,verbSimple]),objectList]\" : {\n\t     \"VAR1\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"VAR2\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"^\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"a\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"!\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"(\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"IRI_REF\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"PNAME_LN\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"PNAME_NS\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \";\": [], \n\t     \".\": [], \n\t     \"]\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\n\t     \"a\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n\t     \"^\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n\t     \"IRI_REF\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n\t     \"PNAME_LN\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n\t     \"PNAME_NS\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n\t     \")\": []}, \n\t  \"?[update1,?[;,update]]\" : {\n\t     \"INSERT\": [\"[update1,?[;,update]]\"], \n\t     \"DELETE\": [\"[update1,?[;,update]]\"], \n\t     \"LOAD\": [\"[update1,?[;,update]]\"], \n\t     \"CLEAR\": [\"[update1,?[;,update]]\"], \n\t     \"DROP\": [\"[update1,?[;,update]]\"], \n\t     \"ADD\": [\"[update1,?[;,update]]\"], \n\t     \"MOVE\": [\"[update1,?[;,update]]\"], \n\t     \"COPY\": [\"[update1,?[;,update]]\"], \n\t     \"CREATE\": [\"[update1,?[;,update]]\"], \n\t     \"WITH\": [\"[update1,?[;,update]]\"], \n\t     \"$\": []}, \n\t  \"?[verb,objectList]\" : {\n\t     \"a\": [\"[verb,objectList]\"], \n\t     \"VAR1\": [\"[verb,objectList]\"], \n\t     \"VAR2\": [\"[verb,objectList]\"], \n\t     \"IRI_REF\": [\"[verb,objectList]\"], \n\t     \"PNAME_LN\": [\"[verb,objectList]\"], \n\t     \"PNAME_NS\": [\"[verb,objectList]\"], \n\t     \";\": [], \n\t     \".\": [], \n\t     \"]\": [], \n\t     \"}\": [], \n\t     \"GRAPH\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": []}, \n\t  \"?argList\" : {\n\t     \"NIL\": [\"argList\"], \n\t     \"(\": [\"argList\"], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \"||\": [], \n\t     \"&&\": [], \n\t     \"=\": [], \n\t     \"!=\": [], \n\t     \"<\": [], \n\t     \">\": [], \n\t     \"<=\": [], \n\t     \">=\": [], \n\t     \"IN\": [], \n\t     \"NOT\": [], \n\t     \"+\": [], \n\t     \"-\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \"*\": [], \n\t     \"/\": [], \n\t     \";\": []}, \n\t  \"?baseDecl\" : {\n\t     \"BASE\": [\"baseDecl\"], \n\t     \"$\": [], \n\t     \"CONSTRUCT\": [], \n\t     \"DESCRIBE\": [], \n\t     \"ASK\": [], \n\t     \"INSERT\": [], \n\t     \"DELETE\": [], \n\t     \"SELECT\": [], \n\t     \"LOAD\": [], \n\t     \"CLEAR\": [], \n\t     \"DROP\": [], \n\t     \"ADD\": [], \n\t     \"MOVE\": [], \n\t     \"COPY\": [], \n\t     \"CREATE\": [], \n\t     \"WITH\": [], \n\t     \"PREFIX\": []}, \n\t  \"?constructTriples\" : {\n\t     \"VAR1\": [\"constructTriples\"], \n\t     \"VAR2\": [\"constructTriples\"], \n\t     \"NIL\": [\"constructTriples\"], \n\t     \"(\": [\"constructTriples\"], \n\t     \"[\": [\"constructTriples\"], \n\t     \"IRI_REF\": [\"constructTriples\"], \n\t     \"TRUE\": [\"constructTriples\"], \n\t     \"FALSE\": [\"constructTriples\"], \n\t     \"BLANK_NODE_LABEL\": [\"constructTriples\"], \n\t     \"ANON\": [\"constructTriples\"], \n\t     \"PNAME_LN\": [\"constructTriples\"], \n\t     \"PNAME_NS\": [\"constructTriples\"], \n\t     \"STRING_LITERAL1\": [\"constructTriples\"], \n\t     \"STRING_LITERAL2\": [\"constructTriples\"], \n\t     \"STRING_LITERAL_LONG1\": [\"constructTriples\"], \n\t     \"STRING_LITERAL_LONG2\": [\"constructTriples\"], \n\t     \"INTEGER\": [\"constructTriples\"], \n\t     \"DECIMAL\": [\"constructTriples\"], \n\t     \"DOUBLE\": [\"constructTriples\"], \n\t     \"INTEGER_POSITIVE\": [\"constructTriples\"], \n\t     \"DECIMAL_POSITIVE\": [\"constructTriples\"], \n\t     \"DOUBLE_POSITIVE\": [\"constructTriples\"], \n\t     \"INTEGER_NEGATIVE\": [\"constructTriples\"], \n\t     \"DECIMAL_NEGATIVE\": [\"constructTriples\"], \n\t     \"DOUBLE_NEGATIVE\": [\"constructTriples\"], \n\t     \"}\": []}, \n\t  \"?groupClause\" : {\n\t     \"GROUP\": [\"groupClause\"], \n\t     \"VALUES\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"ORDER\": [], \n\t     \"HAVING\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"?havingClause\" : {\n\t     \"HAVING\": [\"havingClause\"], \n\t     \"VALUES\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"ORDER\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"?insertClause\" : {\n\t     \"INSERT\": [\"insertClause\"], \n\t     \"WHERE\": [], \n\t     \"USING\": []}, \n\t  \"?limitClause\" : {\n\t     \"LIMIT\": [\"limitClause\"], \n\t     \"VALUES\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"?limitOffsetClauses\" : {\n\t     \"LIMIT\": [\"limitOffsetClauses\"], \n\t     \"OFFSET\": [\"limitOffsetClauses\"], \n\t     \"VALUES\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"?offsetClause\" : {\n\t     \"OFFSET\": [\"offsetClause\"], \n\t     \"VALUES\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"?or([DISTINCT,REDUCED])\" : {\n\t     \"DISTINCT\": [\"or([DISTINCT,REDUCED])\"], \n\t     \"REDUCED\": [\"or([DISTINCT,REDUCED])\"], \n\t     \"*\": [], \n\t     \"(\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": []}, \n\t  \"?or([LANGTAG,[^^,iriRef]])\" : {\n\t     \"LANGTAG\": [\"or([LANGTAG,[^^,iriRef]])\"], \n\t     \"^^\": [\"or([LANGTAG,[^^,iriRef]])\"], \n\t     \"UNDEF\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \"a\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"^\": [], \n\t     \"!\": [], \n\t     \"(\": [], \n\t     \".\": [], \n\t     \";\": [], \n\t     \",\": [], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \"||\": [], \n\t     \"&&\": [], \n\t     \"=\": [], \n\t     \"!=\": [], \n\t     \"<\": [], \n\t     \">\": [], \n\t     \"<=\": [], \n\t     \">=\": [], \n\t     \"IN\": [], \n\t     \"NOT\": [], \n\t     \"+\": [], \n\t     \"-\": [], \n\t     \"*\": [], \n\t     \"/\": [], \n\t     \"}\": [], \n\t     \"[\": [], \n\t     \"NIL\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"]\": [], \n\t     \"GRAPH\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": []}, \n\t  \"?or([[*,unaryExpression],[/,unaryExpression]])\" : {\n\t     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"+\": [], \n\t     \"-\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \"||\": [], \n\t     \"&&\": [], \n\t     \"=\": [], \n\t     \"!=\": [], \n\t     \"<\": [], \n\t     \">\": [], \n\t     \"<=\": [], \n\t     \">=\": [], \n\t     \"IN\": [], \n\t     \"NOT\": [], \n\t     \";\": []}, \n\t  \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\n\t     \"=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"!=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"<\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \">\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"<=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \">=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"IN\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"NOT\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \"||\": [], \n\t     \"&&\": [], \n\t     \";\": []}, \n\t  \"?orderClause\" : {\n\t     \"ORDER\": [\"orderClause\"], \n\t     \"VALUES\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"?pathMod\" : {\n\t     \"*\": [\"pathMod\"], \n\t     \"?\": [\"pathMod\"], \n\t     \"+\": [\"pathMod\"], \n\t     \"{\": [\"pathMod\"], \n\t     \"|\": [], \n\t     \"/\": [], \n\t     \")\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": []}, \n\t  \"?triplesBlock\" : {\n\t     \"VAR1\": [\"triplesBlock\"], \n\t     \"VAR2\": [\"triplesBlock\"], \n\t     \"NIL\": [\"triplesBlock\"], \n\t     \"(\": [\"triplesBlock\"], \n\t     \"[\": [\"triplesBlock\"], \n\t     \"IRI_REF\": [\"triplesBlock\"], \n\t     \"TRUE\": [\"triplesBlock\"], \n\t     \"FALSE\": [\"triplesBlock\"], \n\t     \"BLANK_NODE_LABEL\": [\"triplesBlock\"], \n\t     \"ANON\": [\"triplesBlock\"], \n\t     \"PNAME_LN\": [\"triplesBlock\"], \n\t     \"PNAME_NS\": [\"triplesBlock\"], \n\t     \"STRING_LITERAL1\": [\"triplesBlock\"], \n\t     \"STRING_LITERAL2\": [\"triplesBlock\"], \n\t     \"STRING_LITERAL_LONG1\": [\"triplesBlock\"], \n\t     \"STRING_LITERAL_LONG2\": [\"triplesBlock\"], \n\t     \"INTEGER\": [\"triplesBlock\"], \n\t     \"DECIMAL\": [\"triplesBlock\"], \n\t     \"DOUBLE\": [\"triplesBlock\"], \n\t     \"INTEGER_POSITIVE\": [\"triplesBlock\"], \n\t     \"DECIMAL_POSITIVE\": [\"triplesBlock\"], \n\t     \"DOUBLE_POSITIVE\": [\"triplesBlock\"], \n\t     \"INTEGER_NEGATIVE\": [\"triplesBlock\"], \n\t     \"DECIMAL_NEGATIVE\": [\"triplesBlock\"], \n\t     \"DOUBLE_NEGATIVE\": [\"triplesBlock\"], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"?triplesTemplate\" : {\n\t     \"VAR1\": [\"triplesTemplate\"], \n\t     \"VAR2\": [\"triplesTemplate\"], \n\t     \"NIL\": [\"triplesTemplate\"], \n\t     \"(\": [\"triplesTemplate\"], \n\t     \"[\": [\"triplesTemplate\"], \n\t     \"IRI_REF\": [\"triplesTemplate\"], \n\t     \"TRUE\": [\"triplesTemplate\"], \n\t     \"FALSE\": [\"triplesTemplate\"], \n\t     \"BLANK_NODE_LABEL\": [\"triplesTemplate\"], \n\t     \"ANON\": [\"triplesTemplate\"], \n\t     \"PNAME_LN\": [\"triplesTemplate\"], \n\t     \"PNAME_NS\": [\"triplesTemplate\"], \n\t     \"STRING_LITERAL1\": [\"triplesTemplate\"], \n\t     \"STRING_LITERAL2\": [\"triplesTemplate\"], \n\t     \"STRING_LITERAL_LONG1\": [\"triplesTemplate\"], \n\t     \"STRING_LITERAL_LONG2\": [\"triplesTemplate\"], \n\t     \"INTEGER\": [\"triplesTemplate\"], \n\t     \"DECIMAL\": [\"triplesTemplate\"], \n\t     \"DOUBLE\": [\"triplesTemplate\"], \n\t     \"INTEGER_POSITIVE\": [\"triplesTemplate\"], \n\t     \"DECIMAL_POSITIVE\": [\"triplesTemplate\"], \n\t     \"DOUBLE_POSITIVE\": [\"triplesTemplate\"], \n\t     \"INTEGER_NEGATIVE\": [\"triplesTemplate\"], \n\t     \"DECIMAL_NEGATIVE\": [\"triplesTemplate\"], \n\t     \"DOUBLE_NEGATIVE\": [\"triplesTemplate\"], \n\t     \"}\": [], \n\t     \"GRAPH\": []}, \n\t  \"?whereClause\" : {\n\t     \"WHERE\": [\"whereClause\"], \n\t     \"{\": [\"whereClause\"], \n\t     \"ORDER\": [], \n\t     \"HAVING\": [], \n\t     \"GROUP\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"VALUES\": [], \n\t     \"$\": []}, \n\t  \"[ (,*dataBlockValue,)]\" : {\n\t     \"(\": [\"(\",\"*dataBlockValue\",\")\"]}, \n\t  \"[ (,*var,)]\" : {\n\t     \"(\": [\"(\",\"*var\",\")\"]}, \n\t  \"[ (,expression,)]\" : {\n\t     \"(\": [\"(\",\"expression\",\")\"]}, \n\t  \"[ (,expression,AS,var,)]\" : {\n\t     \"(\": [\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \n\t  \"[!=,numericExpression]\" : {\n\t     \"!=\": [\"!=\",\"numericExpression\"]}, \n\t  \"[&&,valueLogical]\" : {\n\t     \"&&\": [\"&&\",\"valueLogical\"]}, \n\t  \"[*,unaryExpression]\" : {\n\t     \"*\": [\"*\",\"unaryExpression\"]}, \n\t  \"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\" : {\n\t     \"WHERE\": [\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"], \n\t     \"FROM\": [\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"]}, \n\t  \"[+,multiplicativeExpression]\" : {\n\t     \"+\": [\"+\",\"multiplicativeExpression\"]}, \n\t  \"[,,expression]\" : {\n\t     \",\": [\",\",\"expression\"]}, \n\t  \"[,,integer,}]\" : {\n\t     \",\": [\",\",\"integer\",\"}\"]}, \n\t  \"[,,objectPath]\" : {\n\t     \",\": [\",\",\"objectPath\"]}, \n\t  \"[,,object]\" : {\n\t     \",\": [\",\",\"object\"]}, \n\t  \"[,,or([},[integer,}]])]\" : {\n\t     \",\": [\",\",\"or([},[integer,}]])\"]}, \n\t  \"[-,multiplicativeExpression]\" : {\n\t     \"-\": [\"-\",\"multiplicativeExpression\"]}, \n\t  \"[.,?constructTriples]\" : {\n\t     \".\": [\".\",\"?constructTriples\"]}, \n\t  \"[.,?triplesBlock]\" : {\n\t     \".\": [\".\",\"?triplesBlock\"]}, \n\t  \"[.,?triplesTemplate]\" : {\n\t     \".\": [\".\",\"?triplesTemplate\"]}, \n\t  \"[/,pathEltOrInverse]\" : {\n\t     \"/\": [\"/\",\"pathEltOrInverse\"]}, \n\t  \"[/,unaryExpression]\" : {\n\t     \"/\": [\"/\",\"unaryExpression\"]}, \n\t  \"[;,?[or([verbPath,verbSimple]),objectList]]\" : {\n\t     \";\": [\";\",\"?[or([verbPath,verbSimple]),objectList]\"]}, \n\t  \"[;,?[verb,objectList]]\" : {\n\t     \";\": [\";\",\"?[verb,objectList]\"]}, \n\t  \"[;,SEPARATOR,=,string]\" : {\n\t     \";\": [\";\",\"SEPARATOR\",\"=\",\"string\"]}, \n\t  \"[;,update]\" : {\n\t     \";\": [\";\",\"update\"]}, \n\t  \"[<,numericExpression]\" : {\n\t     \"<\": [\"<\",\"numericExpression\"]}, \n\t  \"[<=,numericExpression]\" : {\n\t     \"<=\": [\"<=\",\"numericExpression\"]}, \n\t  \"[=,numericExpression]\" : {\n\t     \"=\": [\"=\",\"numericExpression\"]}, \n\t  \"[>,numericExpression]\" : {\n\t     \">\": [\">\",\"numericExpression\"]}, \n\t  \"[>=,numericExpression]\" : {\n\t     \">=\": [\">=\",\"numericExpression\"]}, \n\t  \"[AS,var]\" : {\n\t     \"AS\": [\"AS\",\"var\"]}, \n\t  \"[IN,expressionList]\" : {\n\t     \"IN\": [\"IN\",\"expressionList\"]}, \n\t  \"[INTO,graphRef]\" : {\n\t     \"INTO\": [\"INTO\",\"graphRef\"]}, \n\t  \"[NAMED,iriRef]\" : {\n\t     \"NAMED\": [\"NAMED\",\"iriRef\"]}, \n\t  \"[NOT,IN,expressionList]\" : {\n\t     \"NOT\": [\"NOT\",\"IN\",\"expressionList\"]}, \n\t  \"[UNION,groupGraphPattern]\" : {\n\t     \"UNION\": [\"UNION\",\"groupGraphPattern\"]}, \n\t  \"[^^,iriRef]\" : {\n\t     \"^^\": [\"^^\",\"iriRef\"]}, \n\t  \"[constructTemplate,*datasetClause,whereClause,solutionModifier]\" : {\n\t     \"{\": [\"constructTemplate\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \n\t  \"[deleteClause,?insertClause]\" : {\n\t     \"DELETE\": [\"deleteClause\",\"?insertClause\"]}, \n\t  \"[graphPatternNotTriples,?.,?triplesBlock]\" : {\n\t     \"{\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"OPTIONAL\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"MINUS\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"GRAPH\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"SERVICE\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"FILTER\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"BIND\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"VALUES\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"]}, \n\t  \"[integer,or([[,,or([},[integer,}]])],}])]\" : {\n\t     \"INTEGER\": [\"integer\",\"or([[,,or([},[integer,}]])],}])\"]}, \n\t  \"[integer,}]\" : {\n\t     \"INTEGER\": [\"integer\",\"}\"]}, \n\t  \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\" : {\n\t     \"INTEGER_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DECIMAL_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DOUBLE_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"INTEGER_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DECIMAL_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DOUBLE_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"]}, \n\t  \"[or([verbPath,verbSimple]),objectList]\" : {\n\t     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"^\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"a\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"!\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"(\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectList\"]}, \n\t  \"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\n\t     \"a\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n\t     \"^\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n\t     \"IRI_REF\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n\t     \"PNAME_LN\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n\t     \"PNAME_NS\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"]}, \n\t  \"[quadsNotTriples,?.,?triplesTemplate]\" : {\n\t     \"GRAPH\": [\"quadsNotTriples\",\"?.\",\"?triplesTemplate\"]}, \n\t  \"[update1,?[;,update]]\" : {\n\t     \"INSERT\": [\"update1\",\"?[;,update]\"], \n\t     \"DELETE\": [\"update1\",\"?[;,update]\"], \n\t     \"LOAD\": [\"update1\",\"?[;,update]\"], \n\t     \"CLEAR\": [\"update1\",\"?[;,update]\"], \n\t     \"DROP\": [\"update1\",\"?[;,update]\"], \n\t     \"ADD\": [\"update1\",\"?[;,update]\"], \n\t     \"MOVE\": [\"update1\",\"?[;,update]\"], \n\t     \"COPY\": [\"update1\",\"?[;,update]\"], \n\t     \"CREATE\": [\"update1\",\"?[;,update]\"], \n\t     \"WITH\": [\"update1\",\"?[;,update]\"]}, \n\t  \"[verb,objectList]\" : {\n\t     \"a\": [\"verb\",\"objectList\"], \n\t     \"VAR1\": [\"verb\",\"objectList\"], \n\t     \"VAR2\": [\"verb\",\"objectList\"], \n\t     \"IRI_REF\": [\"verb\",\"objectList\"], \n\t     \"PNAME_LN\": [\"verb\",\"objectList\"], \n\t     \"PNAME_NS\": [\"verb\",\"objectList\"]}, \n\t  \"[|,pathOneInPropertySet]\" : {\n\t     \"|\": [\"|\",\"pathOneInPropertySet\"]}, \n\t  \"[|,pathSequence]\" : {\n\t     \"|\": [\"|\",\"pathSequence\"]}, \n\t  \"[||,conditionalAndExpression]\" : {\n\t     \"||\": [\"||\",\"conditionalAndExpression\"]}, \n\t  \"add\" : {\n\t     \"ADD\": [\"ADD\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \n\t  \"additiveExpression\" : {\n\t     \"!\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"+\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"-\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"VAR1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"VAR2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"(\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"LANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"LANGMATCHES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DATATYPE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"BOUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"IRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"BNODE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"RAND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ABS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"CEIL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"FLOOR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ROUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRLEN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"UCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"LCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ENCODE_FOR_URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"CONTAINS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRSTARTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRENDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRBEFORE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRAFTER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"YEAR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"MONTH\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DAY\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"HOURS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"MINUTES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SECONDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"TIMEZONE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"TZ\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"NOW\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"UUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRUUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"MD5\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SHA1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SHA256\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SHA384\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SHA512\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"COALESCE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"IF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRLANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRDT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SAMETERM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ISIRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ISURI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ISBLANK\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ISLITERAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ISNUMERIC\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"TRUE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"FALSE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"COUNT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SUM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"MIN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"MAX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"AVG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SAMPLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"GROUP_CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SUBSTR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"REPLACE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"REGEX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"EXISTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"NOT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"IRI_REF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRING_LITERAL1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRING_LITERAL2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRING_LITERAL_LONG1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRING_LITERAL_LONG2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"INTEGER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DECIMAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DOUBLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"INTEGER_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DECIMAL_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DOUBLE_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"INTEGER_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DECIMAL_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DOUBLE_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"PNAME_LN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"PNAME_NS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"]}, \n\t  \"aggregate\" : {\n\t     \"COUNT\": [\"COUNT\",\"(\",\"?DISTINCT\",\"or([*,expression])\",\")\"], \n\t     \"SUM\": [\"SUM\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n\t     \"MIN\": [\"MIN\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n\t     \"MAX\": [\"MAX\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n\t     \"AVG\": [\"AVG\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n\t     \"SAMPLE\": [\"SAMPLE\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n\t     \"GROUP_CONCAT\": [\"GROUP_CONCAT\",\"(\",\"?DISTINCT\",\"expression\",\"?[;,SEPARATOR,=,string]\",\")\"]}, \n\t  \"allowBnodes\" : {\n\t     \"}\": []}, \n\t  \"allowVars\" : {\n\t     \"}\": []}, \n\t  \"argList\" : {\n\t     \"NIL\": [\"NIL\"], \n\t     \"(\": [\"(\",\"?DISTINCT\",\"expression\",\"*[,,expression]\",\")\"]}, \n\t  \"askQuery\" : {\n\t     \"ASK\": [\"ASK\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \n\t  \"baseDecl\" : {\n\t     \"BASE\": [\"BASE\",\"IRI_REF\"]}, \n\t  \"bind\" : {\n\t     \"BIND\": [\"BIND\",\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \n\t  \"blankNode\" : {\n\t     \"BLANK_NODE_LABEL\": [\"BLANK_NODE_LABEL\"], \n\t     \"ANON\": [\"ANON\"]}, \n\t  \"blankNodePropertyList\" : {\n\t     \"[\": [\"[\",\"propertyListNotEmpty\",\"]\"]}, \n\t  \"blankNodePropertyListPath\" : {\n\t     \"[\": [\"[\",\"propertyListPathNotEmpty\",\"]\"]}, \n\t  \"booleanLiteral\" : {\n\t     \"TRUE\": [\"TRUE\"], \n\t     \"FALSE\": [\"FALSE\"]}, \n\t  \"brackettedExpression\" : {\n\t     \"(\": [\"(\",\"expression\",\")\"]}, \n\t  \"builtInCall\" : {\n\t     \"STR\": [\"STR\",\"(\",\"expression\",\")\"], \n\t     \"LANG\": [\"LANG\",\"(\",\"expression\",\")\"], \n\t     \"LANGMATCHES\": [\"LANGMATCHES\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"DATATYPE\": [\"DATATYPE\",\"(\",\"expression\",\")\"], \n\t     \"BOUND\": [\"BOUND\",\"(\",\"var\",\")\"], \n\t     \"IRI\": [\"IRI\",\"(\",\"expression\",\")\"], \n\t     \"URI\": [\"URI\",\"(\",\"expression\",\")\"], \n\t     \"BNODE\": [\"BNODE\",\"or([[ (,expression,)],NIL])\"], \n\t     \"RAND\": [\"RAND\",\"NIL\"], \n\t     \"ABS\": [\"ABS\",\"(\",\"expression\",\")\"], \n\t     \"CEIL\": [\"CEIL\",\"(\",\"expression\",\")\"], \n\t     \"FLOOR\": [\"FLOOR\",\"(\",\"expression\",\")\"], \n\t     \"ROUND\": [\"ROUND\",\"(\",\"expression\",\")\"], \n\t     \"CONCAT\": [\"CONCAT\",\"expressionList\"], \n\t     \"SUBSTR\": [\"substringExpression\"], \n\t     \"STRLEN\": [\"STRLEN\",\"(\",\"expression\",\")\"], \n\t     \"REPLACE\": [\"strReplaceExpression\"], \n\t     \"UCASE\": [\"UCASE\",\"(\",\"expression\",\")\"], \n\t     \"LCASE\": [\"LCASE\",\"(\",\"expression\",\")\"], \n\t     \"ENCODE_FOR_URI\": [\"ENCODE_FOR_URI\",\"(\",\"expression\",\")\"], \n\t     \"CONTAINS\": [\"CONTAINS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"STRSTARTS\": [\"STRSTARTS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"STRENDS\": [\"STRENDS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"STRBEFORE\": [\"STRBEFORE\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"STRAFTER\": [\"STRAFTER\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"YEAR\": [\"YEAR\",\"(\",\"expression\",\")\"], \n\t     \"MONTH\": [\"MONTH\",\"(\",\"expression\",\")\"], \n\t     \"DAY\": [\"DAY\",\"(\",\"expression\",\")\"], \n\t     \"HOURS\": [\"HOURS\",\"(\",\"expression\",\")\"], \n\t     \"MINUTES\": [\"MINUTES\",\"(\",\"expression\",\")\"], \n\t     \"SECONDS\": [\"SECONDS\",\"(\",\"expression\",\")\"], \n\t     \"TIMEZONE\": [\"TIMEZONE\",\"(\",\"expression\",\")\"], \n\t     \"TZ\": [\"TZ\",\"(\",\"expression\",\")\"], \n\t     \"NOW\": [\"NOW\",\"NIL\"], \n\t     \"UUID\": [\"UUID\",\"NIL\"], \n\t     \"STRUUID\": [\"STRUUID\",\"NIL\"], \n\t     \"MD5\": [\"MD5\",\"(\",\"expression\",\")\"], \n\t     \"SHA1\": [\"SHA1\",\"(\",\"expression\",\")\"], \n\t     \"SHA256\": [\"SHA256\",\"(\",\"expression\",\")\"], \n\t     \"SHA384\": [\"SHA384\",\"(\",\"expression\",\")\"], \n\t     \"SHA512\": [\"SHA512\",\"(\",\"expression\",\")\"], \n\t     \"COALESCE\": [\"COALESCE\",\"expressionList\"], \n\t     \"IF\": [\"IF\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"STRLANG\": [\"STRLANG\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"STRDT\": [\"STRDT\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"SAMETERM\": [\"SAMETERM\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"ISIRI\": [\"ISIRI\",\"(\",\"expression\",\")\"], \n\t     \"ISURI\": [\"ISURI\",\"(\",\"expression\",\")\"], \n\t     \"ISBLANK\": [\"ISBLANK\",\"(\",\"expression\",\")\"], \n\t     \"ISLITERAL\": [\"ISLITERAL\",\"(\",\"expression\",\")\"], \n\t     \"ISNUMERIC\": [\"ISNUMERIC\",\"(\",\"expression\",\")\"], \n\t     \"REGEX\": [\"regexExpression\"], \n\t     \"EXISTS\": [\"existsFunc\"], \n\t     \"NOT\": [\"notExistsFunc\"]}, \n\t  \"clear\" : {\n\t     \"CLEAR\": [\"CLEAR\",\"?SILENT_2\",\"graphRefAll\"]}, \n\t  \"collection\" : {\n\t     \"(\": [\"(\",\"+graphNode\",\")\"]}, \n\t  \"collectionPath\" : {\n\t     \"(\": [\"(\",\"+graphNodePath\",\")\"]}, \n\t  \"conditionalAndExpression\" : {\n\t     \"!\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"+\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"-\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"VAR1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"VAR2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"(\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"LANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"LANGMATCHES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DATATYPE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"BOUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"IRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"BNODE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"RAND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ABS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"CEIL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"FLOOR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ROUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRLEN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"UCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"LCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ENCODE_FOR_URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"CONTAINS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRSTARTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRENDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRBEFORE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRAFTER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"YEAR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"MONTH\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DAY\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"HOURS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"MINUTES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SECONDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"TIMEZONE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"TZ\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"NOW\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"UUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRUUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"MD5\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SHA1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SHA256\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SHA384\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SHA512\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"COALESCE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"IF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRLANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRDT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SAMETERM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ISIRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ISURI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ISBLANK\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ISLITERAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ISNUMERIC\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"TRUE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"FALSE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"COUNT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SUM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"MIN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"MAX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"AVG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SAMPLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"GROUP_CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SUBSTR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"REPLACE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"REGEX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"EXISTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"NOT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"IRI_REF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRING_LITERAL1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRING_LITERAL2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"INTEGER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DECIMAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DOUBLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"INTEGER_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DECIMAL_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DOUBLE_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"INTEGER_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"PNAME_LN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"PNAME_NS\": [\"valueLogical\",\"*[&&,valueLogical]\"]}, \n\t  \"conditionalOrExpression\" : {\n\t     \"!\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"+\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"-\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"VAR1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"VAR2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"(\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"LANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"LANGMATCHES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DATATYPE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"BOUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"IRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"BNODE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"RAND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ABS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"CEIL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"FLOOR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ROUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRLEN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"UCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"LCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ENCODE_FOR_URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"CONTAINS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRSTARTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRENDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRBEFORE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRAFTER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"YEAR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"MONTH\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DAY\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"HOURS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"MINUTES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SECONDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"TIMEZONE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"TZ\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"NOW\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"UUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRUUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"MD5\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SHA1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SHA256\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SHA384\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SHA512\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"COALESCE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"IF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRLANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRDT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SAMETERM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ISIRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ISURI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ISBLANK\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ISLITERAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ISNUMERIC\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"TRUE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"FALSE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"COUNT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SUM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"MIN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"MAX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"AVG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SAMPLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"GROUP_CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SUBSTR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"REPLACE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"REGEX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"EXISTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"NOT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"IRI_REF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRING_LITERAL1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRING_LITERAL2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"INTEGER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DECIMAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DOUBLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"INTEGER_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DECIMAL_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DOUBLE_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"INTEGER_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"PNAME_LN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"PNAME_NS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"]}, \n\t  \"constraint\" : {\n\t     \"(\": [\"brackettedExpression\"], \n\t     \"STR\": [\"builtInCall\"], \n\t     \"LANG\": [\"builtInCall\"], \n\t     \"LANGMATCHES\": [\"builtInCall\"], \n\t     \"DATATYPE\": [\"builtInCall\"], \n\t     \"BOUND\": [\"builtInCall\"], \n\t     \"IRI\": [\"builtInCall\"], \n\t     \"URI\": [\"builtInCall\"], \n\t     \"BNODE\": [\"builtInCall\"], \n\t     \"RAND\": [\"builtInCall\"], \n\t     \"ABS\": [\"builtInCall\"], \n\t     \"CEIL\": [\"builtInCall\"], \n\t     \"FLOOR\": [\"builtInCall\"], \n\t     \"ROUND\": [\"builtInCall\"], \n\t     \"CONCAT\": [\"builtInCall\"], \n\t     \"STRLEN\": [\"builtInCall\"], \n\t     \"UCASE\": [\"builtInCall\"], \n\t     \"LCASE\": [\"builtInCall\"], \n\t     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n\t     \"CONTAINS\": [\"builtInCall\"], \n\t     \"STRSTARTS\": [\"builtInCall\"], \n\t     \"STRENDS\": [\"builtInCall\"], \n\t     \"STRBEFORE\": [\"builtInCall\"], \n\t     \"STRAFTER\": [\"builtInCall\"], \n\t     \"YEAR\": [\"builtInCall\"], \n\t     \"MONTH\": [\"builtInCall\"], \n\t     \"DAY\": [\"builtInCall\"], \n\t     \"HOURS\": [\"builtInCall\"], \n\t     \"MINUTES\": [\"builtInCall\"], \n\t     \"SECONDS\": [\"builtInCall\"], \n\t     \"TIMEZONE\": [\"builtInCall\"], \n\t     \"TZ\": [\"builtInCall\"], \n\t     \"NOW\": [\"builtInCall\"], \n\t     \"UUID\": [\"builtInCall\"], \n\t     \"STRUUID\": [\"builtInCall\"], \n\t     \"MD5\": [\"builtInCall\"], \n\t     \"SHA1\": [\"builtInCall\"], \n\t     \"SHA256\": [\"builtInCall\"], \n\t     \"SHA384\": [\"builtInCall\"], \n\t     \"SHA512\": [\"builtInCall\"], \n\t     \"COALESCE\": [\"builtInCall\"], \n\t     \"IF\": [\"builtInCall\"], \n\t     \"STRLANG\": [\"builtInCall\"], \n\t     \"STRDT\": [\"builtInCall\"], \n\t     \"SAMETERM\": [\"builtInCall\"], \n\t     \"ISIRI\": [\"builtInCall\"], \n\t     \"ISURI\": [\"builtInCall\"], \n\t     \"ISBLANK\": [\"builtInCall\"], \n\t     \"ISLITERAL\": [\"builtInCall\"], \n\t     \"ISNUMERIC\": [\"builtInCall\"], \n\t     \"SUBSTR\": [\"builtInCall\"], \n\t     \"REPLACE\": [\"builtInCall\"], \n\t     \"REGEX\": [\"builtInCall\"], \n\t     \"EXISTS\": [\"builtInCall\"], \n\t     \"NOT\": [\"builtInCall\"], \n\t     \"IRI_REF\": [\"functionCall\"], \n\t     \"PNAME_LN\": [\"functionCall\"], \n\t     \"PNAME_NS\": [\"functionCall\"]}, \n\t  \"constructQuery\" : {\n\t     \"CONSTRUCT\": [\"CONSTRUCT\",\"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\"]}, \n\t  \"constructTemplate\" : {\n\t     \"{\": [\"{\",\"?constructTriples\",\"}\"]}, \n\t  \"constructTriples\" : {\n\t     \"VAR1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"VAR2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"NIL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"(\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"[\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"TRUE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"FALSE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"ANON\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"]}, \n\t  \"copy\" : {\n\t     \"COPY\": [\"COPY\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \n\t  \"create\" : {\n\t     \"CREATE\": [\"CREATE\",\"?SILENT_3\",\"graphRef\"]}, \n\t  \"dataBlock\" : {\n\t     \"NIL\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n\t     \"(\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n\t     \"VAR1\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n\t     \"VAR2\": [\"or([inlineDataOneVar,inlineDataFull])\"]}, \n\t  \"dataBlockValue\" : {\n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"], \n\t     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n\t     \"INTEGER\": [\"numericLiteral\"], \n\t     \"DECIMAL\": [\"numericLiteral\"], \n\t     \"DOUBLE\": [\"numericLiteral\"], \n\t     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n\t     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n\t     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n\t     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n\t     \"TRUE\": [\"booleanLiteral\"], \n\t     \"FALSE\": [\"booleanLiteral\"], \n\t     \"UNDEF\": [\"UNDEF\"]}, \n\t  \"datasetClause\" : {\n\t     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \n\t  \"defaultGraphClause\" : {\n\t     \"IRI_REF\": [\"sourceSelector\"], \n\t     \"PNAME_LN\": [\"sourceSelector\"], \n\t     \"PNAME_NS\": [\"sourceSelector\"]}, \n\t  \"delete1\" : {\n\t     \"DATA\": [\"DATA\",\"quadDataNoBnodes\"], \n\t     \"WHERE\": [\"WHERE\",\"quadPatternNoBnodes\"], \n\t     \"{\": [\"quadPatternNoBnodes\",\"?insertClause\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \n\t  \"deleteClause\" : {\n\t     \"DELETE\": [\"DELETE\",\"quadPattern\"]}, \n\t  \"describeDatasetClause\" : {\n\t     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \n\t  \"describeQuery\" : {\n\t     \"DESCRIBE\": [\"DESCRIBE\",\"or([+varOrIRIref,*])\",\"*describeDatasetClause\",\"?whereClause\",\"solutionModifier\"]}, \n\t  \"disallowBnodes\" : {\n\t     \"}\": [], \n\t     \"GRAPH\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": []}, \n\t  \"disallowVars\" : {\n\t     \"}\": [], \n\t     \"GRAPH\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": []}, \n\t  \"drop\" : {\n\t     \"DROP\": [\"DROP\",\"?SILENT_2\",\"graphRefAll\"]}, \n\t  \"existsFunc\" : {\n\t     \"EXISTS\": [\"EXISTS\",\"groupGraphPattern\"]}, \n\t  \"expression\" : {\n\t     \"!\": [\"conditionalOrExpression\"], \n\t     \"+\": [\"conditionalOrExpression\"], \n\t     \"-\": [\"conditionalOrExpression\"], \n\t     \"VAR1\": [\"conditionalOrExpression\"], \n\t     \"VAR2\": [\"conditionalOrExpression\"], \n\t     \"(\": [\"conditionalOrExpression\"], \n\t     \"STR\": [\"conditionalOrExpression\"], \n\t     \"LANG\": [\"conditionalOrExpression\"], \n\t     \"LANGMATCHES\": [\"conditionalOrExpression\"], \n\t     \"DATATYPE\": [\"conditionalOrExpression\"], \n\t     \"BOUND\": [\"conditionalOrExpression\"], \n\t     \"IRI\": [\"conditionalOrExpression\"], \n\t     \"URI\": [\"conditionalOrExpression\"], \n\t     \"BNODE\": [\"conditionalOrExpression\"], \n\t     \"RAND\": [\"conditionalOrExpression\"], \n\t     \"ABS\": [\"conditionalOrExpression\"], \n\t     \"CEIL\": [\"conditionalOrExpression\"], \n\t     \"FLOOR\": [\"conditionalOrExpression\"], \n\t     \"ROUND\": [\"conditionalOrExpression\"], \n\t     \"CONCAT\": [\"conditionalOrExpression\"], \n\t     \"STRLEN\": [\"conditionalOrExpression\"], \n\t     \"UCASE\": [\"conditionalOrExpression\"], \n\t     \"LCASE\": [\"conditionalOrExpression\"], \n\t     \"ENCODE_FOR_URI\": [\"conditionalOrExpression\"], \n\t     \"CONTAINS\": [\"conditionalOrExpression\"], \n\t     \"STRSTARTS\": [\"conditionalOrExpression\"], \n\t     \"STRENDS\": [\"conditionalOrExpression\"], \n\t     \"STRBEFORE\": [\"conditionalOrExpression\"], \n\t     \"STRAFTER\": [\"conditionalOrExpression\"], \n\t     \"YEAR\": [\"conditionalOrExpression\"], \n\t     \"MONTH\": [\"conditionalOrExpression\"], \n\t     \"DAY\": [\"conditionalOrExpression\"], \n\t     \"HOURS\": [\"conditionalOrExpression\"], \n\t     \"MINUTES\": [\"conditionalOrExpression\"], \n\t     \"SECONDS\": [\"conditionalOrExpression\"], \n\t     \"TIMEZONE\": [\"conditionalOrExpression\"], \n\t     \"TZ\": [\"conditionalOrExpression\"], \n\t     \"NOW\": [\"conditionalOrExpression\"], \n\t     \"UUID\": [\"conditionalOrExpression\"], \n\t     \"STRUUID\": [\"conditionalOrExpression\"], \n\t     \"MD5\": [\"conditionalOrExpression\"], \n\t     \"SHA1\": [\"conditionalOrExpression\"], \n\t     \"SHA256\": [\"conditionalOrExpression\"], \n\t     \"SHA384\": [\"conditionalOrExpression\"], \n\t     \"SHA512\": [\"conditionalOrExpression\"], \n\t     \"COALESCE\": [\"conditionalOrExpression\"], \n\t     \"IF\": [\"conditionalOrExpression\"], \n\t     \"STRLANG\": [\"conditionalOrExpression\"], \n\t     \"STRDT\": [\"conditionalOrExpression\"], \n\t     \"SAMETERM\": [\"conditionalOrExpression\"], \n\t     \"ISIRI\": [\"conditionalOrExpression\"], \n\t     \"ISURI\": [\"conditionalOrExpression\"], \n\t     \"ISBLANK\": [\"conditionalOrExpression\"], \n\t     \"ISLITERAL\": [\"conditionalOrExpression\"], \n\t     \"ISNUMERIC\": [\"conditionalOrExpression\"], \n\t     \"TRUE\": [\"conditionalOrExpression\"], \n\t     \"FALSE\": [\"conditionalOrExpression\"], \n\t     \"COUNT\": [\"conditionalOrExpression\"], \n\t     \"SUM\": [\"conditionalOrExpression\"], \n\t     \"MIN\": [\"conditionalOrExpression\"], \n\t     \"MAX\": [\"conditionalOrExpression\"], \n\t     \"AVG\": [\"conditionalOrExpression\"], \n\t     \"SAMPLE\": [\"conditionalOrExpression\"], \n\t     \"GROUP_CONCAT\": [\"conditionalOrExpression\"], \n\t     \"SUBSTR\": [\"conditionalOrExpression\"], \n\t     \"REPLACE\": [\"conditionalOrExpression\"], \n\t     \"REGEX\": [\"conditionalOrExpression\"], \n\t     \"EXISTS\": [\"conditionalOrExpression\"], \n\t     \"NOT\": [\"conditionalOrExpression\"], \n\t     \"IRI_REF\": [\"conditionalOrExpression\"], \n\t     \"STRING_LITERAL1\": [\"conditionalOrExpression\"], \n\t     \"STRING_LITERAL2\": [\"conditionalOrExpression\"], \n\t     \"STRING_LITERAL_LONG1\": [\"conditionalOrExpression\"], \n\t     \"STRING_LITERAL_LONG2\": [\"conditionalOrExpression\"], \n\t     \"INTEGER\": [\"conditionalOrExpression\"], \n\t     \"DECIMAL\": [\"conditionalOrExpression\"], \n\t     \"DOUBLE\": [\"conditionalOrExpression\"], \n\t     \"INTEGER_POSITIVE\": [\"conditionalOrExpression\"], \n\t     \"DECIMAL_POSITIVE\": [\"conditionalOrExpression\"], \n\t     \"DOUBLE_POSITIVE\": [\"conditionalOrExpression\"], \n\t     \"INTEGER_NEGATIVE\": [\"conditionalOrExpression\"], \n\t     \"DECIMAL_NEGATIVE\": [\"conditionalOrExpression\"], \n\t     \"DOUBLE_NEGATIVE\": [\"conditionalOrExpression\"], \n\t     \"PNAME_LN\": [\"conditionalOrExpression\"], \n\t     \"PNAME_NS\": [\"conditionalOrExpression\"]}, \n\t  \"expressionList\" : {\n\t     \"NIL\": [\"NIL\"], \n\t     \"(\": [\"(\",\"expression\",\"*[,,expression]\",\")\"]}, \n\t  \"filter\" : {\n\t     \"FILTER\": [\"FILTER\",\"constraint\"]}, \n\t  \"functionCall\" : {\n\t     \"IRI_REF\": [\"iriRef\",\"argList\"], \n\t     \"PNAME_LN\": [\"iriRef\",\"argList\"], \n\t     \"PNAME_NS\": [\"iriRef\",\"argList\"]}, \n\t  \"graphGraphPattern\" : {\n\t     \"GRAPH\": [\"GRAPH\",\"varOrIRIref\",\"groupGraphPattern\"]}, \n\t  \"graphNode\" : {\n\t     \"VAR1\": [\"varOrTerm\"], \n\t     \"VAR2\": [\"varOrTerm\"], \n\t     \"NIL\": [\"varOrTerm\"], \n\t     \"IRI_REF\": [\"varOrTerm\"], \n\t     \"TRUE\": [\"varOrTerm\"], \n\t     \"FALSE\": [\"varOrTerm\"], \n\t     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \n\t     \"ANON\": [\"varOrTerm\"], \n\t     \"PNAME_LN\": [\"varOrTerm\"], \n\t     \"PNAME_NS\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL1\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL2\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \n\t     \"INTEGER\": [\"varOrTerm\"], \n\t     \"DECIMAL\": [\"varOrTerm\"], \n\t     \"DOUBLE\": [\"varOrTerm\"], \n\t     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \n\t     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \n\t     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \n\t     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \n\t     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \n\t     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \n\t     \"(\": [\"triplesNode\"], \n\t     \"[\": [\"triplesNode\"]}, \n\t  \"graphNodePath\" : {\n\t     \"VAR1\": [\"varOrTerm\"], \n\t     \"VAR2\": [\"varOrTerm\"], \n\t     \"NIL\": [\"varOrTerm\"], \n\t     \"IRI_REF\": [\"varOrTerm\"], \n\t     \"TRUE\": [\"varOrTerm\"], \n\t     \"FALSE\": [\"varOrTerm\"], \n\t     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \n\t     \"ANON\": [\"varOrTerm\"], \n\t     \"PNAME_LN\": [\"varOrTerm\"], \n\t     \"PNAME_NS\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL1\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL2\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \n\t     \"INTEGER\": [\"varOrTerm\"], \n\t     \"DECIMAL\": [\"varOrTerm\"], \n\t     \"DOUBLE\": [\"varOrTerm\"], \n\t     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \n\t     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \n\t     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \n\t     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \n\t     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \n\t     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \n\t     \"(\": [\"triplesNodePath\"], \n\t     \"[\": [\"triplesNodePath\"]}, \n\t  \"graphOrDefault\" : {\n\t     \"DEFAULT\": [\"DEFAULT\"], \n\t     \"IRI_REF\": [\"?GRAPH\",\"iriRef\"], \n\t     \"PNAME_LN\": [\"?GRAPH\",\"iriRef\"], \n\t     \"PNAME_NS\": [\"?GRAPH\",\"iriRef\"], \n\t     \"GRAPH\": [\"?GRAPH\",\"iriRef\"]}, \n\t  \"graphPatternNotTriples\" : {\n\t     \"{\": [\"groupOrUnionGraphPattern\"], \n\t     \"OPTIONAL\": [\"optionalGraphPattern\"], \n\t     \"MINUS\": [\"minusGraphPattern\"], \n\t     \"GRAPH\": [\"graphGraphPattern\"], \n\t     \"SERVICE\": [\"serviceGraphPattern\"], \n\t     \"FILTER\": [\"filter\"], \n\t     \"BIND\": [\"bind\"], \n\t     \"VALUES\": [\"inlineData\"]}, \n\t  \"graphRef\" : {\n\t     \"GRAPH\": [\"GRAPH\",\"iriRef\"]}, \n\t  \"graphRefAll\" : {\n\t     \"GRAPH\": [\"graphRef\"], \n\t     \"DEFAULT\": [\"DEFAULT\"], \n\t     \"NAMED\": [\"NAMED\"], \n\t     \"ALL\": [\"ALL\"]}, \n\t  \"graphTerm\" : {\n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"], \n\t     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n\t     \"INTEGER\": [\"numericLiteral\"], \n\t     \"DECIMAL\": [\"numericLiteral\"], \n\t     \"DOUBLE\": [\"numericLiteral\"], \n\t     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n\t     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n\t     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n\t     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n\t     \"TRUE\": [\"booleanLiteral\"], \n\t     \"FALSE\": [\"booleanLiteral\"], \n\t     \"BLANK_NODE_LABEL\": [\"blankNode\"], \n\t     \"ANON\": [\"blankNode\"], \n\t     \"NIL\": [\"NIL\"]}, \n\t  \"groupClause\" : {\n\t     \"GROUP\": [\"GROUP\",\"BY\",\"+groupCondition\"]}, \n\t  \"groupCondition\" : {\n\t     \"STR\": [\"builtInCall\"], \n\t     \"LANG\": [\"builtInCall\"], \n\t     \"LANGMATCHES\": [\"builtInCall\"], \n\t     \"DATATYPE\": [\"builtInCall\"], \n\t     \"BOUND\": [\"builtInCall\"], \n\t     \"IRI\": [\"builtInCall\"], \n\t     \"URI\": [\"builtInCall\"], \n\t     \"BNODE\": [\"builtInCall\"], \n\t     \"RAND\": [\"builtInCall\"], \n\t     \"ABS\": [\"builtInCall\"], \n\t     \"CEIL\": [\"builtInCall\"], \n\t     \"FLOOR\": [\"builtInCall\"], \n\t     \"ROUND\": [\"builtInCall\"], \n\t     \"CONCAT\": [\"builtInCall\"], \n\t     \"STRLEN\": [\"builtInCall\"], \n\t     \"UCASE\": [\"builtInCall\"], \n\t     \"LCASE\": [\"builtInCall\"], \n\t     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n\t     \"CONTAINS\": [\"builtInCall\"], \n\t     \"STRSTARTS\": [\"builtInCall\"], \n\t     \"STRENDS\": [\"builtInCall\"], \n\t     \"STRBEFORE\": [\"builtInCall\"], \n\t     \"STRAFTER\": [\"builtInCall\"], \n\t     \"YEAR\": [\"builtInCall\"], \n\t     \"MONTH\": [\"builtInCall\"], \n\t     \"DAY\": [\"builtInCall\"], \n\t     \"HOURS\": [\"builtInCall\"], \n\t     \"MINUTES\": [\"builtInCall\"], \n\t     \"SECONDS\": [\"builtInCall\"], \n\t     \"TIMEZONE\": [\"builtInCall\"], \n\t     \"TZ\": [\"builtInCall\"], \n\t     \"NOW\": [\"builtInCall\"], \n\t     \"UUID\": [\"builtInCall\"], \n\t     \"STRUUID\": [\"builtInCall\"], \n\t     \"MD5\": [\"builtInCall\"], \n\t     \"SHA1\": [\"builtInCall\"], \n\t     \"SHA256\": [\"builtInCall\"], \n\t     \"SHA384\": [\"builtInCall\"], \n\t     \"SHA512\": [\"builtInCall\"], \n\t     \"COALESCE\": [\"builtInCall\"], \n\t     \"IF\": [\"builtInCall\"], \n\t     \"STRLANG\": [\"builtInCall\"], \n\t     \"STRDT\": [\"builtInCall\"], \n\t     \"SAMETERM\": [\"builtInCall\"], \n\t     \"ISIRI\": [\"builtInCall\"], \n\t     \"ISURI\": [\"builtInCall\"], \n\t     \"ISBLANK\": [\"builtInCall\"], \n\t     \"ISLITERAL\": [\"builtInCall\"], \n\t     \"ISNUMERIC\": [\"builtInCall\"], \n\t     \"SUBSTR\": [\"builtInCall\"], \n\t     \"REPLACE\": [\"builtInCall\"], \n\t     \"REGEX\": [\"builtInCall\"], \n\t     \"EXISTS\": [\"builtInCall\"], \n\t     \"NOT\": [\"builtInCall\"], \n\t     \"IRI_REF\": [\"functionCall\"], \n\t     \"PNAME_LN\": [\"functionCall\"], \n\t     \"PNAME_NS\": [\"functionCall\"], \n\t     \"(\": [\"(\",\"expression\",\"?[AS,var]\",\")\"], \n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"]}, \n\t  \"groupGraphPattern\" : {\n\t     \"{\": [\"{\",\"or([subSelect,groupGraphPatternSub])\",\"}\"]}, \n\t  \"groupGraphPatternSub\" : {\n\t     \"{\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"OPTIONAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"MINUS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"GRAPH\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"SERVICE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"FILTER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"BIND\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"VALUES\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"VAR1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"VAR2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"NIL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"(\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"[\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"IRI_REF\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"TRUE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"FALSE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"BLANK_NODE_LABEL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"ANON\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"PNAME_LN\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"PNAME_NS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"STRING_LITERAL1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"STRING_LITERAL2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"INTEGER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"DECIMAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"DOUBLE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"INTEGER_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"DECIMAL_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"DOUBLE_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"INTEGER_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"}\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"]}, \n\t  \"groupOrUnionGraphPattern\" : {\n\t     \"{\": [\"groupGraphPattern\",\"*[UNION,groupGraphPattern]\"]}, \n\t  \"havingClause\" : {\n\t     \"HAVING\": [\"HAVING\",\"+havingCondition\"]}, \n\t  \"havingCondition\" : {\n\t     \"(\": [\"constraint\"], \n\t     \"STR\": [\"constraint\"], \n\t     \"LANG\": [\"constraint\"], \n\t     \"LANGMATCHES\": [\"constraint\"], \n\t     \"DATATYPE\": [\"constraint\"], \n\t     \"BOUND\": [\"constraint\"], \n\t     \"IRI\": [\"constraint\"], \n\t     \"URI\": [\"constraint\"], \n\t     \"BNODE\": [\"constraint\"], \n\t     \"RAND\": [\"constraint\"], \n\t     \"ABS\": [\"constraint\"], \n\t     \"CEIL\": [\"constraint\"], \n\t     \"FLOOR\": [\"constraint\"], \n\t     \"ROUND\": [\"constraint\"], \n\t     \"CONCAT\": [\"constraint\"], \n\t     \"STRLEN\": [\"constraint\"], \n\t     \"UCASE\": [\"constraint\"], \n\t     \"LCASE\": [\"constraint\"], \n\t     \"ENCODE_FOR_URI\": [\"constraint\"], \n\t     \"CONTAINS\": [\"constraint\"], \n\t     \"STRSTARTS\": [\"constraint\"], \n\t     \"STRENDS\": [\"constraint\"], \n\t     \"STRBEFORE\": [\"constraint\"], \n\t     \"STRAFTER\": [\"constraint\"], \n\t     \"YEAR\": [\"constraint\"], \n\t     \"MONTH\": [\"constraint\"], \n\t     \"DAY\": [\"constraint\"], \n\t     \"HOURS\": [\"constraint\"], \n\t     \"MINUTES\": [\"constraint\"], \n\t     \"SECONDS\": [\"constraint\"], \n\t     \"TIMEZONE\": [\"constraint\"], \n\t     \"TZ\": [\"constraint\"], \n\t     \"NOW\": [\"constraint\"], \n\t     \"UUID\": [\"constraint\"], \n\t     \"STRUUID\": [\"constraint\"], \n\t     \"MD5\": [\"constraint\"], \n\t     \"SHA1\": [\"constraint\"], \n\t     \"SHA256\": [\"constraint\"], \n\t     \"SHA384\": [\"constraint\"], \n\t     \"SHA512\": [\"constraint\"], \n\t     \"COALESCE\": [\"constraint\"], \n\t     \"IF\": [\"constraint\"], \n\t     \"STRLANG\": [\"constraint\"], \n\t     \"STRDT\": [\"constraint\"], \n\t     \"SAMETERM\": [\"constraint\"], \n\t     \"ISIRI\": [\"constraint\"], \n\t     \"ISURI\": [\"constraint\"], \n\t     \"ISBLANK\": [\"constraint\"], \n\t     \"ISLITERAL\": [\"constraint\"], \n\t     \"ISNUMERIC\": [\"constraint\"], \n\t     \"SUBSTR\": [\"constraint\"], \n\t     \"REPLACE\": [\"constraint\"], \n\t     \"REGEX\": [\"constraint\"], \n\t     \"EXISTS\": [\"constraint\"], \n\t     \"NOT\": [\"constraint\"], \n\t     \"IRI_REF\": [\"constraint\"], \n\t     \"PNAME_LN\": [\"constraint\"], \n\t     \"PNAME_NS\": [\"constraint\"]}, \n\t  \"inlineData\" : {\n\t     \"VALUES\": [\"VALUES\",\"dataBlock\"]}, \n\t  \"inlineDataFull\" : {\n\t     \"NIL\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"], \n\t     \"(\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"]}, \n\t  \"inlineDataOneVar\" : {\n\t     \"VAR1\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"], \n\t     \"VAR2\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"]}, \n\t  \"insert1\" : {\n\t     \"DATA\": [\"DATA\",\"quadData\"], \n\t     \"{\": [\"quadPattern\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \n\t  \"insertClause\" : {\n\t     \"INSERT\": [\"INSERT\",\"quadPattern\"]}, \n\t  \"integer\" : {\n\t     \"INTEGER\": [\"INTEGER\"]}, \n\t  \"iriRef\" : {\n\t     \"IRI_REF\": [\"IRI_REF\"], \n\t     \"PNAME_LN\": [\"prefixedName\"], \n\t     \"PNAME_NS\": [\"prefixedName\"]}, \n\t  \"iriRefOrFunction\" : {\n\t     \"IRI_REF\": [\"iriRef\",\"?argList\"], \n\t     \"PNAME_LN\": [\"iriRef\",\"?argList\"], \n\t     \"PNAME_NS\": [\"iriRef\",\"?argList\"]}, \n\t  \"limitClause\" : {\n\t     \"LIMIT\": [\"LIMIT\",\"INTEGER\"]}, \n\t  \"limitOffsetClauses\" : {\n\t     \"LIMIT\": [\"limitClause\",\"?offsetClause\"], \n\t     \"OFFSET\": [\"offsetClause\",\"?limitClause\"]}, \n\t  \"load\" : {\n\t     \"LOAD\": [\"LOAD\",\"?SILENT_1\",\"iriRef\",\"?[INTO,graphRef]\"]}, \n\t  \"minusGraphPattern\" : {\n\t     \"MINUS\": [\"MINUS\",\"groupGraphPattern\"]}, \n\t  \"modify\" : {\n\t     \"WITH\": [\"WITH\",\"iriRef\",\"or([[deleteClause,?insertClause],insertClause])\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \n\t  \"move\" : {\n\t     \"MOVE\": [\"MOVE\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \n\t  \"multiplicativeExpression\" : {\n\t     \"!\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"+\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"-\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"VAR1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"VAR2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"(\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"LANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"LANGMATCHES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DATATYPE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"BOUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"IRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"BNODE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"RAND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ABS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"CEIL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"FLOOR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ROUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRLEN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"UCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"LCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ENCODE_FOR_URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"CONTAINS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRSTARTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRENDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRBEFORE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRAFTER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"YEAR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"MONTH\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DAY\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"HOURS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"MINUTES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SECONDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"TIMEZONE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"TZ\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"NOW\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"UUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRUUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"MD5\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SHA1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SHA256\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SHA384\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SHA512\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"COALESCE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"IF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRLANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRDT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SAMETERM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ISIRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ISURI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ISBLANK\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ISLITERAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ISNUMERIC\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"TRUE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"FALSE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"COUNT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SUM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"MIN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"MAX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"AVG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SAMPLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"GROUP_CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SUBSTR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"REPLACE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"REGEX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"EXISTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"NOT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"IRI_REF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRING_LITERAL1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRING_LITERAL2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRING_LITERAL_LONG1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRING_LITERAL_LONG2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"INTEGER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DECIMAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DOUBLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"INTEGER_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DECIMAL_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DOUBLE_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"INTEGER_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DECIMAL_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DOUBLE_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"PNAME_LN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"PNAME_NS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"]}, \n\t  \"namedGraphClause\" : {\n\t     \"NAMED\": [\"NAMED\",\"sourceSelector\"]}, \n\t  \"notExistsFunc\" : {\n\t     \"NOT\": [\"NOT\",\"EXISTS\",\"groupGraphPattern\"]}, \n\t  \"numericExpression\" : {\n\t     \"!\": [\"additiveExpression\"], \n\t     \"+\": [\"additiveExpression\"], \n\t     \"-\": [\"additiveExpression\"], \n\t     \"VAR1\": [\"additiveExpression\"], \n\t     \"VAR2\": [\"additiveExpression\"], \n\t     \"(\": [\"additiveExpression\"], \n\t     \"STR\": [\"additiveExpression\"], \n\t     \"LANG\": [\"additiveExpression\"], \n\t     \"LANGMATCHES\": [\"additiveExpression\"], \n\t     \"DATATYPE\": [\"additiveExpression\"], \n\t     \"BOUND\": [\"additiveExpression\"], \n\t     \"IRI\": [\"additiveExpression\"], \n\t     \"URI\": [\"additiveExpression\"], \n\t     \"BNODE\": [\"additiveExpression\"], \n\t     \"RAND\": [\"additiveExpression\"], \n\t     \"ABS\": [\"additiveExpression\"], \n\t     \"CEIL\": [\"additiveExpression\"], \n\t     \"FLOOR\": [\"additiveExpression\"], \n\t     \"ROUND\": [\"additiveExpression\"], \n\t     \"CONCAT\": [\"additiveExpression\"], \n\t     \"STRLEN\": [\"additiveExpression\"], \n\t     \"UCASE\": [\"additiveExpression\"], \n\t     \"LCASE\": [\"additiveExpression\"], \n\t     \"ENCODE_FOR_URI\": [\"additiveExpression\"], \n\t     \"CONTAINS\": [\"additiveExpression\"], \n\t     \"STRSTARTS\": [\"additiveExpression\"], \n\t     \"STRENDS\": [\"additiveExpression\"], \n\t     \"STRBEFORE\": [\"additiveExpression\"], \n\t     \"STRAFTER\": [\"additiveExpression\"], \n\t     \"YEAR\": [\"additiveExpression\"], \n\t     \"MONTH\": [\"additiveExpression\"], \n\t     \"DAY\": [\"additiveExpression\"], \n\t     \"HOURS\": [\"additiveExpression\"], \n\t     \"MINUTES\": [\"additiveExpression\"], \n\t     \"SECONDS\": [\"additiveExpression\"], \n\t     \"TIMEZONE\": [\"additiveExpression\"], \n\t     \"TZ\": [\"additiveExpression\"], \n\t     \"NOW\": [\"additiveExpression\"], \n\t     \"UUID\": [\"additiveExpression\"], \n\t     \"STRUUID\": [\"additiveExpression\"], \n\t     \"MD5\": [\"additiveExpression\"], \n\t     \"SHA1\": [\"additiveExpression\"], \n\t     \"SHA256\": [\"additiveExpression\"], \n\t     \"SHA384\": [\"additiveExpression\"], \n\t     \"SHA512\": [\"additiveExpression\"], \n\t     \"COALESCE\": [\"additiveExpression\"], \n\t     \"IF\": [\"additiveExpression\"], \n\t     \"STRLANG\": [\"additiveExpression\"], \n\t     \"STRDT\": [\"additiveExpression\"], \n\t     \"SAMETERM\": [\"additiveExpression\"], \n\t     \"ISIRI\": [\"additiveExpression\"], \n\t     \"ISURI\": [\"additiveExpression\"], \n\t     \"ISBLANK\": [\"additiveExpression\"], \n\t     \"ISLITERAL\": [\"additiveExpression\"], \n\t     \"ISNUMERIC\": [\"additiveExpression\"], \n\t     \"TRUE\": [\"additiveExpression\"], \n\t     \"FALSE\": [\"additiveExpression\"], \n\t     \"COUNT\": [\"additiveExpression\"], \n\t     \"SUM\": [\"additiveExpression\"], \n\t     \"MIN\": [\"additiveExpression\"], \n\t     \"MAX\": [\"additiveExpression\"], \n\t     \"AVG\": [\"additiveExpression\"], \n\t     \"SAMPLE\": [\"additiveExpression\"], \n\t     \"GROUP_CONCAT\": [\"additiveExpression\"], \n\t     \"SUBSTR\": [\"additiveExpression\"], \n\t     \"REPLACE\": [\"additiveExpression\"], \n\t     \"REGEX\": [\"additiveExpression\"], \n\t     \"EXISTS\": [\"additiveExpression\"], \n\t     \"NOT\": [\"additiveExpression\"], \n\t     \"IRI_REF\": [\"additiveExpression\"], \n\t     \"STRING_LITERAL1\": [\"additiveExpression\"], \n\t     \"STRING_LITERAL2\": [\"additiveExpression\"], \n\t     \"STRING_LITERAL_LONG1\": [\"additiveExpression\"], \n\t     \"STRING_LITERAL_LONG2\": [\"additiveExpression\"], \n\t     \"INTEGER\": [\"additiveExpression\"], \n\t     \"DECIMAL\": [\"additiveExpression\"], \n\t     \"DOUBLE\": [\"additiveExpression\"], \n\t     \"INTEGER_POSITIVE\": [\"additiveExpression\"], \n\t     \"DECIMAL_POSITIVE\": [\"additiveExpression\"], \n\t     \"DOUBLE_POSITIVE\": [\"additiveExpression\"], \n\t     \"INTEGER_NEGATIVE\": [\"additiveExpression\"], \n\t     \"DECIMAL_NEGATIVE\": [\"additiveExpression\"], \n\t     \"DOUBLE_NEGATIVE\": [\"additiveExpression\"], \n\t     \"PNAME_LN\": [\"additiveExpression\"], \n\t     \"PNAME_NS\": [\"additiveExpression\"]}, \n\t  \"numericLiteral\" : {\n\t     \"INTEGER\": [\"numericLiteralUnsigned\"], \n\t     \"DECIMAL\": [\"numericLiteralUnsigned\"], \n\t     \"DOUBLE\": [\"numericLiteralUnsigned\"], \n\t     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \n\t     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \n\t     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \n\t     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \n\t  \"numericLiteralNegative\" : {\n\t     \"INTEGER_NEGATIVE\": [\"INTEGER_NEGATIVE\"], \n\t     \"DECIMAL_NEGATIVE\": [\"DECIMAL_NEGATIVE\"], \n\t     \"DOUBLE_NEGATIVE\": [\"DOUBLE_NEGATIVE\"]}, \n\t  \"numericLiteralPositive\" : {\n\t     \"INTEGER_POSITIVE\": [\"INTEGER_POSITIVE\"], \n\t     \"DECIMAL_POSITIVE\": [\"DECIMAL_POSITIVE\"], \n\t     \"DOUBLE_POSITIVE\": [\"DOUBLE_POSITIVE\"]}, \n\t  \"numericLiteralUnsigned\" : {\n\t     \"INTEGER\": [\"INTEGER\"], \n\t     \"DECIMAL\": [\"DECIMAL\"], \n\t     \"DOUBLE\": [\"DOUBLE\"]}, \n\t  \"object\" : {\n\t     \"(\": [\"graphNode\"], \n\t     \"[\": [\"graphNode\"], \n\t     \"VAR1\": [\"graphNode\"], \n\t     \"VAR2\": [\"graphNode\"], \n\t     \"NIL\": [\"graphNode\"], \n\t     \"IRI_REF\": [\"graphNode\"], \n\t     \"TRUE\": [\"graphNode\"], \n\t     \"FALSE\": [\"graphNode\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphNode\"], \n\t     \"ANON\": [\"graphNode\"], \n\t     \"PNAME_LN\": [\"graphNode\"], \n\t     \"PNAME_NS\": [\"graphNode\"], \n\t     \"STRING_LITERAL1\": [\"graphNode\"], \n\t     \"STRING_LITERAL2\": [\"graphNode\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphNode\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphNode\"], \n\t     \"INTEGER\": [\"graphNode\"], \n\t     \"DECIMAL\": [\"graphNode\"], \n\t     \"DOUBLE\": [\"graphNode\"], \n\t     \"INTEGER_POSITIVE\": [\"graphNode\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphNode\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphNode\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphNode\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphNode\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphNode\"]}, \n\t  \"objectList\" : {\n\t     \"(\": [\"object\",\"*[,,object]\"], \n\t     \"[\": [\"object\",\"*[,,object]\"], \n\t     \"VAR1\": [\"object\",\"*[,,object]\"], \n\t     \"VAR2\": [\"object\",\"*[,,object]\"], \n\t     \"NIL\": [\"object\",\"*[,,object]\"], \n\t     \"IRI_REF\": [\"object\",\"*[,,object]\"], \n\t     \"TRUE\": [\"object\",\"*[,,object]\"], \n\t     \"FALSE\": [\"object\",\"*[,,object]\"], \n\t     \"BLANK_NODE_LABEL\": [\"object\",\"*[,,object]\"], \n\t     \"ANON\": [\"object\",\"*[,,object]\"], \n\t     \"PNAME_LN\": [\"object\",\"*[,,object]\"], \n\t     \"PNAME_NS\": [\"object\",\"*[,,object]\"], \n\t     \"STRING_LITERAL1\": [\"object\",\"*[,,object]\"], \n\t     \"STRING_LITERAL2\": [\"object\",\"*[,,object]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"object\",\"*[,,object]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"object\",\"*[,,object]\"], \n\t     \"INTEGER\": [\"object\",\"*[,,object]\"], \n\t     \"DECIMAL\": [\"object\",\"*[,,object]\"], \n\t     \"DOUBLE\": [\"object\",\"*[,,object]\"], \n\t     \"INTEGER_POSITIVE\": [\"object\",\"*[,,object]\"], \n\t     \"DECIMAL_POSITIVE\": [\"object\",\"*[,,object]\"], \n\t     \"DOUBLE_POSITIVE\": [\"object\",\"*[,,object]\"], \n\t     \"INTEGER_NEGATIVE\": [\"object\",\"*[,,object]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"object\",\"*[,,object]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"object\",\"*[,,object]\"]}, \n\t  \"objectListPath\" : {\n\t     \"(\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"[\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"VAR1\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"VAR2\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"NIL\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"IRI_REF\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"TRUE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"FALSE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"BLANK_NODE_LABEL\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"ANON\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"PNAME_LN\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"PNAME_NS\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"STRING_LITERAL1\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"STRING_LITERAL2\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"INTEGER\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"DECIMAL\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"DOUBLE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"INTEGER_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"DECIMAL_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"DOUBLE_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"INTEGER_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"]}, \n\t  \"objectPath\" : {\n\t     \"(\": [\"graphNodePath\"], \n\t     \"[\": [\"graphNodePath\"], \n\t     \"VAR1\": [\"graphNodePath\"], \n\t     \"VAR2\": [\"graphNodePath\"], \n\t     \"NIL\": [\"graphNodePath\"], \n\t     \"IRI_REF\": [\"graphNodePath\"], \n\t     \"TRUE\": [\"graphNodePath\"], \n\t     \"FALSE\": [\"graphNodePath\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphNodePath\"], \n\t     \"ANON\": [\"graphNodePath\"], \n\t     \"PNAME_LN\": [\"graphNodePath\"], \n\t     \"PNAME_NS\": [\"graphNodePath\"], \n\t     \"STRING_LITERAL1\": [\"graphNodePath\"], \n\t     \"STRING_LITERAL2\": [\"graphNodePath\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphNodePath\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphNodePath\"], \n\t     \"INTEGER\": [\"graphNodePath\"], \n\t     \"DECIMAL\": [\"graphNodePath\"], \n\t     \"DOUBLE\": [\"graphNodePath\"], \n\t     \"INTEGER_POSITIVE\": [\"graphNodePath\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphNodePath\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphNodePath\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphNodePath\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphNodePath\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphNodePath\"]}, \n\t  \"offsetClause\" : {\n\t     \"OFFSET\": [\"OFFSET\",\"INTEGER\"]}, \n\t  \"optionalGraphPattern\" : {\n\t     \"OPTIONAL\": [\"OPTIONAL\",\"groupGraphPattern\"]}, \n\t  \"or([*,expression])\" : {\n\t     \"*\": [\"*\"], \n\t     \"!\": [\"expression\"], \n\t     \"+\": [\"expression\"], \n\t     \"-\": [\"expression\"], \n\t     \"VAR1\": [\"expression\"], \n\t     \"VAR2\": [\"expression\"], \n\t     \"(\": [\"expression\"], \n\t     \"STR\": [\"expression\"], \n\t     \"LANG\": [\"expression\"], \n\t     \"LANGMATCHES\": [\"expression\"], \n\t     \"DATATYPE\": [\"expression\"], \n\t     \"BOUND\": [\"expression\"], \n\t     \"IRI\": [\"expression\"], \n\t     \"URI\": [\"expression\"], \n\t     \"BNODE\": [\"expression\"], \n\t     \"RAND\": [\"expression\"], \n\t     \"ABS\": [\"expression\"], \n\t     \"CEIL\": [\"expression\"], \n\t     \"FLOOR\": [\"expression\"], \n\t     \"ROUND\": [\"expression\"], \n\t     \"CONCAT\": [\"expression\"], \n\t     \"STRLEN\": [\"expression\"], \n\t     \"UCASE\": [\"expression\"], \n\t     \"LCASE\": [\"expression\"], \n\t     \"ENCODE_FOR_URI\": [\"expression\"], \n\t     \"CONTAINS\": [\"expression\"], \n\t     \"STRSTARTS\": [\"expression\"], \n\t     \"STRENDS\": [\"expression\"], \n\t     \"STRBEFORE\": [\"expression\"], \n\t     \"STRAFTER\": [\"expression\"], \n\t     \"YEAR\": [\"expression\"], \n\t     \"MONTH\": [\"expression\"], \n\t     \"DAY\": [\"expression\"], \n\t     \"HOURS\": [\"expression\"], \n\t     \"MINUTES\": [\"expression\"], \n\t     \"SECONDS\": [\"expression\"], \n\t     \"TIMEZONE\": [\"expression\"], \n\t     \"TZ\": [\"expression\"], \n\t     \"NOW\": [\"expression\"], \n\t     \"UUID\": [\"expression\"], \n\t     \"STRUUID\": [\"expression\"], \n\t     \"MD5\": [\"expression\"], \n\t     \"SHA1\": [\"expression\"], \n\t     \"SHA256\": [\"expression\"], \n\t     \"SHA384\": [\"expression\"], \n\t     \"SHA512\": [\"expression\"], \n\t     \"COALESCE\": [\"expression\"], \n\t     \"IF\": [\"expression\"], \n\t     \"STRLANG\": [\"expression\"], \n\t     \"STRDT\": [\"expression\"], \n\t     \"SAMETERM\": [\"expression\"], \n\t     \"ISIRI\": [\"expression\"], \n\t     \"ISURI\": [\"expression\"], \n\t     \"ISBLANK\": [\"expression\"], \n\t     \"ISLITERAL\": [\"expression\"], \n\t     \"ISNUMERIC\": [\"expression\"], \n\t     \"TRUE\": [\"expression\"], \n\t     \"FALSE\": [\"expression\"], \n\t     \"COUNT\": [\"expression\"], \n\t     \"SUM\": [\"expression\"], \n\t     \"MIN\": [\"expression\"], \n\t     \"MAX\": [\"expression\"], \n\t     \"AVG\": [\"expression\"], \n\t     \"SAMPLE\": [\"expression\"], \n\t     \"GROUP_CONCAT\": [\"expression\"], \n\t     \"SUBSTR\": [\"expression\"], \n\t     \"REPLACE\": [\"expression\"], \n\t     \"REGEX\": [\"expression\"], \n\t     \"EXISTS\": [\"expression\"], \n\t     \"NOT\": [\"expression\"], \n\t     \"IRI_REF\": [\"expression\"], \n\t     \"STRING_LITERAL1\": [\"expression\"], \n\t     \"STRING_LITERAL2\": [\"expression\"], \n\t     \"STRING_LITERAL_LONG1\": [\"expression\"], \n\t     \"STRING_LITERAL_LONG2\": [\"expression\"], \n\t     \"INTEGER\": [\"expression\"], \n\t     \"DECIMAL\": [\"expression\"], \n\t     \"DOUBLE\": [\"expression\"], \n\t     \"INTEGER_POSITIVE\": [\"expression\"], \n\t     \"DECIMAL_POSITIVE\": [\"expression\"], \n\t     \"DOUBLE_POSITIVE\": [\"expression\"], \n\t     \"INTEGER_NEGATIVE\": [\"expression\"], \n\t     \"DECIMAL_NEGATIVE\": [\"expression\"], \n\t     \"DOUBLE_NEGATIVE\": [\"expression\"], \n\t     \"PNAME_LN\": [\"expression\"], \n\t     \"PNAME_NS\": [\"expression\"]}, \n\t  \"or([+or([var,[ (,expression,AS,var,)]]),*])\" : {\n\t     \"(\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n\t     \"VAR1\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n\t     \"VAR2\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n\t     \"*\": [\"*\"]}, \n\t  \"or([+varOrIRIref,*])\" : {\n\t     \"VAR1\": [\"+varOrIRIref\"], \n\t     \"VAR2\": [\"+varOrIRIref\"], \n\t     \"IRI_REF\": [\"+varOrIRIref\"], \n\t     \"PNAME_LN\": [\"+varOrIRIref\"], \n\t     \"PNAME_NS\": [\"+varOrIRIref\"], \n\t     \"*\": [\"*\"]}, \n\t  \"or([ASC,DESC])\" : {\n\t     \"ASC\": [\"ASC\"], \n\t     \"DESC\": [\"DESC\"]}, \n\t  \"or([DISTINCT,REDUCED])\" : {\n\t     \"DISTINCT\": [\"DISTINCT\"], \n\t     \"REDUCED\": [\"REDUCED\"]}, \n\t  \"or([LANGTAG,[^^,iriRef]])\" : {\n\t     \"LANGTAG\": [\"LANGTAG\"], \n\t     \"^^\": [\"[^^,iriRef]\"]}, \n\t  \"or([NIL,[ (,*var,)]])\" : {\n\t     \"NIL\": [\"NIL\"], \n\t     \"(\": [\"[ (,*var,)]\"]}, \n\t  \"or([[ (,*dataBlockValue,)],NIL])\" : {\n\t     \"(\": [\"[ (,*dataBlockValue,)]\"], \n\t     \"NIL\": [\"NIL\"]}, \n\t  \"or([[ (,expression,)],NIL])\" : {\n\t     \"(\": [\"[ (,expression,)]\"], \n\t     \"NIL\": [\"NIL\"]}, \n\t  \"or([[*,unaryExpression],[/,unaryExpression]])\" : {\n\t     \"*\": [\"[*,unaryExpression]\"], \n\t     \"/\": [\"[/,unaryExpression]\"]}, \n\t  \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\n\t     \"+\": [\"[+,multiplicativeExpression]\"], \n\t     \"-\": [\"[-,multiplicativeExpression]\"], \n\t     \"INTEGER_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n\t     \"DECIMAL_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n\t     \"DOUBLE_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n\t     \"INTEGER_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"]}, \n\t  \"or([[,,or([},[integer,}]])],}])\" : {\n\t     \",\": [\"[,,or([},[integer,}]])]\"], \n\t     \"}\": [\"}\"]}, \n\t  \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\n\t     \"=\": [\"[=,numericExpression]\"], \n\t     \"!=\": [\"[!=,numericExpression]\"], \n\t     \"<\": [\"[<,numericExpression]\"], \n\t     \">\": [\"[>,numericExpression]\"], \n\t     \"<=\": [\"[<=,numericExpression]\"], \n\t     \">=\": [\"[>=,numericExpression]\"], \n\t     \"IN\": [\"[IN,expressionList]\"], \n\t     \"NOT\": [\"[NOT,IN,expressionList]\"]}, \n\t  \"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\" : {\n\t     \"{\": [\"[constructTemplate,*datasetClause,whereClause,solutionModifier]\"], \n\t     \"WHERE\": [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"], \n\t     \"FROM\": [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"]}, \n\t  \"or([[deleteClause,?insertClause],insertClause])\" : {\n\t     \"DELETE\": [\"[deleteClause,?insertClause]\"], \n\t     \"INSERT\": [\"insertClause\"]}, \n\t  \"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\" : {\n\t     \"INTEGER\": [\"[integer,or([[,,or([},[integer,}]])],}])]\"], \n\t     \",\": [\"[,,integer,}]\"]}, \n\t  \"or([defaultGraphClause,namedGraphClause])\" : {\n\t     \"IRI_REF\": [\"defaultGraphClause\"], \n\t     \"PNAME_LN\": [\"defaultGraphClause\"], \n\t     \"PNAME_NS\": [\"defaultGraphClause\"], \n\t     \"NAMED\": [\"namedGraphClause\"]}, \n\t  \"or([inlineDataOneVar,inlineDataFull])\" : {\n\t     \"VAR1\": [\"inlineDataOneVar\"], \n\t     \"VAR2\": [\"inlineDataOneVar\"], \n\t     \"NIL\": [\"inlineDataFull\"], \n\t     \"(\": [\"inlineDataFull\"]}, \n\t  \"or([iriRef,[NAMED,iriRef]])\" : {\n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"], \n\t     \"NAMED\": [\"[NAMED,iriRef]\"]}, \n\t  \"or([iriRef,a])\" : {\n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"], \n\t     \"a\": [\"a\"]}, \n\t  \"or([numericLiteralPositive,numericLiteralNegative])\" : {\n\t     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \n\t     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \n\t     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \n\t     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \n\t  \"or([queryAll,updateAll])\" : {\n\t     \"CONSTRUCT\": [\"queryAll\"], \n\t     \"DESCRIBE\": [\"queryAll\"], \n\t     \"ASK\": [\"queryAll\"], \n\t     \"SELECT\": [\"queryAll\"], \n\t     \"INSERT\": [\"updateAll\"], \n\t     \"DELETE\": [\"updateAll\"], \n\t     \"LOAD\": [\"updateAll\"], \n\t     \"CLEAR\": [\"updateAll\"], \n\t     \"DROP\": [\"updateAll\"], \n\t     \"ADD\": [\"updateAll\"], \n\t     \"MOVE\": [\"updateAll\"], \n\t     \"COPY\": [\"updateAll\"], \n\t     \"CREATE\": [\"updateAll\"], \n\t     \"WITH\": [\"updateAll\"], \n\t     \"$\": [\"updateAll\"]}, \n\t  \"or([selectQuery,constructQuery,describeQuery,askQuery])\" : {\n\t     \"SELECT\": [\"selectQuery\"], \n\t     \"CONSTRUCT\": [\"constructQuery\"], \n\t     \"DESCRIBE\": [\"describeQuery\"], \n\t     \"ASK\": [\"askQuery\"]}, \n\t  \"or([subSelect,groupGraphPatternSub])\" : {\n\t     \"SELECT\": [\"subSelect\"], \n\t     \"{\": [\"groupGraphPatternSub\"], \n\t     \"OPTIONAL\": [\"groupGraphPatternSub\"], \n\t     \"MINUS\": [\"groupGraphPatternSub\"], \n\t     \"GRAPH\": [\"groupGraphPatternSub\"], \n\t     \"SERVICE\": [\"groupGraphPatternSub\"], \n\t     \"FILTER\": [\"groupGraphPatternSub\"], \n\t     \"BIND\": [\"groupGraphPatternSub\"], \n\t     \"VALUES\": [\"groupGraphPatternSub\"], \n\t     \"VAR1\": [\"groupGraphPatternSub\"], \n\t     \"VAR2\": [\"groupGraphPatternSub\"], \n\t     \"NIL\": [\"groupGraphPatternSub\"], \n\t     \"(\": [\"groupGraphPatternSub\"], \n\t     \"[\": [\"groupGraphPatternSub\"], \n\t     \"IRI_REF\": [\"groupGraphPatternSub\"], \n\t     \"TRUE\": [\"groupGraphPatternSub\"], \n\t     \"FALSE\": [\"groupGraphPatternSub\"], \n\t     \"BLANK_NODE_LABEL\": [\"groupGraphPatternSub\"], \n\t     \"ANON\": [\"groupGraphPatternSub\"], \n\t     \"PNAME_LN\": [\"groupGraphPatternSub\"], \n\t     \"PNAME_NS\": [\"groupGraphPatternSub\"], \n\t     \"STRING_LITERAL1\": [\"groupGraphPatternSub\"], \n\t     \"STRING_LITERAL2\": [\"groupGraphPatternSub\"], \n\t     \"STRING_LITERAL_LONG1\": [\"groupGraphPatternSub\"], \n\t     \"STRING_LITERAL_LONG2\": [\"groupGraphPatternSub\"], \n\t     \"INTEGER\": [\"groupGraphPatternSub\"], \n\t     \"DECIMAL\": [\"groupGraphPatternSub\"], \n\t     \"DOUBLE\": [\"groupGraphPatternSub\"], \n\t     \"INTEGER_POSITIVE\": [\"groupGraphPatternSub\"], \n\t     \"DECIMAL_POSITIVE\": [\"groupGraphPatternSub\"], \n\t     \"DOUBLE_POSITIVE\": [\"groupGraphPatternSub\"], \n\t     \"INTEGER_NEGATIVE\": [\"groupGraphPatternSub\"], \n\t     \"DECIMAL_NEGATIVE\": [\"groupGraphPatternSub\"], \n\t     \"DOUBLE_NEGATIVE\": [\"groupGraphPatternSub\"], \n\t     \"}\": [\"groupGraphPatternSub\"]}, \n\t  \"or([var,[ (,expression,AS,var,)]])\" : {\n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"], \n\t     \"(\": [\"[ (,expression,AS,var,)]\"]}, \n\t  \"or([verbPath,verbSimple])\" : {\n\t     \"^\": [\"verbPath\"], \n\t     \"a\": [\"verbPath\"], \n\t     \"!\": [\"verbPath\"], \n\t     \"(\": [\"verbPath\"], \n\t     \"IRI_REF\": [\"verbPath\"], \n\t     \"PNAME_LN\": [\"verbPath\"], \n\t     \"PNAME_NS\": [\"verbPath\"], \n\t     \"VAR1\": [\"verbSimple\"], \n\t     \"VAR2\": [\"verbSimple\"]}, \n\t  \"or([},[integer,}]])\" : {\n\t     \"}\": [\"}\"], \n\t     \"INTEGER\": [\"[integer,}]\"]}, \n\t  \"orderClause\" : {\n\t     \"ORDER\": [\"ORDER\",\"BY\",\"+orderCondition\"]}, \n\t  \"orderCondition\" : {\n\t     \"ASC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \n\t     \"DESC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \n\t     \"(\": [\"constraint\"], \n\t     \"STR\": [\"constraint\"], \n\t     \"LANG\": [\"constraint\"], \n\t     \"LANGMATCHES\": [\"constraint\"], \n\t     \"DATATYPE\": [\"constraint\"], \n\t     \"BOUND\": [\"constraint\"], \n\t     \"IRI\": [\"constraint\"], \n\t     \"URI\": [\"constraint\"], \n\t     \"BNODE\": [\"constraint\"], \n\t     \"RAND\": [\"constraint\"], \n\t     \"ABS\": [\"constraint\"], \n\t     \"CEIL\": [\"constraint\"], \n\t     \"FLOOR\": [\"constraint\"], \n\t     \"ROUND\": [\"constraint\"], \n\t     \"CONCAT\": [\"constraint\"], \n\t     \"STRLEN\": [\"constraint\"], \n\t     \"UCASE\": [\"constraint\"], \n\t     \"LCASE\": [\"constraint\"], \n\t     \"ENCODE_FOR_URI\": [\"constraint\"], \n\t     \"CONTAINS\": [\"constraint\"], \n\t     \"STRSTARTS\": [\"constraint\"], \n\t     \"STRENDS\": [\"constraint\"], \n\t     \"STRBEFORE\": [\"constraint\"], \n\t     \"STRAFTER\": [\"constraint\"], \n\t     \"YEAR\": [\"constraint\"], \n\t     \"MONTH\": [\"constraint\"], \n\t     \"DAY\": [\"constraint\"], \n\t     \"HOURS\": [\"constraint\"], \n\t     \"MINUTES\": [\"constraint\"], \n\t     \"SECONDS\": [\"constraint\"], \n\t     \"TIMEZONE\": [\"constraint\"], \n\t     \"TZ\": [\"constraint\"], \n\t     \"NOW\": [\"constraint\"], \n\t     \"UUID\": [\"constraint\"], \n\t     \"STRUUID\": [\"constraint\"], \n\t     \"MD5\": [\"constraint\"], \n\t     \"SHA1\": [\"constraint\"], \n\t     \"SHA256\": [\"constraint\"], \n\t     \"SHA384\": [\"constraint\"], \n\t     \"SHA512\": [\"constraint\"], \n\t     \"COALESCE\": [\"constraint\"], \n\t     \"IF\": [\"constraint\"], \n\t     \"STRLANG\": [\"constraint\"], \n\t     \"STRDT\": [\"constraint\"], \n\t     \"SAMETERM\": [\"constraint\"], \n\t     \"ISIRI\": [\"constraint\"], \n\t     \"ISURI\": [\"constraint\"], \n\t     \"ISBLANK\": [\"constraint\"], \n\t     \"ISLITERAL\": [\"constraint\"], \n\t     \"ISNUMERIC\": [\"constraint\"], \n\t     \"SUBSTR\": [\"constraint\"], \n\t     \"REPLACE\": [\"constraint\"], \n\t     \"REGEX\": [\"constraint\"], \n\t     \"EXISTS\": [\"constraint\"], \n\t     \"NOT\": [\"constraint\"], \n\t     \"IRI_REF\": [\"constraint\"], \n\t     \"PNAME_LN\": [\"constraint\"], \n\t     \"PNAME_NS\": [\"constraint\"], \n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"]}, \n\t  \"path\" : {\n\t     \"^\": [\"pathAlternative\"], \n\t     \"a\": [\"pathAlternative\"], \n\t     \"!\": [\"pathAlternative\"], \n\t     \"(\": [\"pathAlternative\"], \n\t     \"IRI_REF\": [\"pathAlternative\"], \n\t     \"PNAME_LN\": [\"pathAlternative\"], \n\t     \"PNAME_NS\": [\"pathAlternative\"]}, \n\t  \"pathAlternative\" : {\n\t     \"^\": [\"pathSequence\",\"*[|,pathSequence]\"], \n\t     \"a\": [\"pathSequence\",\"*[|,pathSequence]\"], \n\t     \"!\": [\"pathSequence\",\"*[|,pathSequence]\"], \n\t     \"(\": [\"pathSequence\",\"*[|,pathSequence]\"], \n\t     \"IRI_REF\": [\"pathSequence\",\"*[|,pathSequence]\"], \n\t     \"PNAME_LN\": [\"pathSequence\",\"*[|,pathSequence]\"], \n\t     \"PNAME_NS\": [\"pathSequence\",\"*[|,pathSequence]\"]}, \n\t  \"pathElt\" : {\n\t     \"a\": [\"pathPrimary\",\"?pathMod\"], \n\t     \"!\": [\"pathPrimary\",\"?pathMod\"], \n\t     \"(\": [\"pathPrimary\",\"?pathMod\"], \n\t     \"IRI_REF\": [\"pathPrimary\",\"?pathMod\"], \n\t     \"PNAME_LN\": [\"pathPrimary\",\"?pathMod\"], \n\t     \"PNAME_NS\": [\"pathPrimary\",\"?pathMod\"]}, \n\t  \"pathEltOrInverse\" : {\n\t     \"a\": [\"pathElt\"], \n\t     \"!\": [\"pathElt\"], \n\t     \"(\": [\"pathElt\"], \n\t     \"IRI_REF\": [\"pathElt\"], \n\t     \"PNAME_LN\": [\"pathElt\"], \n\t     \"PNAME_NS\": [\"pathElt\"], \n\t     \"^\": [\"^\",\"pathElt\"]}, \n\t  \"pathMod\" : {\n\t     \"*\": [\"*\"], \n\t     \"?\": [\"?\"], \n\t     \"+\": [\"+\"], \n\t     \"{\": [\"{\",\"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\"]}, \n\t  \"pathNegatedPropertySet\" : {\n\t     \"a\": [\"pathOneInPropertySet\"], \n\t     \"^\": [\"pathOneInPropertySet\"], \n\t     \"IRI_REF\": [\"pathOneInPropertySet\"], \n\t     \"PNAME_LN\": [\"pathOneInPropertySet\"], \n\t     \"PNAME_NS\": [\"pathOneInPropertySet\"], \n\t     \"(\": [\"(\",\"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\",\")\"]}, \n\t  \"pathOneInPropertySet\" : {\n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"], \n\t     \"a\": [\"a\"], \n\t     \"^\": [\"^\",\"or([iriRef,a])\"]}, \n\t  \"pathPrimary\" : {\n\t     \"IRI_REF\": [\"storeProperty\",\"iriRef\"], \n\t     \"PNAME_LN\": [\"storeProperty\",\"iriRef\"], \n\t     \"PNAME_NS\": [\"storeProperty\",\"iriRef\"], \n\t     \"a\": [\"storeProperty\",\"a\"], \n\t     \"!\": [\"!\",\"pathNegatedPropertySet\"], \n\t     \"(\": [\"(\",\"path\",\")\"]}, \n\t  \"pathSequence\" : {\n\t     \"^\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n\t     \"a\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n\t     \"!\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n\t     \"(\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n\t     \"IRI_REF\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n\t     \"PNAME_LN\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n\t     \"PNAME_NS\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"]}, \n\t  \"prefixDecl\" : {\n\t     \"PREFIX\": [\"PREFIX\",\"PNAME_NS\",\"IRI_REF\"]}, \n\t  \"prefixedName\" : {\n\t     \"PNAME_LN\": [\"PNAME_LN\"], \n\t     \"PNAME_NS\": [\"PNAME_NS\"]}, \n\t  \"primaryExpression\" : {\n\t     \"(\": [\"brackettedExpression\"], \n\t     \"STR\": [\"builtInCall\"], \n\t     \"LANG\": [\"builtInCall\"], \n\t     \"LANGMATCHES\": [\"builtInCall\"], \n\t     \"DATATYPE\": [\"builtInCall\"], \n\t     \"BOUND\": [\"builtInCall\"], \n\t     \"IRI\": [\"builtInCall\"], \n\t     \"URI\": [\"builtInCall\"], \n\t     \"BNODE\": [\"builtInCall\"], \n\t     \"RAND\": [\"builtInCall\"], \n\t     \"ABS\": [\"builtInCall\"], \n\t     \"CEIL\": [\"builtInCall\"], \n\t     \"FLOOR\": [\"builtInCall\"], \n\t     \"ROUND\": [\"builtInCall\"], \n\t     \"CONCAT\": [\"builtInCall\"], \n\t     \"STRLEN\": [\"builtInCall\"], \n\t     \"UCASE\": [\"builtInCall\"], \n\t     \"LCASE\": [\"builtInCall\"], \n\t     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n\t     \"CONTAINS\": [\"builtInCall\"], \n\t     \"STRSTARTS\": [\"builtInCall\"], \n\t     \"STRENDS\": [\"builtInCall\"], \n\t     \"STRBEFORE\": [\"builtInCall\"], \n\t     \"STRAFTER\": [\"builtInCall\"], \n\t     \"YEAR\": [\"builtInCall\"], \n\t     \"MONTH\": [\"builtInCall\"], \n\t     \"DAY\": [\"builtInCall\"], \n\t     \"HOURS\": [\"builtInCall\"], \n\t     \"MINUTES\": [\"builtInCall\"], \n\t     \"SECONDS\": [\"builtInCall\"], \n\t     \"TIMEZONE\": [\"builtInCall\"], \n\t     \"TZ\": [\"builtInCall\"], \n\t     \"NOW\": [\"builtInCall\"], \n\t     \"UUID\": [\"builtInCall\"], \n\t     \"STRUUID\": [\"builtInCall\"], \n\t     \"MD5\": [\"builtInCall\"], \n\t     \"SHA1\": [\"builtInCall\"], \n\t     \"SHA256\": [\"builtInCall\"], \n\t     \"SHA384\": [\"builtInCall\"], \n\t     \"SHA512\": [\"builtInCall\"], \n\t     \"COALESCE\": [\"builtInCall\"], \n\t     \"IF\": [\"builtInCall\"], \n\t     \"STRLANG\": [\"builtInCall\"], \n\t     \"STRDT\": [\"builtInCall\"], \n\t     \"SAMETERM\": [\"builtInCall\"], \n\t     \"ISIRI\": [\"builtInCall\"], \n\t     \"ISURI\": [\"builtInCall\"], \n\t     \"ISBLANK\": [\"builtInCall\"], \n\t     \"ISLITERAL\": [\"builtInCall\"], \n\t     \"ISNUMERIC\": [\"builtInCall\"], \n\t     \"SUBSTR\": [\"builtInCall\"], \n\t     \"REPLACE\": [\"builtInCall\"], \n\t     \"REGEX\": [\"builtInCall\"], \n\t     \"EXISTS\": [\"builtInCall\"], \n\t     \"NOT\": [\"builtInCall\"], \n\t     \"IRI_REF\": [\"iriRefOrFunction\"], \n\t     \"PNAME_LN\": [\"iriRefOrFunction\"], \n\t     \"PNAME_NS\": [\"iriRefOrFunction\"], \n\t     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n\t     \"INTEGER\": [\"numericLiteral\"], \n\t     \"DECIMAL\": [\"numericLiteral\"], \n\t     \"DOUBLE\": [\"numericLiteral\"], \n\t     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n\t     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n\t     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n\t     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n\t     \"TRUE\": [\"booleanLiteral\"], \n\t     \"FALSE\": [\"booleanLiteral\"], \n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"], \n\t     \"COUNT\": [\"aggregate\"], \n\t     \"SUM\": [\"aggregate\"], \n\t     \"MIN\": [\"aggregate\"], \n\t     \"MAX\": [\"aggregate\"], \n\t     \"AVG\": [\"aggregate\"], \n\t     \"SAMPLE\": [\"aggregate\"], \n\t     \"GROUP_CONCAT\": [\"aggregate\"]}, \n\t  \"prologue\" : {\n\t     \"PREFIX\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"BASE\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"$\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"CONSTRUCT\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"DESCRIBE\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"ASK\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"INSERT\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"DELETE\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"SELECT\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"LOAD\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"CLEAR\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"DROP\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"ADD\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"MOVE\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"COPY\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"CREATE\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"WITH\": [\"?baseDecl\",\"*prefixDecl\"]}, \n\t  \"propertyList\" : {\n\t     \"a\": [\"propertyListNotEmpty\"], \n\t     \"VAR1\": [\"propertyListNotEmpty\"], \n\t     \"VAR2\": [\"propertyListNotEmpty\"], \n\t     \"IRI_REF\": [\"propertyListNotEmpty\"], \n\t     \"PNAME_LN\": [\"propertyListNotEmpty\"], \n\t     \"PNAME_NS\": [\"propertyListNotEmpty\"], \n\t     \".\": [], \n\t     \"}\": [], \n\t     \"GRAPH\": []}, \n\t  \"propertyListNotEmpty\" : {\n\t     \"a\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n\t     \"VAR1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n\t     \"VAR2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n\t     \"IRI_REF\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n\t     \"PNAME_LN\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n\t     \"PNAME_NS\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"]}, \n\t  \"propertyListPath\" : {\n\t     \"a\": [\"propertyListNotEmpty\"], \n\t     \"VAR1\": [\"propertyListNotEmpty\"], \n\t     \"VAR2\": [\"propertyListNotEmpty\"], \n\t     \"IRI_REF\": [\"propertyListNotEmpty\"], \n\t     \"PNAME_LN\": [\"propertyListNotEmpty\"], \n\t     \"PNAME_NS\": [\"propertyListNotEmpty\"], \n\t     \".\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"propertyListPathNotEmpty\" : {\n\t     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"^\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"a\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"!\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"(\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"]}, \n\t  \"quadData\" : {\n\t     \"{\": [\"{\",\"disallowVars\",\"quads\",\"allowVars\",\"}\"]}, \n\t  \"quadDataNoBnodes\" : {\n\t     \"{\": [\"{\",\"disallowBnodes\",\"disallowVars\",\"quads\",\"allowVars\",\"allowBnodes\",\"}\"]}, \n\t  \"quadPattern\" : {\n\t     \"{\": [\"{\",\"quads\",\"}\"]}, \n\t  \"quadPatternNoBnodes\" : {\n\t     \"{\": [\"{\",\"disallowBnodes\",\"quads\",\"allowBnodes\",\"}\"]}, \n\t  \"quads\" : {\n\t     \"GRAPH\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"VAR1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"VAR2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"NIL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"(\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"[\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"IRI_REF\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"TRUE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"FALSE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"BLANK_NODE_LABEL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"ANON\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"PNAME_LN\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"PNAME_NS\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"INTEGER\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"DECIMAL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"DOUBLE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"INTEGER_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"DECIMAL_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"DOUBLE_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"INTEGER_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"}\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"]}, \n\t  \"quadsNotTriples\" : {\n\t     \"GRAPH\": [\"GRAPH\",\"varOrIRIref\",\"{\",\"?triplesTemplate\",\"}\"]}, \n\t  \"queryAll\" : {\n\t     \"CONSTRUCT\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \n\t     \"DESCRIBE\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \n\t     \"ASK\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \n\t     \"SELECT\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"]}, \n\t  \"rdfLiteral\" : {\n\t     \"STRING_LITERAL1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n\t     \"STRING_LITERAL2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n\t     \"STRING_LITERAL_LONG1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n\t     \"STRING_LITERAL_LONG2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"]}, \n\t  \"regexExpression\" : {\n\t     \"REGEX\": [\"REGEX\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n\t  \"relationalExpression\" : {\n\t     \"!\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"+\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"-\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"VAR1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"VAR2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"(\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"LANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"LANGMATCHES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DATATYPE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"BOUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"IRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"BNODE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"RAND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ABS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"CEIL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"FLOOR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ROUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRLEN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"UCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"LCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ENCODE_FOR_URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"CONTAINS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRSTARTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRENDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRBEFORE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRAFTER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"YEAR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"MONTH\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DAY\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"HOURS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"MINUTES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SECONDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"TIMEZONE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"TZ\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"NOW\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"UUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRUUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"MD5\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SHA1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SHA256\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SHA384\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SHA512\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"COALESCE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"IF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRLANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRDT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SAMETERM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ISIRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ISURI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ISBLANK\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ISLITERAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ISNUMERIC\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"TRUE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"FALSE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"COUNT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SUM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"MIN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"MAX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"AVG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SAMPLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"GROUP_CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SUBSTR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"REPLACE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"REGEX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"EXISTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"NOT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"IRI_REF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRING_LITERAL1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRING_LITERAL2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRING_LITERAL_LONG1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRING_LITERAL_LONG2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"INTEGER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DECIMAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DOUBLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"INTEGER_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DECIMAL_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DOUBLE_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"INTEGER_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DECIMAL_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DOUBLE_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"PNAME_LN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"PNAME_NS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"]}, \n\t  \"selectClause\" : {\n\t     \"SELECT\": [\"SELECT\",\"?or([DISTINCT,REDUCED])\",\"or([+or([var,[ (,expression,AS,var,)]]),*])\"]}, \n\t  \"selectQuery\" : {\n\t     \"SELECT\": [\"selectClause\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \n\t  \"serviceGraphPattern\" : {\n\t     \"SERVICE\": [\"SERVICE\",\"?SILENT\",\"varOrIRIref\",\"groupGraphPattern\"]}, \n\t  \"solutionModifier\" : {\n\t     \"LIMIT\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"OFFSET\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"ORDER\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"HAVING\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"GROUP\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"VALUES\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"$\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"}\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"]}, \n\t  \"sourceSelector\" : {\n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"]}, \n\t  \"sparql11\" : {\n\t     \"$\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"CONSTRUCT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"DESCRIBE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"ASK\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"INSERT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"DELETE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"SELECT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"LOAD\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"CLEAR\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"DROP\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"ADD\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"MOVE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"COPY\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"CREATE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"WITH\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"PREFIX\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"BASE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"]}, \n\t  \"storeProperty\" : {\n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"IRI_REF\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"a\": []}, \n\t  \"strReplaceExpression\" : {\n\t     \"REPLACE\": [\"REPLACE\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n\t  \"string\" : {\n\t     \"STRING_LITERAL1\": [\"STRING_LITERAL1\"], \n\t     \"STRING_LITERAL2\": [\"STRING_LITERAL2\"], \n\t     \"STRING_LITERAL_LONG1\": [\"STRING_LITERAL_LONG1\"], \n\t     \"STRING_LITERAL_LONG2\": [\"STRING_LITERAL_LONG2\"]}, \n\t  \"subSelect\" : {\n\t     \"SELECT\": [\"selectClause\",\"whereClause\",\"solutionModifier\",\"valuesClause\"]}, \n\t  \"substringExpression\" : {\n\t     \"SUBSTR\": [\"SUBSTR\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n\t  \"triplesBlock\" : {\n\t     \"VAR1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"VAR2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"NIL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"(\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"[\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"IRI_REF\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"TRUE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"FALSE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"BLANK_NODE_LABEL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"ANON\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"PNAME_LN\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"PNAME_NS\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"STRING_LITERAL1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"STRING_LITERAL2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"INTEGER\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"DECIMAL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"DOUBLE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"INTEGER_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"DECIMAL_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"DOUBLE_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"INTEGER_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"]}, \n\t  \"triplesNode\" : {\n\t     \"(\": [\"collection\"], \n\t     \"[\": [\"blankNodePropertyList\"]}, \n\t  \"triplesNodePath\" : {\n\t     \"(\": [\"collectionPath\"], \n\t     \"[\": [\"blankNodePropertyListPath\"]}, \n\t  \"triplesSameSubject\" : {\n\t     \"VAR1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"VAR2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"NIL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"IRI_REF\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"TRUE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"FALSE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"ANON\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"PNAME_LN\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"PNAME_NS\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"INTEGER\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"DECIMAL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"DOUBLE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"(\": [\"triplesNode\",\"propertyList\"], \n\t     \"[\": [\"triplesNode\",\"propertyList\"]}, \n\t  \"triplesSameSubjectPath\" : {\n\t     \"VAR1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"VAR2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"NIL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"IRI_REF\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"TRUE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"FALSE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"ANON\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"PNAME_LN\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"PNAME_NS\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"INTEGER\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"DECIMAL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"DOUBLE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"(\": [\"triplesNodePath\",\"propertyListPath\"], \n\t     \"[\": [\"triplesNodePath\",\"propertyListPath\"]}, \n\t  \"triplesTemplate\" : {\n\t     \"VAR1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"VAR2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"NIL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"(\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"[\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"TRUE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"FALSE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"ANON\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"]}, \n\t  \"unaryExpression\" : {\n\t     \"!\": [\"!\",\"primaryExpression\"], \n\t     \"+\": [\"+\",\"primaryExpression\"], \n\t     \"-\": [\"-\",\"primaryExpression\"], \n\t     \"VAR1\": [\"primaryExpression\"], \n\t     \"VAR2\": [\"primaryExpression\"], \n\t     \"(\": [\"primaryExpression\"], \n\t     \"STR\": [\"primaryExpression\"], \n\t     \"LANG\": [\"primaryExpression\"], \n\t     \"LANGMATCHES\": [\"primaryExpression\"], \n\t     \"DATATYPE\": [\"primaryExpression\"], \n\t     \"BOUND\": [\"primaryExpression\"], \n\t     \"IRI\": [\"primaryExpression\"], \n\t     \"URI\": [\"primaryExpression\"], \n\t     \"BNODE\": [\"primaryExpression\"], \n\t     \"RAND\": [\"primaryExpression\"], \n\t     \"ABS\": [\"primaryExpression\"], \n\t     \"CEIL\": [\"primaryExpression\"], \n\t     \"FLOOR\": [\"primaryExpression\"], \n\t     \"ROUND\": [\"primaryExpression\"], \n\t     \"CONCAT\": [\"primaryExpression\"], \n\t     \"STRLEN\": [\"primaryExpression\"], \n\t     \"UCASE\": [\"primaryExpression\"], \n\t     \"LCASE\": [\"primaryExpression\"], \n\t     \"ENCODE_FOR_URI\": [\"primaryExpression\"], \n\t     \"CONTAINS\": [\"primaryExpression\"], \n\t     \"STRSTARTS\": [\"primaryExpression\"], \n\t     \"STRENDS\": [\"primaryExpression\"], \n\t     \"STRBEFORE\": [\"primaryExpression\"], \n\t     \"STRAFTER\": [\"primaryExpression\"], \n\t     \"YEAR\": [\"primaryExpression\"], \n\t     \"MONTH\": [\"primaryExpression\"], \n\t     \"DAY\": [\"primaryExpression\"], \n\t     \"HOURS\": [\"primaryExpression\"], \n\t     \"MINUTES\": [\"primaryExpression\"], \n\t     \"SECONDS\": [\"primaryExpression\"], \n\t     \"TIMEZONE\": [\"primaryExpression\"], \n\t     \"TZ\": [\"primaryExpression\"], \n\t     \"NOW\": [\"primaryExpression\"], \n\t     \"UUID\": [\"primaryExpression\"], \n\t     \"STRUUID\": [\"primaryExpression\"], \n\t     \"MD5\": [\"primaryExpression\"], \n\t     \"SHA1\": [\"primaryExpression\"], \n\t     \"SHA256\": [\"primaryExpression\"], \n\t     \"SHA384\": [\"primaryExpression\"], \n\t     \"SHA512\": [\"primaryExpression\"], \n\t     \"COALESCE\": [\"primaryExpression\"], \n\t     \"IF\": [\"primaryExpression\"], \n\t     \"STRLANG\": [\"primaryExpression\"], \n\t     \"STRDT\": [\"primaryExpression\"], \n\t     \"SAMETERM\": [\"primaryExpression\"], \n\t     \"ISIRI\": [\"primaryExpression\"], \n\t     \"ISURI\": [\"primaryExpression\"], \n\t     \"ISBLANK\": [\"primaryExpression\"], \n\t     \"ISLITERAL\": [\"primaryExpression\"], \n\t     \"ISNUMERIC\": [\"primaryExpression\"], \n\t     \"TRUE\": [\"primaryExpression\"], \n\t     \"FALSE\": [\"primaryExpression\"], \n\t     \"COUNT\": [\"primaryExpression\"], \n\t     \"SUM\": [\"primaryExpression\"], \n\t     \"MIN\": [\"primaryExpression\"], \n\t     \"MAX\": [\"primaryExpression\"], \n\t     \"AVG\": [\"primaryExpression\"], \n\t     \"SAMPLE\": [\"primaryExpression\"], \n\t     \"GROUP_CONCAT\": [\"primaryExpression\"], \n\t     \"SUBSTR\": [\"primaryExpression\"], \n\t     \"REPLACE\": [\"primaryExpression\"], \n\t     \"REGEX\": [\"primaryExpression\"], \n\t     \"EXISTS\": [\"primaryExpression\"], \n\t     \"NOT\": [\"primaryExpression\"], \n\t     \"IRI_REF\": [\"primaryExpression\"], \n\t     \"STRING_LITERAL1\": [\"primaryExpression\"], \n\t     \"STRING_LITERAL2\": [\"primaryExpression\"], \n\t     \"STRING_LITERAL_LONG1\": [\"primaryExpression\"], \n\t     \"STRING_LITERAL_LONG2\": [\"primaryExpression\"], \n\t     \"INTEGER\": [\"primaryExpression\"], \n\t     \"DECIMAL\": [\"primaryExpression\"], \n\t     \"DOUBLE\": [\"primaryExpression\"], \n\t     \"INTEGER_POSITIVE\": [\"primaryExpression\"], \n\t     \"DECIMAL_POSITIVE\": [\"primaryExpression\"], \n\t     \"DOUBLE_POSITIVE\": [\"primaryExpression\"], \n\t     \"INTEGER_NEGATIVE\": [\"primaryExpression\"], \n\t     \"DECIMAL_NEGATIVE\": [\"primaryExpression\"], \n\t     \"DOUBLE_NEGATIVE\": [\"primaryExpression\"], \n\t     \"PNAME_LN\": [\"primaryExpression\"], \n\t     \"PNAME_NS\": [\"primaryExpression\"]}, \n\t  \"update\" : {\n\t     \"INSERT\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"DELETE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"LOAD\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"CLEAR\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"DROP\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"ADD\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"MOVE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"COPY\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"CREATE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"WITH\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"PREFIX\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"BASE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"$\": [\"prologue\",\"?[update1,?[;,update]]\"]}, \n\t  \"update1\" : {\n\t     \"LOAD\": [\"load\"], \n\t     \"CLEAR\": [\"clear\"], \n\t     \"DROP\": [\"drop\"], \n\t     \"ADD\": [\"add\"], \n\t     \"MOVE\": [\"move\"], \n\t     \"COPY\": [\"copy\"], \n\t     \"CREATE\": [\"create\"], \n\t     \"INSERT\": [\"INSERT\",\"insert1\"], \n\t     \"DELETE\": [\"DELETE\",\"delete1\"], \n\t     \"WITH\": [\"modify\"]}, \n\t  \"updateAll\" : {\n\t     \"INSERT\": [\"?[update1,?[;,update]]\"], \n\t     \"DELETE\": [\"?[update1,?[;,update]]\"], \n\t     \"LOAD\": [\"?[update1,?[;,update]]\"], \n\t     \"CLEAR\": [\"?[update1,?[;,update]]\"], \n\t     \"DROP\": [\"?[update1,?[;,update]]\"], \n\t     \"ADD\": [\"?[update1,?[;,update]]\"], \n\t     \"MOVE\": [\"?[update1,?[;,update]]\"], \n\t     \"COPY\": [\"?[update1,?[;,update]]\"], \n\t     \"CREATE\": [\"?[update1,?[;,update]]\"], \n\t     \"WITH\": [\"?[update1,?[;,update]]\"], \n\t     \"$\": [\"?[update1,?[;,update]]\"]}, \n\t  \"usingClause\" : {\n\t     \"USING\": [\"USING\",\"or([iriRef,[NAMED,iriRef]])\"]}, \n\t  \"valueLogical\" : {\n\t     \"!\": [\"relationalExpression\"], \n\t     \"+\": [\"relationalExpression\"], \n\t     \"-\": [\"relationalExpression\"], \n\t     \"VAR1\": [\"relationalExpression\"], \n\t     \"VAR2\": [\"relationalExpression\"], \n\t     \"(\": [\"relationalExpression\"], \n\t     \"STR\": [\"relationalExpression\"], \n\t     \"LANG\": [\"relationalExpression\"], \n\t     \"LANGMATCHES\": [\"relationalExpression\"], \n\t     \"DATATYPE\": [\"relationalExpression\"], \n\t     \"BOUND\": [\"relationalExpression\"], \n\t     \"IRI\": [\"relationalExpression\"], \n\t     \"URI\": [\"relationalExpression\"], \n\t     \"BNODE\": [\"relationalExpression\"], \n\t     \"RAND\": [\"relationalExpression\"], \n\t     \"ABS\": [\"relationalExpression\"], \n\t     \"CEIL\": [\"relationalExpression\"], \n\t     \"FLOOR\": [\"relationalExpression\"], \n\t     \"ROUND\": [\"relationalExpression\"], \n\t     \"CONCAT\": [\"relationalExpression\"], \n\t     \"STRLEN\": [\"relationalExpression\"], \n\t     \"UCASE\": [\"relationalExpression\"], \n\t     \"LCASE\": [\"relationalExpression\"], \n\t     \"ENCODE_FOR_URI\": [\"relationalExpression\"], \n\t     \"CONTAINS\": [\"relationalExpression\"], \n\t     \"STRSTARTS\": [\"relationalExpression\"], \n\t     \"STRENDS\": [\"relationalExpression\"], \n\t     \"STRBEFORE\": [\"relationalExpression\"], \n\t     \"STRAFTER\": [\"relationalExpression\"], \n\t     \"YEAR\": [\"relationalExpression\"], \n\t     \"MONTH\": [\"relationalExpression\"], \n\t     \"DAY\": [\"relationalExpression\"], \n\t     \"HOURS\": [\"relationalExpression\"], \n\t     \"MINUTES\": [\"relationalExpression\"], \n\t     \"SECONDS\": [\"relationalExpression\"], \n\t     \"TIMEZONE\": [\"relationalExpression\"], \n\t     \"TZ\": [\"relationalExpression\"], \n\t     \"NOW\": [\"relationalExpression\"], \n\t     \"UUID\": [\"relationalExpression\"], \n\t     \"STRUUID\": [\"relationalExpression\"], \n\t     \"MD5\": [\"relationalExpression\"], \n\t     \"SHA1\": [\"relationalExpression\"], \n\t     \"SHA256\": [\"relationalExpression\"], \n\t     \"SHA384\": [\"relationalExpression\"], \n\t     \"SHA512\": [\"relationalExpression\"], \n\t     \"COALESCE\": [\"relationalExpression\"], \n\t     \"IF\": [\"relationalExpression\"], \n\t     \"STRLANG\": [\"relationalExpression\"], \n\t     \"STRDT\": [\"relationalExpression\"], \n\t     \"SAMETERM\": [\"relationalExpression\"], \n\t     \"ISIRI\": [\"relationalExpression\"], \n\t     \"ISURI\": [\"relationalExpression\"], \n\t     \"ISBLANK\": [\"relationalExpression\"], \n\t     \"ISLITERAL\": [\"relationalExpression\"], \n\t     \"ISNUMERIC\": [\"relationalExpression\"], \n\t     \"TRUE\": [\"relationalExpression\"], \n\t     \"FALSE\": [\"relationalExpression\"], \n\t     \"COUNT\": [\"relationalExpression\"], \n\t     \"SUM\": [\"relationalExpression\"], \n\t     \"MIN\": [\"relationalExpression\"], \n\t     \"MAX\": [\"relationalExpression\"], \n\t     \"AVG\": [\"relationalExpression\"], \n\t     \"SAMPLE\": [\"relationalExpression\"], \n\t     \"GROUP_CONCAT\": [\"relationalExpression\"], \n\t     \"SUBSTR\": [\"relationalExpression\"], \n\t     \"REPLACE\": [\"relationalExpression\"], \n\t     \"REGEX\": [\"relationalExpression\"], \n\t     \"EXISTS\": [\"relationalExpression\"], \n\t     \"NOT\": [\"relationalExpression\"], \n\t     \"IRI_REF\": [\"relationalExpression\"], \n\t     \"STRING_LITERAL1\": [\"relationalExpression\"], \n\t     \"STRING_LITERAL2\": [\"relationalExpression\"], \n\t     \"STRING_LITERAL_LONG1\": [\"relationalExpression\"], \n\t     \"STRING_LITERAL_LONG2\": [\"relationalExpression\"], \n\t     \"INTEGER\": [\"relationalExpression\"], \n\t     \"DECIMAL\": [\"relationalExpression\"], \n\t     \"DOUBLE\": [\"relationalExpression\"], \n\t     \"INTEGER_POSITIVE\": [\"relationalExpression\"], \n\t     \"DECIMAL_POSITIVE\": [\"relationalExpression\"], \n\t     \"DOUBLE_POSITIVE\": [\"relationalExpression\"], \n\t     \"INTEGER_NEGATIVE\": [\"relationalExpression\"], \n\t     \"DECIMAL_NEGATIVE\": [\"relationalExpression\"], \n\t     \"DOUBLE_NEGATIVE\": [\"relationalExpression\"], \n\t     \"PNAME_LN\": [\"relationalExpression\"], \n\t     \"PNAME_NS\": [\"relationalExpression\"]}, \n\t  \"valuesClause\" : {\n\t     \"VALUES\": [\"VALUES\",\"dataBlock\"], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"var\" : {\n\t     \"VAR1\": [\"VAR1\"], \n\t     \"VAR2\": [\"VAR2\"]}, \n\t  \"varOrIRIref\" : {\n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"], \n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"]}, \n\t  \"varOrTerm\" : {\n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"], \n\t     \"NIL\": [\"graphTerm\"], \n\t     \"IRI_REF\": [\"graphTerm\"], \n\t     \"TRUE\": [\"graphTerm\"], \n\t     \"FALSE\": [\"graphTerm\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphTerm\"], \n\t     \"ANON\": [\"graphTerm\"], \n\t     \"PNAME_LN\": [\"graphTerm\"], \n\t     \"PNAME_NS\": [\"graphTerm\"], \n\t     \"STRING_LITERAL1\": [\"graphTerm\"], \n\t     \"STRING_LITERAL2\": [\"graphTerm\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphTerm\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphTerm\"], \n\t     \"INTEGER\": [\"graphTerm\"], \n\t     \"DECIMAL\": [\"graphTerm\"], \n\t     \"DOUBLE\": [\"graphTerm\"], \n\t     \"INTEGER_POSITIVE\": [\"graphTerm\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphTerm\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphTerm\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphTerm\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphTerm\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphTerm\"]}, \n\t  \"verb\" : {\n\t     \"VAR1\": [\"storeProperty\",\"varOrIRIref\"], \n\t     \"VAR2\": [\"storeProperty\",\"varOrIRIref\"], \n\t     \"IRI_REF\": [\"storeProperty\",\"varOrIRIref\"], \n\t     \"PNAME_LN\": [\"storeProperty\",\"varOrIRIref\"], \n\t     \"PNAME_NS\": [\"storeProperty\",\"varOrIRIref\"], \n\t     \"a\": [\"storeProperty\",\"a\"]}, \n\t  \"verbPath\" : {\n\t     \"^\": [\"path\"], \n\t     \"a\": [\"path\"], \n\t     \"!\": [\"path\"], \n\t     \"(\": [\"path\"], \n\t     \"IRI_REF\": [\"path\"], \n\t     \"PNAME_LN\": [\"path\"], \n\t     \"PNAME_NS\": [\"path\"]}, \n\t  \"verbSimple\" : {\n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"]}, \n\t  \"whereClause\" : {\n\t     \"{\": [\"?WHERE\",\"groupGraphPattern\"], \n\t     \"WHERE\": [\"?WHERE\",\"groupGraphPattern\"]}\n\t};\n\t\n\tvar keywords=/^(GROUP_CONCAT|DATATYPE|BASE|PREFIX|SELECT|CONSTRUCT|DESCRIBE|ASK|FROM|NAMED|ORDER|BY|LIMIT|ASC|DESC|OFFSET|DISTINCT|REDUCED|WHERE|GRAPH|OPTIONAL|UNION|FILTER|GROUP|HAVING|AS|VALUES|LOAD|CLEAR|DROP|CREATE|MOVE|COPY|SILENT|INSERT|DELETE|DATA|WITH|TO|USING|NAMED|MINUS|BIND|LANGMATCHES|LANG|BOUND|SAMETERM|ISIRI|ISURI|ISBLANK|ISLITERAL|REGEX|TRUE|FALSE|UNDEF|ADD|DEFAULT|ALL|SERVICE|INTO|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|STR)/i ;\n\t\n\tvar punct=/^(\\*|a|\\.|\\{|\\}|,|\\(|\\)|;|\\[|\\]|\\|\\||&&|=|!=|!|<=|>=|<|>|\\+|-|\\/|\\^\\^|\\?|\\||\\^)/ ;\n\t\n\tvar defaultQueryType=null;\n\tvar lexVersion=\"sparql11\";\n\tvar startSymbol=\"sparql11\";\n\tvar acceptEmpty=true;\n\t\n\t\tfunction getTerminals()\n\t\t{\n\t\t\tvar IRI_REF = '<[^<>\\\"\\'\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\n\t\t\t/*\n\t\t\t * PN_CHARS_BASE =\n\t\t\t * '[A-Z]|[a-z]|[\\\\u00C0-\\\\u00D6]|[\\\\u00D8-\\\\u00F6]|[\\\\u00F8-\\\\u02FF]|[\\\\u0370-\\\\u037D]|[\\\\u037F-\\\\u1FFF]|[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|[\\\\u2C00-\\\\u2FEF]|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]|[\\\\u10000-\\\\uEFFFF]';\n\t\t\t */\n\t\n\t\t\tvar PN_CHARS_BASE =\n\t\t\t\t'[A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD]';\n\t\t\tvar PN_CHARS_U = PN_CHARS_BASE+'|_';\n\t\n\t\t\tvar PN_CHARS= '('+PN_CHARS_U+'|-|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])';\n\t\t\tvar VARNAME = '('+PN_CHARS_U+'|[0-9])'+\n\t\t\t\t'('+PN_CHARS_U+'|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])*';\n\t\t\tvar VAR1 = '\\\\?'+VARNAME;\n\t\t\tvar VAR2 = '\\\\$'+VARNAME;\n\t\n\t\t\tvar PN_PREFIX= '('+PN_CHARS_BASE+')((('+PN_CHARS+')|\\\\.)*('+PN_CHARS+'))?';\n\t\n\t\t\tvar HEX= '[0-9A-Fa-f]';\n\t\t\tvar PERCENT='(%'+HEX+HEX+')';\n\t\t\tvar PN_LOCAL_ESC='(\\\\\\\\[_~\\\\.\\\\-!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=/\\\\?#@%])';\n\t\t\tvar PLX= '('+PERCENT+'|'+PN_LOCAL_ESC+')';\n\t\t\tvar PN_LOCAL;\n\t\t\tvar BLANK_NODE_LABEL;\n\t\t\tif (lexVersion==\"sparql11\") {\n\t\t\t\tPN_LOCAL= '('+PN_CHARS_U+'|:|[0-9]|'+PLX+')(('+PN_CHARS+'|\\\\.|:|'+PLX+')*('+PN_CHARS+'|:|'+PLX+'))?';\n\t\t\t\tBLANK_NODE_LABEL = '_:('+PN_CHARS_U+'|[0-9])(('+PN_CHARS+'|\\\\.)*'+PN_CHARS+')?';\n\t\t\t} else {\n\t\t\t\tPN_LOCAL= '('+PN_CHARS_U+'|[0-9])((('+PN_CHARS+')|\\\\.)*('+PN_CHARS+'))?';\n\t\t\t\tBLANK_NODE_LABEL = '_:'+PN_LOCAL;\n\t\t\t}\n\t\t\tvar PNAME_NS = '('+PN_PREFIX+')?:';\n\t\t\tvar PNAME_LN = PNAME_NS+PN_LOCAL;\n\t\t\tvar LANGTAG = '@[a-zA-Z]+(-[a-zA-Z0-9]+)*';\n\t\n\t\t\tvar EXPONENT = '[eE][\\\\+-]?[0-9]+';\n\t\t\tvar INTEGER = '[0-9]+';\n\t\t\tvar DECIMAL = '(([0-9]+\\\\.[0-9]*)|(\\\\.[0-9]+))';\n\t\t\tvar DOUBLE =\n\t\t\t\t'(([0-9]+\\\\.[0-9]*'+EXPONENT+')|'+\n\t\t\t\t'(\\\\.[0-9]+'+EXPONENT+')|'+\n\t\t\t\t'([0-9]+'+EXPONENT+'))';\n\t\n\t\t\tvar INTEGER_POSITIVE = '\\\\+' + INTEGER;\n\t\t\tvar DECIMAL_POSITIVE = '\\\\+' + DECIMAL;\n\t\t\tvar DOUBLE_POSITIVE  = '\\\\+' + DOUBLE;\n\t\t\tvar INTEGER_NEGATIVE = '-' + INTEGER;\n\t\t\tvar DECIMAL_NEGATIVE = '-' + DECIMAL;\n\t\t\tvar DOUBLE_NEGATIVE  = '-' + DOUBLE;\n\t\n\t\t\t//var ECHAR = '\\\\\\\\[tbnrf\\\\\"\\\\\\']';\n      //IMPORTANT: this rule deviates from the official grammar.\n      //Reason: https://github.com/YASGUI/YASQE/issues/49\n      //unicode escape sequences (which the sparql spec considers part of the pre-processing of sparql queries)\n      //are marked as invalid. We have little choice (other than adding a layer of complixity) than to modify the grammar accordingly\n      //however, for now only allow these escape sequences in literals (where actually, this should be allows in e.g. prefixes as well)\n\t\t\tvar ECHAR = '\\\\\\\\[tbnrfu\\\\\\\\\"\\']';\n\t\n\t\t\tvar STRING_LITERAL1 = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D])|\"+ECHAR+\")*'\";\n\t\t\tvar STRING_LITERAL2 = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D])|'+ECHAR+')*\"';\n\t\n\t\t\tvar STRING_LITERAL_LONG1 = \"'''(('|'')?([^'\\\\\\\\]|\"+ECHAR+\"))*'''\";\n\t\t\tvar STRING_LITERAL_LONG2 = '\"\"\"((\"|\"\")?([^\"\\\\\\\\]|'+ECHAR+'))*\"\"\"';\n\t\n\t\t\tvar WS    =        '[\\\\x20\\\\x09\\\\x0D\\\\x0A]';\n\t\t\t// Careful! Code mirror feeds one line at a time with no \\n\n\t\t\t// ... but otherwise comment is terminated by \\n\n\t\t\tvar COMMENT = '#([^\\\\n\\\\r]*[\\\\n\\\\r]|[^\\\\n\\\\r]*$)';\n\t\t\tvar WS_OR_COMMENT_STAR = '('+WS+'|('+COMMENT+'))*';\n\t\t\tvar NIL   = '\\\\('+WS_OR_COMMENT_STAR+'\\\\)';\n\t\t\tvar ANON  = '\\\\['+WS_OR_COMMENT_STAR+'\\\\]';\n\t\n\t\t\tvar terminals=\n\t\t\t\t{\n\t\t\t\t\tterminal: [\n\t\n\t\t\t\t\t\t{ name: \"WS\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+WS+\"+\"),\n\t\t\t\t\t\t\tstyle:\"ws\" },\n\t\n\t\t\t\t\t\t{ name: \"COMMENT\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+COMMENT),\n\t\t\t\t\t\t\tstyle:\"comment\" },\n\t\n\t\t\t\t\t\t{ name: \"IRI_REF\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+IRI_REF),\n\t\t\t\t\t\t\tstyle:\"variable-3\" },\n\t\n\t\t\t\t\t\t{ name: \"VAR1\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+VAR1),\n\t\t\t\t\t\t\tstyle:\"atom\"},\n\t\n\t\t\t\t\t\t{ name: \"VAR2\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+VAR2),\n\t\t\t\t\t\t\tstyle:\"atom\"},\n\t\n\t\t\t\t\t\t{ name: \"LANGTAG\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+LANGTAG),\n\t\t\t\t\t\t\tstyle:\"meta\"},\n\t\n\t\t\t\t\t\t{ name: \"DOUBLE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DOUBLE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"DECIMAL\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DECIMAL),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"INTEGER\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+INTEGER),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"DOUBLE_POSITIVE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DOUBLE_POSITIVE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"DECIMAL_POSITIVE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DECIMAL_POSITIVE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"INTEGER_POSITIVE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+INTEGER_POSITIVE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"DOUBLE_NEGATIVE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DOUBLE_NEGATIVE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"DECIMAL_NEGATIVE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DECIMAL_NEGATIVE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"INTEGER_NEGATIVE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+INTEGER_NEGATIVE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"STRING_LITERAL_LONG1\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG1),\n\t\t\t\t\t\t\tstyle:\"string\" },\n\t\n\t\t\t\t\t\t{ name: \"STRING_LITERAL_LONG2\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG2),\n\t\t\t\t\t\t\tstyle:\"string\" },\n\t\n\t\t\t\t\t\t{ name: \"STRING_LITERAL1\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL1),\n\t\t\t\t\t\t\tstyle:\"string\" },\n\t\n\t\t\t\t\t\t{ name: \"STRING_LITERAL2\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL2),\n\t\t\t\t\t\t\tstyle:\"string\" },\n\t\n\t\t\t\t\t\t// Enclosed comments won't be highlighted\n\t\t\t\t\t\t{ name: \"NIL\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+NIL),\n\t\t\t\t\t\t\tstyle:\"punc\" },\n\t\n\t\t\t\t\t\t// Enclosed comments won't be highlighted\n\t\t\t\t\t\t{ name: \"ANON\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+ANON),\n\t\t\t\t\t\t\tstyle:\"punc\" },\n\t\n\t\t\t\t\t\t{ name: \"PNAME_LN\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+PNAME_LN),\n\t\t\t\t\t\t\tstyle:\"string-2\" },\n\t\n\t\t\t\t\t\t{ name: \"PNAME_NS\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+PNAME_NS),\n\t\t\t\t\t\t\tstyle:\"string-2\" },\n\t\n\t\t\t\t\t\t{ name: \"BLANK_NODE_LABEL\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+BLANK_NODE_LABEL),\n\t\t\t\t\t\t\tstyle:\"string-2\" }\n\t\t\t\t\t],\n\t\n\t\t\t\t};\n\t\t\treturn terminals;\n\t\t}\n\t\n\t\tfunction getPossibles(symbol)\n\t\t{\n\t\t\tvar possibles=[], possiblesOb=ll1_table[symbol];\n\t\t\tif (possiblesOb!=undefined)\n\t\t\t\tfor (var property in possiblesOb)\n\t\t\t\t\tpossibles.push(property.toString());\n\t\t\telse\n\t\t\t\tpossibles.push(symbol);\n\t\t\treturn possibles;\n\t\t}\n\t\n\t\tvar tms= getTerminals();\n\t\tvar terminal=tms.terminal;\n\t\n\t\tfunction tokenBase(stream, state) {\n\t\n\t\t\tfunction nextToken() {\n\t\n\t\t\t\tvar consumed=null;\n\t\t\t\t// Tokens defined by individual regular expressions\n\t\t\t\tfor (var i=0; i<terminal.length; ++i) {\n\t\t\t\t\tconsumed= stream.match(terminal[i].regex,true,false);\n\t\t\t\t\tif (consumed)\n\t\t\t\t\t\treturn { cat: terminal[i].name,\n\t\t\t\t\t\t\t\t\t\t style: terminal[i].style,\n\t\t\t\t\t\t\t\t\t\t text: consumed[0]\n\t\t\t\t\t\t\t\t\t };\n\t\t\t\t}\n\t\n\t\t\t\t// Keywords\n\t\t\t\tconsumed= stream.match(keywords,true,false);\n\t\t\t\tif (consumed)\n\t\t\t\t\treturn { cat: stream.current().toUpperCase(),\n\t\t\t\t\t\t\t\t\t style: \"keyword\",\n\t\t\t\t\t\t\t\t\t text: consumed[0]\n\t\t\t\t\t\t\t\t };\n\t\n\t\t\t\t// Punctuation\n\t\t\t\tconsumed= stream.match(punct,true,false);\n\t\t\t\tif (consumed)\n\t\t\t\t\treturn { cat: stream.current(),\n\t\t\t\t\t\t\t\t\t style: \"punc\",\n\t\t\t\t\t\t\t\t\t text: consumed[0]\n\t\t\t\t\t\t\t\t };\n\t\n\t\t\t\t// Token is invalid\n\t\t\t\t// better consume something anyway, or else we're stuck\n\t\t\t\tconsumed= stream.match(/^.[A-Za-z0-9]*/,true,false);\n\t\t\t\treturn { cat:\"<invalid_token>\",\n\t\t\t\t\t\t\t\t style: \"error\",\n\t\t\t\t\t\t\t\t text: consumed[0]\n\t\t\t\t\t\t\t };\n\t\t\t}\n\t\n\t\t\tfunction recordFailurePos() {\n\t\t\t\t// tokenOb.style= \"sp-invalid\";\n\t\t\t\tvar col= stream.column();\n\t\t\t\tstate.errorStartPos= col;\n\t\t\t\tstate.errorEndPos= col+tokenOb.text.length;\n\t\t\t};\n\t\n\t\t\tfunction setQueryType(s) {\n\t\t\t\tif (state.queryType==null) {\n\t\t\t\t\tif (s ==\"SELECT\" || s==\"CONSTRUCT\" || s==\"ASK\" || s==\"DESCRIBE\" || s==\"INSERT\" || s==\"DELETE\" || s==\"LOAD\" || s==\"CLEAR\" || s==\"CREATE\" || s==\"DROP\" || s==\"COPY\" || s==\"MOVE\" || s==\"ADD\")\n\t\t\t\t\t\tstate.queryType=s;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Some fake non-terminals are just there to have side-effect on state\n\t\t\t// - i.e. allow or disallow variables and bnodes in certain non-nesting\n\t\t\t// contexts\n\t\t\tfunction setSideConditions(topSymbol) {\n\t\t\t\tif (topSymbol==\"disallowVars\") state.allowVars=false;\n\t\t\t\telse if (topSymbol==\"allowVars\") state.allowVars=true;\n\t\t\t\telse if (topSymbol==\"disallowBnodes\") state.allowBnodes=false;\n\t\t\t\telse if (topSymbol==\"allowBnodes\") state.allowBnodes=true;\n\t\t\t\telse if (topSymbol==\"storeProperty\") state.storeProperty=true;\n\t\t\t}\n\t\n\t\t\tfunction checkSideConditions(topSymbol) {\n\t\t\t\treturn(\n\t\t\t\t\t(state.allowVars || topSymbol!=\"var\") &&\n\t\t\t\t\t\t(state.allowBnodes ||\n\t\t\t\t\t\t (topSymbol!=\"blankNode\" &&\n\t\t\t\t\t\t\ttopSymbol!=\"blankNodePropertyList\" &&\n\t\t\t\t\t\t\ttopSymbol!=\"blankNodePropertyListPath\")));\n\t\t\t}\n\t\n\t\t\t// CodeMirror works with one line at a time,\n\t\t\t// but newline should behave like whitespace\n\t\t\t// - i.e. a definite break between tokens (for autocompleter)\n\t\t\tif (stream.pos==0)\n\t\t\t\tstate.possibleCurrent= state.possibleNext;\n\t\n\t\t\tvar tokenOb= nextToken();\n\t\n\t\n\t\t\tif (tokenOb.cat==\"<invalid_token>\") {\n\t\t\t\t// set error state, and\n\t\t\t\tif (state.OK==true) {\n\t\t\t\t\tstate.OK=false;\n\t\t\t\t\trecordFailurePos();\n\t\t\t\t}\n\t\t\t\tstate.complete=false;\n\t\t\t\t// alert(\"Invalid:\"+tokenOb.text);\n\t\t\t\treturn tokenOb.style;\n\t\t\t}\n\t\n\t\t\tif (tokenOb.cat == \"WS\" ||\n\t\t\t\t\ttokenOb.cat == \"COMMENT\") {\n\t\t\t\tstate.possibleCurrent= state.possibleNext;\n\t\t\t\treturn(tokenOb.style);\n\t\t\t}\n\t\t\t// Otherwise, run the parser until the token is digested\n\t\t\t// or failure\n\t\t\tvar finished= false;\n\t\t\tvar topSymbol;\n\t\t\tvar token= tokenOb.cat;\n\t\n\t\t\t// Incremental LL1 parse\n\t\t\twhile(state.stack.length>0 && token && state.OK && !finished ) {\n\t\t\t\ttopSymbol= state.stack.pop();\n\t\n\t\t\t\tif (!ll1_table[topSymbol]) {\n\t\t\t\t\t// Top symbol is a terminal\n\t\t\t\t\tif (topSymbol==token) {\n\t\t\t\t\t\t// Matching terminals\n\t\t\t\t\t\t// - consume token from input stream\n\t\t\t\t\t\tfinished=true;\n\t\t\t\t\t\tsetQueryType(topSymbol);\n\t\t\t\t\t\t// Check whether $ (end of input token) is poss next\n\t\t\t\t\t\t// for everything on stack\n\t\t\t\t\t\tvar allNillable=true;\n\t\t\t\t\t\tfor(var sp=state.stack.length;sp>0;--sp) {\n\t\t\t\t\t\t\tvar item=ll1_table[state.stack[sp-1]];\n\t\t\t\t\t\t\tif (!item || !item[\"$\"])\n\t\t\t\t\t\t\t\tallNillable=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstate.complete= allNillable;\n\t\t\t\t\t\tif (state.storeProperty && token.cat!=\"punc\") {\n\t\t\t\t\t\t\t\tstate.lastProperty= tokenOb.text;\n\t\t\t\t\t\t\t\tstate.storeProperty= false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.OK=false;\n\t\t\t\t\t\tstate.complete=false;\n\t\t\t\t\t\trecordFailurePos();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// topSymbol is nonterminal\n\t\t\t\t\t// - see if there is an entry for topSymbol\n\t\t\t\t\t// and nextToken in table\n\t\t\t\t\tvar nextSymbols= ll1_table[topSymbol][token];\n\t\t\t\t\tif (nextSymbols!=undefined\n\t\t\t\t\t\t\t&& checkSideConditions(topSymbol)\n\t\t\t\t\t\t )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Match - copy RHS of rule to stack\n\t\t\t\t\t\tfor (var i=nextSymbols.length-1; i>=0; --i)\n\t\t\t\t\t\t\tstate.stack.push(nextSymbols[i]);\n\t\t\t\t\t\t// Peform any non-grammatical side-effects\n\t\t\t\t\t\tsetSideConditions(topSymbol);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// No match in table - fail\n\t\t\t\t\t\tstate.OK=false;\n\t\t\t\t\t\tstate.complete=false;\n\t\t\t\t\t\trecordFailurePos();\n\t\t\t\t\t\tstate.stack.push(topSymbol);  // Shove topSymbol back on stack\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!finished && state.OK) { \n\t\t\t\tstate.OK=false; state.complete=false; recordFailurePos(); \n\t    }\n\t\n\t\t\tstate.possibleCurrent= state.possibleNext;\n\t\t\tstate.possibleNext= getPossibles(state.stack[state.stack.length-1]);\n\t\n\t\t\t// alert(token+\"=\"+tokenOb.style+'\\n'+state.stack);\n\t\t\treturn tokenOb.style;\n\t\t}\n\t\n\t\tvar indentTop={\n\t\t\t\"*[,, object]\": 3,\n\t\t\t\"*[(,),object]\": 3,\n\t\t\t\"*[(,),objectPath]\": 3,\n\t\t\t\"*[/,pathEltOrInverse]\": 2,\n\t\t\t\"object\": 2,\n\t\t\t\"objectPath\": 2,\n\t\t\t\"objectList\": 2,\n\t\t\t\"objectListPath\": 2,\n\t\t\t\"storeProperty\": 2,\n\t\t\t\"pathMod\": 2,\n\t\t\t\"?pathMod\": 2,\n\t\t\t\"propertyListNotEmpty\": 1,\n\t\t\t\"propertyList\": 1,\n\t\t\t\"propertyListPath\": 1,\n\t\t\t\"propertyListPathNotEmpty\": 1,\n\t\t\t\"?[verb,objectList]\": 1,\n\t\t\t\"?[or([verbPath, verbSimple]),objectList]\": 1,\n\t\t};\n\t\n\t\tvar indentTable={\n\t\t\t\"}\":1,\n\t\t\t\"]\":0,\n\t\t\t\")\":1,\n\t\t\t\"{\":-1,\n\t\t\t\"(\":-1,\n\t\t\t\"*[;,?[or([verbPath,verbSimple]),objectList]]\": 1,\n\t\t};\n\t\t\n\t\n\t\tfunction indent(state, textAfter) {\n\t\t\tvar n = 0; // indent level\n\t\t\tvar i=state.stack.length-1;\n\t\n\t\t\tif (/^[\\}\\]\\)]/.test(textAfter)) {\n\t\t\t\t// Skip stack items until after matching bracket\n\t\t\t\tvar closeBracket=textAfter.substr(0,1);\n\t\t\t\tfor( ;i>=0;--i)\n\t\t\t\t{\n\t\t\t\t\tif (state.stack[i]==closeBracket)\n\t\t\t\t\t{--i; break;};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Consider nullable non-terminals if at top of stack\n\t\t\t\tvar dn=indentTop[state.stack[i]];\n\t\t\t\tif (dn) { \n\t\t\t\t\tn+=dn; --i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor( ;i>=0;--i)\n\t\t\t{\n\t\t\t\tvar dn=indentTable[state.stack[i]];\n\t\t\t\tif (dn) {\n\t\t\t\t\tn+=dn;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn n * config.indentUnit;\n\t\t};\n\t\n\t\treturn {\n\t\t\ttoken: tokenBase,\n\t\t\tstartState: function(base) {\n\t\t\t\treturn {\n\t\t\t\t\ttokenize: tokenBase,\n\t\t\t\t\tOK: true,\n\t\t\t\t\tcomplete: acceptEmpty,\n\t\t\t\t\terrorStartPos: null,\n\t\t\t\t\terrorEndPos: null,\n\t\t\t\t\tqueryType: defaultQueryType,\n\t\t\t\t\tpossibleCurrent: getPossibles(startSymbol),\n\t\t\t\t\tpossibleNext: getPossibles(startSymbol),\n\t\t\t\t\tallowVars : true,\n\t\t\t\t\tallowBnodes : true,\n\t\t\t\t\tstoreProperty : false,\n\t\t\t\t\tlastProperty : \"\",\n\t\t\t\t\tstack: [startSymbol]\n\t\t\t\t}; \n\t\t\t},\n\t\t\tindent: indent,\n\t\t\telectricChars: \"}])\"\n\t\t};\n\t}\n\t);\n\tCodeMirror.defineMIME(\"application/x-sparql-query\", \"sparql11\");\n});\n","/*\n* TRIE implementation in Javascript\n* Copyright (c) 2010 Saurabh Odhyan | http://odhyan.com\n* \n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n* \n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n* \n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n* THE SOFTWARE.\n*\n* Date: Nov 7, 2010\n*/\n\n/*\n* A trie, or prefix tree, is a multi-way tree structure useful for storing strings over an alphabet. \n* It has been used to store large dictionaries of English (say) words in spell-checking programs \n* and in natural-language \"understanding\" programs.    \n* @see http://en.wikipedia.org/wiki/Trie\n* @see http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/\n/*\n\n* @class Trie\n* @constructor\n*/  \nvar Trie = module.exports = function() {\n    this.words = 0;\n    this.prefixes = 0;\n    this.children = [];\n};\n\nTrie.prototype = {\n    \n    /*\n    * Insert a word into the dictionary. \n    * Recursively traverse through the trie nodes, and create new node if does not already exist.\n    *\n    * @method insert\n    * @param {String} str Word to insert in the dictionary\n    * @param {Integer} pos Current index of the string to be inserted\n    * @return {Void}\n    */\n    insert: function(str, pos) {\n        if(str.length == 0) { //blank string cannot be inserted\n            return;\n        }\n        \n        var T = this,\n            k,\n            child;\n            \n        if(pos === undefined) {\n            pos = 0;\n        }\n        if(pos === str.length) {\n            T.words ++;\n            return;\n        }\n        T.prefixes ++;\n        k = str[pos];\n        if(T.children[k] === undefined) { //if node for this char doesn't exist, create one\n            T.children[k] = new Trie();\n        }\n        child = T.children[k];\n        child.insert(str, pos + 1);\n    },\n    \n    /*\n    * Remove a word from the dictionary.\n    *\n    * @method remove\n    * @param {String} str Word to be removed\n    * @param {Integer} pos Current index of the string to be removed\n    * @return {Void}\n    */\n    remove: function(str, pos) {\n        if(str.length == 0) {\n            return;\n        }\n        \n        var T = this,\n            k,\n            child;\n        \n        if(pos === undefined) {\n            pos = 0;\n        }   \n        if(T === undefined) {\n            return;\n        }\n        if(pos === str.length) {\n            T.words --;\n            return;\n        }\n        T.prefixes --;\n        k = str[pos];\n        child = T.children[k];\n        child.remove(str, pos + 1);\n    },\n    \n    /*\n    * Update an existing word in the dictionary. \n    * This method removes the old word from the dictionary and inserts the new word.\n    *\n    * @method update\n    * @param {String} strOld The old word to be replaced\n    * @param {String} strNew The new word to be inserted\n    * @return {Void}\n    */\n    update: function(strOld, strNew) {\n        if(strOld.length == 0 || strNew.length == 0) {\n            return;\n        }\n        this.remove(strOld);\n        this.insert(strNew);\n    },\n    \n    /*\n    * Count the number of times a given word has been inserted into the dictionary\n    *\n    * @method countWord\n    * @param {String} str Word to get count of\n    * @param {Integer} pos Current index of the given word\n    * @return {Integer} The number of times a given word exists in the dictionary\n    */\n    countWord: function(str, pos) {\n        if(str.length == 0) {\n            return 0;\n        }\n        \n        var T = this,\n            k,\n            child,\n            ret = 0;\n        \n        if(pos === undefined) {\n            pos = 0;\n        }   \n        if(pos === str.length) {\n            return T.words;\n        }\n        k = str[pos];\n        child = T.children[k];\n        if(child !== undefined) { //node exists\n            ret = child.countWord(str, pos + 1);\n        }\n        return ret;\n    },\n    \n    /*\n    * Count the number of times a given prefix exists in the dictionary\n    *\n    * @method countPrefix\n    * @param {String} str Prefix to get count of\n    * @param {Integer} pos Current index of the given prefix\n    * @return {Integer} The number of times a given prefix exists in the dictionary\n    */\n    countPrefix: function(str, pos) {\n        if(str.length == 0) {\n            return 0;\n        }\n        \n        var T = this,\n            k,\n            child,\n            ret = 0;\n\n        if(pos === undefined) {\n            pos = 0;\n        }\n        if(pos === str.length) {\n            return T.prefixes;\n        }\n        var k = str[pos];\n        child = T.children[k];\n        if(child !== undefined) { //node exists\n            ret = child.countPrefix(str, pos + 1); \n        }\n        return ret; \n    },\n    \n    /*\n    * Find a word in the dictionary\n    *\n    * @method find\n    * @param {String} str The word to find in the dictionary\n    * @return {Boolean} True if the word exists in the dictionary, else false\n    */\n    find: function(str) {\n        if(str.length == 0) {\n            return false;\n        }\n        \n        if(this.countWord(str) > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n    \n    /*\n    * Get all words in the dictionary\n    *\n    * @method getAllWords\n    * @param {String} str Prefix of current word\n    * @return {Array} Array of words in the dictionary\n    */\n    getAllWords: function(str) {\n        var T = this,\n            k,\n            child,\n            ret = [];\n        if(str === undefined) {\n            str = \"\";\n        }\n        if(T === undefined) {\n            return [];\n        }\n        if(T.words > 0) {\n            ret.push(str);\n        }\n        for(k in T.children) {\n            child = T.children[k];\n            ret = ret.concat(child.getAllWords(str + k));\n        }\n        return ret;\n    },\n    \n    /*\n    * Autocomplete a given prefix\n    *\n    * @method autoComplete\n    * @param {String} str Prefix to be completed based on dictionary entries\n    * @param {Integer} pos Current index of the prefix\n    * @return {Array} Array of possible suggestions\n    */\n    autoComplete: function(str, pos) {\n        \n        \n        var T = this,\n            k,\n            child;\n        if(str.length == 0) {\n\t\t\tif (pos === undefined) {\n\t\t\t\treturn T.getAllWords(str);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n        }\n        if(pos === undefined) {\n            pos = 0;\n        }   \n        k = str[pos];\n        child = T.children[k];\n        if(child === undefined) { //node doesn't exist\n            return [];\n        }\n        if(pos === str.length - 1) {\n            return child.getAllWords(str);\n        }\n        return child.autoComplete(str, pos + 1);\n    }\n};\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"fullScreen\", false, function(cm, val, old) {\n    if (old == CodeMirror.Init) old = false;\n    if (!old == !val) return;\n    if (val) setFullscreen(cm);\n    else setNormal(cm);\n  });\n\n  function setFullscreen(cm) {\n    var wrap = cm.getWrapperElement();\n    cm.state.fullScreenRestore = {scrollTop: window.pageYOffset, scrollLeft: window.pageXOffset,\n                                  width: wrap.style.width, height: wrap.style.height};\n    wrap.style.width = \"\";\n    wrap.style.height = \"auto\";\n    wrap.className += \" CodeMirror-fullscreen\";\n    document.documentElement.style.overflow = \"hidden\";\n    cm.refresh();\n  }\n\n  function setNormal(cm) {\n    var wrap = cm.getWrapperElement();\n    wrap.className = wrap.className.replace(/\\s*CodeMirror-fullscreen\\b/, \"\");\n    document.documentElement.style.overflow = \"\";\n    var info = cm.state.fullScreenRestore;\n    wrap.style.width = info.width; wrap.style.height = info.height;\n    window.scrollTo(info.scrollLeft, info.scrollTop);\n    cm.refresh();\n  }\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, strict, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.display.input.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init)\n      cm.off(\"cursorActivity\", doMatchBrackets);\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, strict, config){\n    return findMatchingBracket(this, pos, strict, config);\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var startCh, tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var start = start.line, has = hasImport(start), prev;\n  if (!has || hasImport(start - 1) || ((prev = hasImport(start - 2)) && prev.end.line == start - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(start, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var start = start.line, has = hasInclude(start);\n  if (has == null || hasInclude(start - 1) != null) return null;\n  for (var end = start;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(start, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: true,\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", updateInViewport);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", updateInViewport);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarksAt(Pos(line));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return true;\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var opts = cm.state.foldGutter.options;\n    if (gutter != opts.gutter) return;\n    cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter, opts = cm.state.foldGutter.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter, opts = cm.state.foldGutter.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter, line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? range.from : cm.firstLine();\n    this.max = range ? range.to - 1 : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var start = Pos(iter.line, iter.ch);\n        var close = findMatchingClose(iter, openTag[2]);\n        return close && {from: start, to: close.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    // We want a single cursor position.\n    if (this.listSelections().length > 1 || this.somethingSelected()) return;\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    var getHints = completion.options.hint;\n    if (!getHints) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    if (getHints.async)\n      getHints(this, function(hints) { completion.showHints(hints); }, completion.options);\n    else\n      return completion.showHints(getHints(this, completion.options));\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = this.buildOptions(options);\n    this.widget = this.onClose = null;\n  }\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n\n      if (this.widget) this.widget.close();\n      if (this.onClose) this.onClose();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    showHints: function(data) {\n      if (!data || !data.list.length || !this.active()) return this.close();\n\n      if (this.options.completeSingle && data.list.length == 1)\n        this.pick(data, 0);\n      else\n        this.showWidget(data);\n    },\n\n    showWidget: function(data) {\n      this.widget = new Widget(this, data);\n      CodeMirror.signal(data, \"shown\");\n\n      var debounce = 0, completion = this, finished;\n      var closeOn = this.options.closeCharacters;\n      var startPos = this.cm.getCursor(), startLen = this.cm.getLine(startPos.line).length;\n\n      var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n        return setTimeout(fn, 1000/60);\n      };\n      var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n      function done() {\n        if (finished) return;\n        finished = true;\n        completion.close();\n        completion.cm.off(\"cursorActivity\", activity);\n        if (data) CodeMirror.signal(data, \"close\");\n      }\n\n      function update() {\n        if (finished) return;\n        CodeMirror.signal(data, \"update\");\n        var getHints = completion.options.hint;\n        if (getHints.async)\n          getHints(completion.cm, finishUpdate, completion.options);\n        else\n          finishUpdate(getHints(completion.cm, completion.options));\n      }\n      function finishUpdate(data_) {\n        data = data_;\n        if (finished) return;\n        if (!data || !data.list.length) return done();\n        if (completion.widget) completion.widget.close();\n        completion.widget = new Widget(completion, data);\n      }\n\n      function clearDebounce() {\n        if (debounce) {\n          cancelAnimationFrame(debounce);\n          debounce = 0;\n        }\n      }\n\n      function activity() {\n        clearDebounce();\n        var pos = completion.cm.getCursor(), line = completion.cm.getLine(pos.line);\n        if (pos.line != startPos.line || line.length - pos.ch != startLen - startPos.ch ||\n            pos.ch < startPos.ch || completion.cm.somethingSelected() ||\n            (pos.ch && closeOn.test(line.charAt(pos.ch - 1)))) {\n          completion.close();\n        } else {\n          debounce = requestAnimationFrame(update);\n          if (completion.widget) completion.widget.close();\n        }\n      }\n      this.cm.on(\"cursorActivity\", activity);\n      this.onClose = done;\n    },\n\n    buildOptions: function(options) {\n      var editor = this.cm.options.hintOptions;\n      var out = {};\n      for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n      if (editor) for (var prop in editor)\n        if (editor[prop] !== undefined) out[prop] = editor[prop];\n      if (options) for (var prop in options)\n        if (options[prop] !== undefined) out[prop] = options[prop];\n      return out;\n    }\n  };\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    var startScroll = cm.getScrollInfo();\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", function(cm, options) {\n    var helpers = cm.getHelpers(cm.getCursor(), \"hint\"), words;\n    if (helpers.length) {\n      for (var i = 0; i < helpers.length; i++) {\n        var cur = helpers[i](cm, options);\n        if (cur && cur.list.length) return cur;\n      }\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      if (words) return CodeMirror.hint.fromList(cm, {words: words});\n    } else if (CodeMirror.hint.anyword) {\n      return CodeMirror.hint.anyword(cm, options);\n    }\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, token.string.length) == token.string)\n        found.push(word);\n    }\n\n    if (found.length) return {\n      list: found,\n      from: CodeMirror.Pos(cur.line, token.start),\n            to: CodeMirror.Pos(cur.line, token.end)\n    };\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: false,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.runMode = function(string, modespec, callback, options) {\n  var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n  var ie = /MSIE \\d/.test(navigator.userAgent);\n  var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n\n  if (callback.nodeType == 1) {\n    var tabSize = (options && options.tabSize) || CodeMirror.defaults.tabSize;\n    var node = callback, col = 0;\n    node.innerHTML = \"\";\n    callback = function(text, style) {\n      if (text == \"\\n\") {\n        // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n        // Emitting a carriage return makes everything ok.\n        node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n        col = 0;\n        return;\n      }\n      var content = \"\";\n      // replace tabs\n      for (var pos = 0;;) {\n        var idx = text.indexOf(\"\\t\", pos);\n        if (idx == -1) {\n          content += text.slice(pos);\n          col += text.length - pos;\n          break;\n        } else {\n          col += idx - pos;\n          content += text.slice(pos, idx);\n          var size = tabSize - col % tabSize;\n          col += size;\n          for (var i = 0; i < size; ++i) content += \" \";\n          pos = idx + 1;\n        }\n      }\n\n      if (style) {\n        var sp = node.appendChild(document.createElement(\"span\"));\n        sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n        sp.appendChild(document.createTextNode(content));\n      } else {\n        node.appendChild(document.createTextNode(content));\n      }\n    };\n  }\n\n  var lines = CodeMirror.splitLines(string), state = (options && options.state) || CodeMirror.startState(mode);\n  for (var i = 0, e = lines.length; i < e; ++i) {\n    if (i) callback(\"\\n\");\n    var stream = new CodeMirror.StringStream(lines[i]);\n    if (!stream.string && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol()) {\n      var style = mode.token(stream, state);\n      callback(stream.current(), style, i, stream.start, state);\n      stream.start = stream.pos;\n    }\n  }\n};\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var Pos = CodeMirror.Pos;\n\n  function SearchCursor(doc, query, pos, caseFold) {\n    this.atOccurrence = false; this.doc = doc;\n    if (caseFold == null && typeof query == \"string\") caseFold = false;\n\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {from: pos, to: pos};\n\n    // The matches method is filled in based on the type of query.\n    // It takes a position and a direction, and returns an object\n    // describing the next occurrence of the query, or null if no\n    // more matches were found.\n    if (typeof query != \"string\") { // Regexp match\n      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? \"ig\" : \"g\");\n      this.matches = function(reverse, pos) {\n        if (reverse) {\n          query.lastIndex = 0;\n          var line = doc.getLine(pos.line).slice(0, pos.ch), cutOff = 0, match, start;\n          for (;;) {\n            query.lastIndex = cutOff;\n            var newMatch = query.exec(line);\n            if (!newMatch) break;\n            match = newMatch;\n            start = match.index;\n            cutOff = match.index + (match[0].length || 1);\n            if (cutOff == line.length) break;\n          }\n          var matchLen = (match && match[0].length) || 0;\n          if (!matchLen) {\n            if (start == 0 && line.length == 0) {match = undefined;}\n            else if (start != doc.getLine(pos.line).length) {\n              matchLen++;\n            }\n          }\n        } else {\n          query.lastIndex = pos.ch;\n          var line = doc.getLine(pos.line), match = query.exec(line);\n          var matchLen = (match && match[0].length) || 0;\n          var start = match && match.index;\n          if (start + matchLen != line.length && !matchLen) matchLen = 1;\n        }\n        if (match && matchLen)\n          return {from: Pos(pos.line, start),\n                  to: Pos(pos.line, start + matchLen),\n                  match: match};\n      };\n    } else { // String query\n      var origQuery = query;\n      if (caseFold) query = query.toLowerCase();\n      var fold = caseFold ? function(str){return str.toLowerCase();} : function(str){return str;};\n      var target = query.split(\"\\n\");\n      // Different methods for single-line and multi-line queries\n      if (target.length == 1) {\n        if (!query.length) {\n          // Empty string would match anything and never progress, so\n          // we define it to match nothing instead.\n          this.matches = function() {};\n        } else {\n          this.matches = function(reverse, pos) {\n            if (reverse) {\n              var orig = doc.getLine(pos.line).slice(0, pos.ch), line = fold(orig);\n              var match = line.lastIndexOf(query);\n              if (match > -1) {\n                match = adjustPos(orig, line, match);\n                return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n              }\n             } else {\n               var orig = doc.getLine(pos.line).slice(pos.ch), line = fold(orig);\n               var match = line.indexOf(query);\n               if (match > -1) {\n                 match = adjustPos(orig, line, match) + pos.ch;\n                 return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n               }\n            }\n          };\n        }\n      } else {\n        var origTarget = origQuery.split(\"\\n\");\n        this.matches = function(reverse, pos) {\n          var last = target.length - 1;\n          if (reverse) {\n            if (pos.line - (target.length - 1) < doc.firstLine()) return;\n            if (fold(doc.getLine(pos.line).slice(0, origTarget[last].length)) != target[target.length - 1]) return;\n            var to = Pos(pos.line, origTarget[last].length);\n            for (var ln = pos.line - 1, i = last - 1; i >= 1; --i, --ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            var line = doc.getLine(ln), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            return {from: Pos(ln, cut), to: to};\n          } else {\n            if (pos.line + (target.length - 1) > doc.lastLine()) return;\n            var line = doc.getLine(pos.line), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            var from = Pos(pos.line, cut);\n            for (var ln = pos.line + 1, i = 1; i < last; ++i, ++ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            if (fold(doc.getLine(ln).slice(0, origTarget[last].length)) != target[last]) return;\n            return {from: from, to: Pos(ln, origTarget[last].length)};\n          }\n        };\n      }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false);},\n    findPrevious: function() {return this.find(true);},\n\n    find: function(reverse) {\n      var self = this, pos = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      function savePosAndFail(line) {\n        var pos = Pos(line, 0);\n        self.pos = {from: pos, to: pos};\n        self.atOccurrence = false;\n        return false;\n      }\n\n      for (;;) {\n        if (this.pos = this.matches(reverse, pos)) {\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        }\n        if (reverse) {\n          if (!pos.line) return savePosAndFail(0);\n          pos = Pos(pos.line-1, this.doc.getLine(pos.line-1).length);\n        }\n        else {\n          var maxLine = this.doc.lineCount();\n          if (pos.line == maxLine - 1) return savePosAndFail(maxLine);\n          pos = Pos(pos.line + 1, 0);\n        }\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from;},\n    to: function() {if (this.atOccurrence) return this.pos.to;},\n\n    replace: function(newText) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos) {\n    if (orig.length == folded.length) return pos;\n    for (var pos1 = Math.min(pos, orig.length);;) {\n      var len1 = orig.slice(0, pos1).toLowerCase().length;\n      if (len1 < pos) ++pos1;\n      else if (len1 > pos) --pos1;\n      else return pos1;\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = [], next;\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n    while (next = cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({anchor: cur.from(), head: cur.to()});\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0);\n  });\n});\n",";(function(win){\n\tvar store = {},\n\t\tdoc = win.document,\n\t\tlocalStorageName = 'localStorage',\n\t\tscriptTag = 'script',\n\t\tstorage\n\n\tstore.disabled = false\n\tstore.version = '1.3.17'\n\tstore.set = function(key, value) {}\n\tstore.get = function(key, defaultVal) {}\n\tstore.has = function(key) { return store.get(key) !== undefined }\n\tstore.remove = function(key) {}\n\tstore.clear = function() {}\n\tstore.transact = function(key, defaultVal, transactionFn) {\n\t\tif (transactionFn == null) {\n\t\t\ttransactionFn = defaultVal\n\t\t\tdefaultVal = null\n\t\t}\n\t\tif (defaultVal == null) {\n\t\t\tdefaultVal = {}\n\t\t}\n\t\tvar val = store.get(key, defaultVal)\n\t\ttransactionFn(val)\n\t\tstore.set(key, val)\n\t}\n\tstore.getAll = function() {}\n\tstore.forEach = function() {}\n\n\tstore.serialize = function(value) {\n\t\treturn JSON.stringify(value)\n\t}\n\tstore.deserialize = function(value) {\n\t\tif (typeof value != 'string') { return undefined }\n\t\ttry { return JSON.parse(value) }\n\t\tcatch(e) { return value || undefined }\n\t}\n\n\t// Functions to encapsulate questionable FireFox 3.6.13 behavior\n\t// when about.config::dom.storage.enabled === false\n\t// See https://github.com/marcuswestin/store.js/issues#issue/13\n\tfunction isLocalStorageNameSupported() {\n\t\ttry { return (localStorageName in win && win[localStorageName]) }\n\t\tcatch(err) { return false }\n\t}\n\n\tif (isLocalStorageNameSupported()) {\n\t\tstorage = win[localStorageName]\n\t\tstore.set = function(key, val) {\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setItem(key, store.serialize(val))\n\t\t\treturn val\n\t\t}\n\t\tstore.get = function(key, defaultVal) {\n\t\t\tvar val = store.deserialize(storage.getItem(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t}\n\t\tstore.remove = function(key) { storage.removeItem(key) }\n\t\tstore.clear = function() { storage.clear() }\n\t\tstore.getAll = function() {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = function(callback) {\n\t\t\tfor (var i=0; i<storage.length; i++) {\n\t\t\t\tvar key = storage.key(i)\n\t\t\t\tcallback(key, store.get(key))\n\t\t\t}\n\t\t}\n\t} else if (doc.documentElement.addBehavior) {\n\t\tvar storageOwner,\n\t\t\tstorageContainer\n\t\t// Since #userData storage applies only to specific paths, we need to\n\t\t// somehow link our data to a specific path.  We choose /favicon.ico\n\t\t// as a pretty safe option, since all browsers already make a request to\n\t\t// this URL anyway and being a 404 will not hurt us here.  We wrap an\n\t\t// iframe pointing to the favicon in an ActiveXObject(htmlfile) object\n\t\t// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)\n\t\t// since the iframe access rules appear to allow direct access and\n\t\t// manipulation of the document element, even for a 404 page.  This\n\t\t// document can be used instead of the current document (which would\n\t\t// have been limited to the current path) to perform #userData storage.\n\t\ttry {\n\t\t\tstorageContainer = new ActiveXObject('htmlfile')\n\t\t\tstorageContainer.open()\n\t\t\tstorageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src=\"/favicon.ico\"></iframe>')\n\t\t\tstorageContainer.close()\n\t\t\tstorageOwner = storageContainer.w.frames[0].document\n\t\t\tstorage = storageOwner.createElement('div')\n\t\t} catch(e) {\n\t\t\t// somehow ActiveXObject instantiation failed (perhaps some special\n\t\t\t// security settings or otherwse), fall back to per-path storage\n\t\t\tstorage = doc.createElement('div')\n\t\t\tstorageOwner = doc.body\n\t\t}\n\t\tvar withIEStorage = function(storeFunction) {\n\t\t\treturn function() {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments, 0)\n\t\t\t\targs.unshift(storage)\n\t\t\t\t// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx\n\t\t\t\t// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx\n\t\t\t\tstorageOwner.appendChild(storage)\n\t\t\t\tstorage.addBehavior('#default#userData')\n\t\t\t\tstorage.load(localStorageName)\n\t\t\t\tvar result = storeFunction.apply(store, args)\n\t\t\t\tstorageOwner.removeChild(storage)\n\t\t\t\treturn result\n\t\t\t}\n\t\t}\n\n\t\t// In IE7, keys cannot start with a digit or contain certain chars.\n\t\t// See https://github.com/marcuswestin/store.js/issues/40\n\t\t// See https://github.com/marcuswestin/store.js/issues/83\n\t\tvar forbiddenCharsRegex = new RegExp(\"[!\\\"#$%&'()*+,/\\\\\\\\:;<=>?@[\\\\]^`{|}~]\", \"g\")\n\t\tfunction ieKeyFix(key) {\n\t\t\treturn key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')\n\t\t}\n\t\tstore.set = withIEStorage(function(storage, key, val) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setAttribute(key, store.serialize(val))\n\t\t\tstorage.save(localStorageName)\n\t\t\treturn val\n\t\t})\n\t\tstore.get = withIEStorage(function(storage, key, defaultVal) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tvar val = store.deserialize(storage.getAttribute(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t})\n\t\tstore.remove = withIEStorage(function(storage, key) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tstorage.removeAttribute(key)\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.clear = withIEStorage(function(storage) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tstorage.load(localStorageName)\n\t\t\tfor (var i=0, attr; attr=attributes[i]; i++) {\n\t\t\t\tstorage.removeAttribute(attr.name)\n\t\t\t}\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.getAll = function(storage) {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = withIEStorage(function(storage, callback) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tfor (var i=0, attr; attr=attributes[i]; ++i) {\n\t\t\t\tcallback(attr.name, store.deserialize(storage.getAttribute(attr.name)))\n\t\t\t}\n\t\t})\n\t}\n\n\ttry {\n\t\tvar testKey = '__storejs__'\n\t\tstore.set(testKey, testKey)\n\t\tif (store.get(testKey) != testKey) { store.disabled = true }\n\t\tstore.remove(testKey)\n\t} catch(e) {\n\t\tstore.disabled = true\n\t}\n\tstore.enabled = !store.disabled\n\n\tif (typeof module != 'undefined' && module.exports && this.module !== module) { module.exports = store }\n\telse if (typeof define === 'function' && define.amd) { define(store) }\n\telse { win.store = store }\n\n})(Function('return this')());\n","module.exports={\n  \"name\": \"yasgui-utils\",\n  \"version\": \"1.5.0\",\n  \"description\": \"Utils for YASGUI libs\",\n  \"main\": \"src/main.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/YASGUI/Utils.git\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://yasgui.github.io/license.txt\"\n    }\n  ],\n  \"author\": \"Laurens Rietveld\",\n  \"maintainers\": [\n    {\n      \"name\": \"Laurens Rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\",\n      \"web\": \"http://laurensrietveld.nl\"\n    }\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/YASGUI/Utils/issues\"\n  },\n  \"homepage\": \"https://github.com/YASGUI/Utils\",\n  \"dependencies\": {\n    \"store\": \"^1.3.14\"\n  }\n}\n","window.console = window.console || {\"log\":function(){}};//make sure any console statements don't break IE\nmodule.exports = {\n\tstorage: require(\"./storage.js\"),\n\tsvg: require(\"./svg.js\"),\n\tversion: {\n\t\t\"yasgui-utils\" : require(\"../package.json\").version,\n\t}\n};\n","var store = require(\"store\");\nvar times = {\n\tday: function() {\n\t\treturn 1000 * 3600 * 24;//millis to day\n\t},\n\tmonth: function() {\n\t\ttimes.day() * 30;\n\t},\n\tyear: function() {\n\t\ttimes.month() * 12;\n\t}\n};\n\nvar root = module.exports = {\n\tset : function(key, val, exp) {\n    if (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key && val) {\n\t\t\tif (typeof exp == \"string\") {\n\t\t\t\texp = times[exp]();\n\t\t\t}\n\t\t\t//try to store string for dom objects (e.g. XML result). Otherwise, we might get a circular reference error when stringifying this\n\t\t\tif (val.documentElement) val = new XMLSerializer().serializeToString(val.documentElement);\n\t\t\tstore.set(key, {\n\t\t\t\tval : val,\n\t\t\t\texp : exp,\n\t\t\t\ttime : new Date().getTime()\n\t\t\t});\n\t\t}\n\t},\n\tremove: function(key) {\n    if (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) store.remove(key)\n\t},\n\tget : function(key) {\n    if (!store.enabled) return null;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) {\n\t\t\tvar info = store.get(key);\n\t\t\tif (!info) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (info.exp && new Date().getTime() - info.time > info.exp) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn info.val;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n};\n","module.exports = {\n\tdraw: function(parent, svgString) {\n\t\tif (!parent) return;\n\t\tvar el = module.exports.getElement(svgString);\n\t\tif (el) {\n\t\t\tif (parent.append) {\n\t\t\t\tparent.append(el);\n\t\t\t} else {\n\t\t\t\t//regular dom doc\n\t\t\t\tparent.appendChild(el);\n\t\t\t}\n\t\t}\n\t},\n\tgetElement: function(svgString) {\n\t\tif (svgString && svgString.indexOf(\"<svg\") == 0) {\n\t\t\t//no style passed via config. guess own styles\n\t\t\tvar parser = new DOMParser();\n\t\t\tvar dom = parser.parseFromString(svgString, \"text/xml\");\n\t\t\tvar svg = dom.documentElement;\n\t\t\t\n\t\t\tvar svgContainer = document.createElement(\"div\");\n\t\t\tsvgContainer.className = 'svgImg';\n\t\t\tsvgContainer.appendChild(svg);\n\t\t\treturn svgContainer;\n\t\t}\n\t\treturn false;\n\t}\n};","module.exports={\n  \"name\": \"yasgui-yasqe\",\n  \"description\": \"Yet Another SPARQL Query Editor\",\n  \"version\": \"2.3.4\",\n  \"main\": \"src/main.js\",\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://yasqe.yasgui.org/license.txt\"\n    }\n  ],\n  \"author\": \"Laurens Rietveld\",\n  \"homepage\": \"http://yasqe.yasgui.org\",\n  \"devDependencies\": {\n    \"browserify\": \"^6.1.0\",\n    \"gulp\": \"~3.6.0\",\n    \"gulp-bump\": \"^0.1.11\",\n    \"gulp-concat\": \"^2.4.1\",\n    \"gulp-connect\": \"^2.0.5\",\n    \"gulp-embedlr\": \"^0.5.2\",\n    \"gulp-filter\": \"^1.0.2\",\n    \"gulp-git\": \"^0.5.2\",\n    \"gulp-jsvalidate\": \"^0.2.0\",\n    \"gulp-livereload\": \"^1.3.1\",\n    \"gulp-minify-css\": \"0.3.11\",\n    \"gulp-notify\": \"^2.0.1\",\n    \"gulp-rename\": \"^1.2.0\",\n    \"gulp-streamify\": \"0.0.5\",\n    \"gulp-tag-version\": \"^1.1.0\",\n    \"gulp-uglify\": \"^1.0.1\",\n    \"require-dir\": \"^0.1.0\",\n    \"run-sequence\": \"^1.0.1\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"~0.1.1\",\n    \"watchify\": \"^0.6.4\",\n    \"gulp-sourcemaps\": \"^1.2.8\",\n    \"exorcist\": \"^0.1.6\",\n    \"vinyl-transform\": \"0.0.1\",\n    \"gulp-sass\": \"^1.2.2\",\n    \"bootstrap-sass\": \"^3.3.1\",\n    \"browserify-transform-tools\": \"^1.2.1\",\n    \"gulp-cssimport\": \"^1.3.1\"\n  },\n  \"bugs\": \"https://github.com/YASGUI/YASQE/issues/\",\n  \"keywords\": [\n    \"JavaScript\",\n    \"SPARQL\",\n    \"Editor\",\n    \"Semantic Web\",\n    \"Linked Data\"\n  ],\n  \"maintainers\": [\n    {\n      \"name\": \"Laurens Rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\",\n      \"web\": \"http://laurensrietveld.nl\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/YASGUI/YASQE.git\"\n  },\n  \"dependencies\": {\n    \"jquery\": \"~ 1.11.0\",\n    \"codemirror\": \"^4.7.0\",\n    \"yasgui-utils\": \"^1.4.1\"\n  },\n  \"optionalShim\": {\n    \"codemirror\": {\n      \"require\": \"codemirror\",\n      \"global\": \"CodeMirror\"\n    },\n    \"jquery\": {\n      \"require\": \"jquery\",\n      \"global\": \"jQuery\"\n    },\n    \"../../lib/codemirror\": {\n      \"require\": \"codemirror\",\n      \"global\": \"CodeMirror\"\n    }\n  }\n}\n","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tutils = require('../utils.js'),\n\tyutils = require('yasgui-utils'),\n\tTrie = require('../../lib/trie.js');\n\nmodule.exports = function(YASQE, yasqe) {\n\tvar completionNotifications = {};\n\tvar completers = {};\n\tvar tries = {};\n\t\n\tyasqe.on('cursorActivity', function(yasqe, eventInfo) {\n\t\tautoComplete(true);\n\t});\n\tyasqe.on('change', function() {\n\t\tvar needPossibleAdjustment = [];\n\t\tfor (var notificationName in completionNotifications) {\n\t\t\tif (completionNotifications[notificationName].is(':visible')) {\n\t\t\t\tneedPossibleAdjustment.push(completionNotifications[notificationName]);\n\t\t\t}\n\t\t}\n\t\tif (needPossibleAdjustment.length > 0) {\n\t\t\t//position completion notifications\n\t\t\tvar scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\n\t\t\tvar offset = 0;\n\t\t\tif (scrollBar.is(\":visible\")) {\n\t\t\t\toffset = scrollBar.outerWidth();\n\t\t\t}\n\t\t\tneedPossibleAdjustment.forEach(function(notification){notification.css(\"right\", offset)});\n\t\t}\n\t});\n\n\t\n\n\t/**\n\t * Store bulk completions in memory as trie, and store these in localstorage as well (if enabled)\n\t * \n\t * @method doc.storeBulkCompletions\n\t * @param completions {array}\n\t */\n\tvar storeBulkCompletions = function(completer, completions) {\n\t\t// store array as trie\n\t\ttries[completer.name] = new Trie();\n\t\tfor (var i = 0; i < completions.length; i++) {\n\t\t\ttries[completer.name].insert(completions[i]);\n\t\t}\n\t\t// store in localstorage as well\n\t\tvar storageId = utils.getPersistencyId(yasqe, completer.persistent);\n\t\tif (storageId) yutils.storage.set(storageId, completions, \"month\");\n\t};\n\t\n\tvar initCompleter = function(name, completionInit) {\n\t\tvar completer = completers[name] = new completionInit(yasqe, name);\n\t\tcompleter.name = name;\n\t\tif (completer.bulk) {\n\t\t\tvar storeArrayAsBulk = function(suggestions) {\n\t\t\t\tif (suggestions && suggestions instanceof Array && suggestions.length > 0) {\n\t\t\t\t\tstoreBulkCompletions(completer, suggestions);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (completer.get instanceof Array) {\n\t\t\t\t// we don't care whether the completions are already stored in\n\t\t\t\t// localstorage. just use this one\n\t\t\t\tstoreArrayAsBulk(completer.get);\n\t\t\t} else {\n\t\t\t\t// if completions are defined in localstorage, use those! (calling the\n\t\t\t\t// function may come with overhead (e.g. async calls))\n\t\t\t\tvar completionsFromStorage = null;\n\t\t\t\tvar persistencyIdentifier = utils.getPersistencyId(yasqe, completer.persistent);\n\t\t\t\tif (persistencyIdentifier)\n\t\t\t\t\tcompletionsFromStorage = yutils.storage.get(persistencyIdentifier);\n\t\t\t\tif (completionsFromStorage && completionsFromStorage.length > 0) {\n\t\t\t\t\tstoreArrayAsBulk(completionsFromStorage);\n\t\t\t\t} else {\n\t\t\t\t\t// nothing in storage. check whether we have a function via which we\n\t\t\t\t\t// can get our prefixes\n\t\t\t\t\tif (completer.get instanceof Function) {\n\t\t\t\t\t\tif (completer.async) {\n\t\t\t\t\t\t\tcompleter.get(null, storeArrayAsBulk);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstoreArrayAsBulk(completer.get());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tvar autoComplete = function(fromAutoShow) {\n\t\tif (yasqe.somethingSelected())\n\t\t\treturn;\n\t\tvar tryHintType = function(completer) {\n\t\t\tif (fromAutoShow // from autoShow, i.e. this gets called each time the editor content changes\n\t\t\t\t\t&& (!completer.autoShow // autoshow for  this particular type of autocompletion is -not- enabled\n\t\t\t\t\t|| (!completer.bulk && completer.async)) // async is enabled (don't want to re-do ajax-like request for every editor change)\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar hintConfig = {\n\t\t\t\tcloseCharacters : /(?=a)b/,\n\t\t\t\tcompleteSingle: false\n\t\t\t};\n\t\t\tif (!completer.bulk && completer.async) {\n\t\t\t\thintConfig.async = true;\n\t\t\t}\n\t\t\tvar wrappedHintCallback = function(yasqe, callback) {\n\t\t\t\treturn getCompletionHintsObject(completer, callback);\n\t\t\t};\n\t\t\tvar result = YASQE.showHint(yasqe, wrappedHintCallback, hintConfig);\n\t\t\treturn true;\n\t\t};\n\t\tfor ( var completerName in completers) {\n\t\t\tif ($.inArray(completerName, yasqe.options.autocompleters) == -1) continue;//this completer is disabled\n\t\t\tvar completer = completers[completerName];\n\t\t\tif (!completer.isValidCompletionPosition) continue; //no way to check whether we are in a valid position\n\t\t\t\n\t\t\tif (!completer.isValidCompletionPosition()) {\n\t\t\t\t//if needed, fire callbacks for when we are -not- in valid completion position\n\t\t\t\tif (completer.callbacks && completer.callbacks.invalidPosition) {\n\t\t\t\t\tcompleter.callbacks.invalidPosition(yasqe, completer);\n\t\t\t\t}\n\t\t\t\t//not in a valid position, so continue to next completion candidate type\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// run valid position handler, if there is one (if it returns false, stop the autocompletion!)\n\t\t\tif (completer.callbacks && completer.callbacks.validPosition) {\n\t\t\t\tif (completer.callbacks.validPosition(yasqe, completer) === false)\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvar success = tryHintType(completer);\n\t\t\tif (success)\n\t\t\t\tbreak;\n\t\t}\n\t};\n\t\n\t\n\n\tvar getCompletionHintsObject = function(completer, callback) {\n\t\tvar getSuggestionsFromToken = function(partialToken) {\n\t\t\tvar stringToAutocomplete = partialToken.autocompletionString || partialToken.string;\n\t\t\tvar suggestions = [];\n\t\t\tif (tries[completer.name]) {\n\t\t\t\tsuggestions = tries[completer.name].autoComplete(stringToAutocomplete);\n\t\t\t} else if (typeof completer.get == \"function\" && completer.async == false) {\n\t\t\t\tsuggestions = completer.get(stringToAutocomplete);\n\t\t\t} else if (typeof completer.get == \"object\") {\n\t\t\t\tvar partialTokenLength = stringToAutocomplete.length;\n\t\t\t\tfor (var i = 0; i < completer.get.length; i++) {\n\t\t\t\t\tvar completion = completer.get[i];\n\t\t\t\t\tif (completion.slice(0, partialTokenLength) == stringToAutocomplete) {\n\t\t\t\t\t\tsuggestions.push(completion);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn getSuggestionsAsHintObject(suggestions, completer, partialToken);\n\t\t\t\n\t\t};\n\t\t\n\t\t\n\t\tvar token = yasqe.getCompleteToken();\n\t\tif (completer.preProcessToken) {\n\t\t\ttoken = completer.preProcessToken(token);\n\t\t}\n\t\t\n\t\tif (token) {\n\t\t\t// use custom completionhint function, to avoid reaching a loop when the\n\t\t\t// completionhint is the same as the current token\n\t\t\t// regular behaviour would keep changing the codemirror dom, hence\n\t\t\t// constantly calling this callback\n\t\t\tif (!completer.bulk && completer.async) {\n\t\t\t\tvar wrappedCallback = function(suggestions) {\n\t\t\t\t\tcallback(getSuggestionsAsHintObject(suggestions, completer, token));\n\t\t\t\t};\n\t\t\t\tcompleter.get(token, wrappedCallback);\n\t\t\t} else {\n\t\t\t\treturn getSuggestionsFromToken(token);\n\n\t\t\t}\n\t\t}\n\t};\n\t\n\n\t/**\n\t *  get our array of suggestions (strings) in the codemirror hint format\n\t */\n\tvar getSuggestionsAsHintObject = function(suggestions, completer, token) {\n\t\tvar hintList = [];\n\t\tfor (var i = 0; i < suggestions.length; i++) {\n\t\t\tvar suggestedString = suggestions[i];\n\t\t\tif (completer.postProcessToken) {\n\t\t\t\tsuggestedString = completer.postProcessToken(token, suggestedString);\n\t\t\t}\n\t\t\thintList.push({\n\t\t\t\ttext : suggestedString,\n\t\t\t\tdisplayText : suggestedString,\n\t\t\t\thint : selectHint,\n\t\t\t});\n\t\t}\n\t\t\n\t\tvar cur = yasqe.getCursor();\n\t\tvar returnObj = {\n\t\t\tcompletionToken : token.string,\n\t\t\tlist : hintList,\n\t\t\tfrom : {\n\t\t\t\tline : cur.line,\n\t\t\t\tch : token.start\n\t\t\t},\n\t\t\tto : {\n\t\t\t\tline : cur.line,\n\t\t\t\tch : token.end\n\t\t\t}\n\t\t};\n\t\t//if we have some autocompletion handlers specified, add these these to the object. Codemirror will take care of firing these\n\t\tif (completer.callbacks) {\n\t\t\tfor ( var callbackName in completer.callbacks) {\n\t\t\t\tif (completer.callbacks[callbackName]) \n\t\t\t\t\tyasqe.on(returnObj, callbackName, completer.callbacks[callbackName]);\n\t\t\t}\n\t\t}\n\t\treturn returnObj;\n\t};\n\t\n\treturn {\n\t\tinit: initCompleter,\n\t\tcompleters: completers,\n\t\tnotifications: {\n\t\t\tgetEl: function(completer) {\n\t\t\t\treturn $(completionNotifications[completer.name]);\n\t\t\t},\n\t\t\tshow: function(yasqe, completer) {\n\t\t\t\t//only draw when the user needs to use a keypress to summon autocompletions\n\t\t\t\tif (!completer.autoshow) {\n\t\t\t\t\tif (!completionNotifications[completer.name]) completionNotifications[completer.name] = $(\"<div class='completionNotification'></div>\");\n\t\t\t\t\tcompletionNotifications[completer.name]\n\t\t\t\t\t\t.show()\n\t\t\t\t\t\t.text(\"Press \" + (navigator.userAgent.indexOf('Mac OS X') != -1? \"CMD\": \"CTRL\") + \" - <spacebar> to autocomplete\")\n\t\t\t\t\t\t.appendTo($(yasqe.getWrapperElement()));\n\t\t\t\t}\n\t\t\t},\n\t\t\thide: function(yasqe, completer) {\n\t\t\t\tif (completionNotifications[completer.name]) {\n\t\t\t\t\tcompletionNotifications[completer.name].hide();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t},\n\t\tautoComplete: autoComplete,\n\t\tgetTrie: function(completer) {return (typeof completer == \"string\"? tries[completer]: tries[completer.name]);}\n\t}\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * function which fires after the user selects a completion. this function checks whether we actually need to store this one (if completion is same as current token, don't do anything)\n */\nvar selectHint = function(yasqe, data, completion) {\n\tif (completion.text != yasqe.getTokenAt(yasqe.getCursor()).string) {\n\t\tyasqe.replaceRange(completion.text, data.from, data.to);\n\t}\n};\n\n\n\n\n\n//\n//module.exports = {\n//\tpreprocessPrefixTokenForCompletion: preprocessPrefixTokenForCompletion,\n//\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\n//\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\n//\tshowCompletionNotification: showCompletionNotification,\n//\thideCompletionNotification: hideCompletionNotification,\n//\tautoComplete: autoComplete,\n//\tautocompleteVariables: autocompleteVariables,\n//\tfetchFromPrefixCc: fetchFromPrefixCc,\n//\tfetchFromLov: fetchFromLov,\n////\tstoreBulkCompletions: storeBulkCompletions,\n//\tloadBulkCompletions: loadBulkCompletions,\n//};\n","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe, name) {\n\treturn {\n\t\tisValidCompletionPosition : function(){return module.exports.isValidCompletionPosition(yasqe);},\n\t\tget : function(token, callback) {\n\t\t\treturn require('./utils').fetchFromLov(yasqe, this, token, callback);\n\t\t},\n\t\tpreProcessToken: function(token) {return module.exports.preProcessToken(yasqe, token)},\n\t\tpostProcessToken: function(token, suggestedString) {return module.exports.postProcessToken(yasqe, token, suggestedString);},\n\t\tasync : true,\n\t\tbulk : false,\n\t\tautoShow : false,\n\t\tpersistent : name,\n\t\tcallbacks : {\n\t\t\tvalidPosition : yasqe.autocompleters.notifications.show,\n\t\t\tinvalidPosition : yasqe.autocompleters.notifications.hide,\n\t\t}\n\t}\n};\n\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n\tvar token = yasqe.getCompleteToken();\n\tif (token.string.indexOf(\"?\") == 0)\n\t\treturn false;\n\tvar cur = yasqe.getCursor();\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n\tif (previousToken.string == \"a\")\n\t\treturn true;\n\tif (previousToken.string == \"rdf:type\")\n\t\treturn true;\n\tif (previousToken.string == \"rdfs:domain\")\n\t\treturn true;\n\tif (previousToken.string == \"rdfs:range\")\n\t\treturn true;\n\treturn false;\n};\nmodule.exports.preProcessToken = function(yasqe, token) {\n\treturn require('./utils.js').preprocessResourceTokenForCompletion(yasqe, token);\n};\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\n\treturn require('./utils.js').postprocessResourceTokenForCompletion(yasqe, token, suggestedString)\n};","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n//this is a mapping from the class names (generic ones, for compatability with codemirror themes), to what they -actually- represent\nvar tokenTypes = {\n\t\"string-2\" : \"prefixed\",\n\t\"atom\": \"var\"\n};\n\nmodule.exports = function(yasqe, completerName) {\n\t//this autocompleter also fires on-change!\n\tyasqe.on(\"change\", function() {\n\t\tmodule.exports.appendPrefixIfNeeded(yasqe, completerName);\n\t});\n\t\n\t\n\treturn {\n\t\tisValidCompletionPosition : function(){return module.exports.isValidCompletionPosition(yasqe);},\n\t\tget : function(token, callback) {\n\t\t\t$.get(\"http://prefix.cc/popular/all.file.json\", function(data) {\n\t\t\t\tvar prefixArray = [];\n\t\t\t\tfor ( var prefix in data) {\n\t\t\t\t\tif (prefix == \"bif\")\n\t\t\t\t\t\tcontinue;// skip this one! see #231\n\t\t\t\t\tvar completeString = prefix + \": <\" + data[prefix] + \">\";\n\t\t\t\t\tprefixArray.push(completeString);// the array we want to store in localstorage\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tprefixArray.sort();\n\t\t\t\tcallback(prefixArray);\n\t\t\t});\n\t\t},\n\t\tpreProcessToken: function(token) {return module.exports.preprocessPrefixTokenForCompletion(yasqe, token)},\n\t\tasync : true,\n\t\tbulk : true,\n\t\tautoShow: true,\n\t\tpersistent : completerName,\n\t};\n};\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n\tvar cur = yasqe.getCursor(), token = yasqe.getTokenAt(cur);\n\n\t// not at end of line\n\tif (yasqe.getLine(cur.line).length > cur.ch)\n\t\treturn false;\n\n\tif (token.type != \"ws\") {\n\t\t// we want to complete token, e.g. when the prefix starts with an a\n\t\t// (treated as a token in itself..)\n\t\t// but we to avoid including the PREFIX tag. So when we have just\n\t\t// typed a space after the prefix tag, don't get the complete token\n\t\ttoken = yasqe.getCompleteToken();\n\t}\n\n\t// we shouldnt be at the uri part the prefix declaration\n\t// also check whether current token isnt 'a' (that makes codemirror\n\t// thing a namespace is a possiblecurrent\n\tif (!token.string.indexOf(\"a\") == 0\n\t\t\t&& $.inArray(\"PNAME_NS\", token.state.possibleCurrent) == -1)\n\t\treturn false;\n\n\t// First token of line needs to be PREFIX,\n\t// there should be no trailing text (otherwise, text is wrongly inserted\n\t// in between)\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n\tif (!previousToken || previousToken.string.toUpperCase() != \"PREFIX\") return false;\n\treturn true;\n};\nmodule.exports.preprocessPrefixTokenForCompletion = function(yasqe, token) {\n\tvar previousToken = yasqe.getPreviousNonWsToken(yasqe.getCursor().line, token);\n\tif (previousToken && previousToken.string && previousToken.string.slice(-1) == \":\") {\n\t\t//combine both tokens! In this case we have the cursor at the end of line \"PREFIX bla: <\".\n\t\t//we want the token to be \"bla: <\", en not \"<\"\n\t\ttoken = {\n\t\t\tstart: previousToken.start,\n\t\t\tend: token.end,\n\t\t\tstring: previousToken.string + \" \" + token.string,\n\t\t\tstate: token.state\n\t\t};\n\t}\n\treturn token;\n};\n/**\n * Check whether typed prefix is declared. If not, automatically add declaration\n * using list from prefix.cc\n * \n * @param yasqe\n */\nmodule.exports.appendPrefixIfNeeded = function(yasqe, completerName) {\n\tif (!yasqe.autocompleters.getTrie(completerName))\n\t\treturn;// no prefixed defined. just stop\n\tif (!yasqe.options.autocompleters || yasqe.options.autocompleters.indexOf(completerName) == -1) return;//this autocompleter is disabled\n\tvar cur = yasqe.getCursor();\n\n\tvar token = yasqe.getTokenAt(cur);\n\tif (tokenTypes[token.type] == \"prefixed\") {\n\t\tvar colonIndex = token.string.indexOf(\":\");\n\t\tif (colonIndex !== -1) {\n\t\t\t// check previous token isnt PREFIX, or a '<'(which would mean we are in a uri)\n//\t\t\tvar firstTokenString = yasqe.getNextNonWsToken(cur.line).string.toUpperCase();\n\t\t\tvar lastNonWsTokenString = yasqe.getPreviousNonWsToken(cur.line, token).string.toUpperCase();\n\t\t\tvar previousToken = yasqe.getTokenAt({\n\t\t\t\tline : cur.line,\n\t\t\t\tch : token.start\n\t\t\t});// needs to be null (beginning of line), or whitespace\n\t\t\tif (lastNonWsTokenString != \"PREFIX\"\n\t\t\t\t\t&& (previousToken.type == \"ws\" || previousToken.type == null)) {\n\t\t\t\t// check whether it isnt defined already (saves us from looping\n\t\t\t\t// through the array)\n\t\t\t\tvar currentPrefix = token.string.substring(0, colonIndex + 1);\n\t\t\t\tvar queryPrefixes = yasqe.getPrefixesFromQuery();\n\t\t\t\tif (queryPrefixes[currentPrefix.slice(0,-1)] == null) {\n\t\t\t\t\t// ok, so it isnt added yet!\n\t\t\t\t\tvar completions = yasqe.autocompleters.getTrie(completerName).autoComplete(currentPrefix);\n\t\t\t\t\tif (completions.length > 0) {\n\t\t\t\t\t\tyasqe.addPrefixes(completions[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe, name) {\n\treturn {\n\t\tisValidCompletionPosition : function(){return module.exports.isValidCompletionPosition(yasqe);},\n\t\tget : function(token, callback) {\n\t\t\treturn require('./utils').fetchFromLov(yasqe, this, token, callback);\n\t\t},\n\t\tpreProcessToken: function(token) {return module.exports.preProcessToken(yasqe, token)},\n\t\tpostProcessToken: function(token, suggestedString) {return module.exports.postProcessToken(yasqe, token, suggestedString);},\n\t\tasync : true,\n\t\tbulk : false,\n\t\tautoShow : false,\n\t\tpersistent : name,\n\t\tcallbacks : {\n\t\t\tvalidPosition : yasqe.autocompleters.notifications.show,\n\t\t\tinvalidPosition : yasqe.autocompleters.notifications.hide,\n\t\t}\n\t}\n};\n\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n\tvar token = yasqe.getCompleteToken();\n\tif (token.string.length == 0) \n\t\treturn false; //we want -something- to autocomplete\n\tif (token.string.indexOf(\"?\") == 0)\n\t\treturn false; // we are typing a var\n\tif ($.inArray(\"a\", token.state.possibleCurrent) >= 0)\n\t\treturn true;// predicate pos\n\tvar cur = yasqe.getCursor();\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n\tif (previousToken.string == \"rdfs:subPropertyOf\")\n\t\treturn true;\n\n\t// hmm, we would like -better- checks here, e.g. checking whether we are\n\t// in a subject, and whether next item is a rdfs:subpropertyof.\n\t// difficult though... the grammar we use is unreliable when the query\n\t// is invalid (i.e. during typing), and often the predicate is not typed\n\t// yet, when we are busy writing the subject...\n\treturn false;\n};\nmodule.exports.preProcessToken = function(yasqe, token) {\n\treturn require('./utils.js').preprocessResourceTokenForCompletion(yasqe, token);\n};\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\n\treturn require('./utils.js').postprocessResourceTokenForCompletion(yasqe, token, suggestedString)\n};","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tutils = require('./utils.js'),\n\tyutils = require('yasgui-utils');\n/**\n * Where the base class only contains functionality related to -all- completions, this class contains some utils used here and there in our autocompletions\n */\n\n\n\n/**\n * Converts rdf:type to http://.../type and converts <http://...> to http://...\n * Stores additional info such as the used namespace and prefix in the token object\n */\nvar preprocessResourceTokenForCompletion = function(yasqe, token) {\n\tvar queryPrefixes = yasqe.getPrefixesFromQuery();\n\tif (!token.string.indexOf(\"<\") == 0) {\n\t\ttoken.tokenPrefix = token.string.substring(0,\ttoken.string.indexOf(\":\") + 1);\n\n\t\tif (queryPrefixes[token.tokenPrefix.slice(0,-1)] != null) {\n\t\t\ttoken.tokenPrefixUri = queryPrefixes[token.tokenPrefix.slice(0,-1)];\n\t\t}\n\t}\n\n\ttoken.autocompletionString = token.string.trim();\n\tif (!token.string.indexOf(\"<\") == 0 && token.string.indexOf(\":\") > -1) {\n\t\t// hmm, the token is prefixed. We still need the complete uri for autocompletions. generate this!\n\t\tfor (var prefix in queryPrefixes) {\n\t\t\tif (token.string.indexOf(prefix) == 0) {\n\t\t\t\ttoken.autocompletionString = queryPrefixes[prefix];\n\t\t\t\ttoken.autocompletionString += token.string.substring(prefix.length + 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (token.autocompletionString.indexOf(\"<\") == 0)\ttoken.autocompletionString = token.autocompletionString.substring(1);\n\tif (token.autocompletionString.indexOf(\">\", token.length - 1) !== -1) token.autocompletionString = token.autocompletionString.substring(0,\ttoken.autocompletionString.length - 1);\n\treturn token;\n};\n\nvar postprocessResourceTokenForCompletion = function(yasqe, token, suggestedString) {\n\tif (token.tokenPrefix && token.autocompletionString && token.tokenPrefixUri) {\n\t\t// we need to get the suggested string back to prefixed form\n\t\tsuggestedString = token.tokenPrefix + suggestedString.substring(token.tokenPrefixUri.length);\n\t} else {\n\t\t// it is a regular uri. add '<' and '>' to string\n\t\tsuggestedString = \"<\" + suggestedString + \">\";\n\t}\n\treturn suggestedString;\n};\n\nvar fetchFromLov = function(yasqe, completer, token, callback) {\n\tif (!token || !token.string || token.string.trim().length == 0) {\n\t\tyasqe.autocompleters.notifications.getEl(completer)\n\t\t\t.empty()\n\t\t\t.append(\"Nothing to autocomplete yet!\");\n\t\treturn false;\n\t}\n\tvar maxResults = 50;\n\n\tvar args = {\n\t\tq : token.autocompletionString,\n\t\tpage : 1\n\t};\n\tif (completer.name == \"classes\") {\n\t\targs.type = \"class\";\n\t} else {\n\t\targs.type = \"property\";\n\t}\n\tvar results = [];\n\tvar url = \"\";\n\tvar updateUrl = function() {\n\t\turl = \"http://lov.okfn.org/dataset/lov/api/v2/autocomplete/terms?\"\n\t\t\t\t+ $.param(args);\n\t};\n\tupdateUrl();\n\tvar increasePage = function() {\n\t\targs.page++;\n\t\tupdateUrl();\n\t};\n\tvar doRequests = function() {\n\t\t$.get(\n\t\t\t\turl,\n\t\t\t\tfunction(data) {\n\t\t\t\t\tfor (var i = 0; i < data.results.length; i++) {\n\t\t\t\t\t\tif ($.isArray(data.results[i].uri) && data.results[i].uri.length > 0) {\n\t\t\t\t\t\t\tresults.push(data.results[i].uri[0]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresults.push(data.results[i].uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif (results.length < data.total_results\n\t\t\t\t\t\t\t&& results.length < maxResults) {\n\t\t\t\t\t\tincreasePage();\n\t\t\t\t\t\tdoRequests();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//if notification bar is there, show feedback, or close\n\t\t\t\t\t\tif (results.length > 0) {\n\t\t\t\t\t\t\tyasqe.autocompleters.notifications.hide(yasqe, completer)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tyasqe.autocompleters.notifications.getEl(completer).text(\"0 matches found...\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback(results);\n\t\t\t\t\t\t// requests done! Don't call this function again\n\t\t\t\t\t}\n\t\t\t\t}).fail(function(jqXHR, textStatus, errorThrown) {\n\t\t\t\t\tyasqe.autocompleters.notifications.getEl(completer)\n\t\t\t\t\t\t.empty()\n\t\t\t\t\t\t.append(\"Failed fetching suggestions..\");\n\t\t\t\t\t\n\t\t});\n\t};\n\t//if notification bar is there, show a loader\n\tyasqe.autocompleters.notifications.getEl(completer)\n\t\t.empty()\n\t\t.append($(\"<span>Fetchting autocompletions &nbsp;</span>\"))\n\t\t.append($(yutils.svg.getElement(require('../imgs.js').loader)).addClass(\"notificationLoader\"));\n\tdoRequests();\n};\n\n\n\nmodule.exports = {\n\tfetchFromLov: fetchFromLov,\n\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\n\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\n};","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe) {\n\treturn {\n\t\tisValidCompletionPosition : function() {\n\t\t\tvar token = yasqe.getTokenAt(yasqe.getCursor());\n\t\t\tif (token.type != \"ws\") {\n\t\t\t\ttoken = yasqe.getCompleteToken(token);\n\t\t\t\tif (token && token.string.indexOf(\"?\") == 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tget : function(token) {\n\t\t\tif (token.trim().length == 0) return [];//nothing to autocomplete\n\t\t\tvar distinctVars = {};\n\t\t\t//do this outside of codemirror. I expect jquery to be faster here (just finding dom elements with classnames)\n\t\t\t$(yasqe.getWrapperElement()).find(\".cm-atom\").each(function() {\n\t\t\t\tvar variable = this.innerHTML;\n\t\t\t\tif (variable.indexOf(\"?\") == 0) {\n\t\t\t\t\t//ok, lets check if the next element in the div is an atom as well. In that case, they belong together (may happen sometimes when query is not syntactically valid)\n\t\t\t\t\tvar nextEl = $(this).next();\n\t\t\t\t\tvar nextElClass = nextEl.attr('class');\n\t\t\t\t\tif (nextElClass && nextEl.attr('class').indexOf(\"cm-atom\") >= 0) {\n\t\t\t\t\t\tvariable += nextEl.text();\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//skip single questionmarks\n\t\t\t\t\tif (variable.length <= 1) return;\n\t\t\t\t\t\n\t\t\t\t\t//it should match our token ofcourse\n\t\t\t\t\tif (variable.indexOf(token) !== 0) return;\n\t\t\t\t\t\n\t\t\t\t\t//skip exact matches\n\t\t\t\t\tif (variable == token) return;\n\t\t\t\t\t\n\t\t\t\t\t//store in map so we have a unique list \n\t\t\t\t\tdistinctVars[variable] = true;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t});\n\t\t\tvar variables = [];\n\t\t\tfor (var variable in distinctVars) {\n\t\t\t\tvariables.push(variable);\n\t\t\t}\n\t\t\tvariables.sort();\n\t\t\treturn variables;\n\t\t},\n\t\tasync : false,\n\t\tbulk : false,\n\t\tautoShow : true,\n\t}\n};\n","/**\n * The default options of YASQE (check the CodeMirror documentation for even\n * more options, such as disabling line numbers, or changing keyboard shortcut\n * keys). Either change the default options by setting YASQE.defaults, or by\n * passing your own options as second argument to the YASQE constructor\n */\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tYASQE = require('./main.js');\nYASQE.defaults = $.extend(true, {}, YASQE.defaults, {\n\t\tmode : \"sparql11\",\n\t\t/**\n\t\t * Query string\n\t\t */\n\t\tvalue : \"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nSELECT * WHERE {\\n  ?sub ?pred ?obj .\\n} \\nLIMIT 10\",\n\t\thighlightSelectionMatches : {\n\t\t\tshowToken : /\\w/\n\t\t},\n\t\ttabMode : \"indent\",\n\t\tlineNumbers : true,\n\t    lineWrapping: true,\n\t    \n\t    foldGutter: {rangeFinder:YASQE.fold.brace },\n\t    gutters: [ \"gutterErrorBar\", \"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n//\t\t\t    cell.code_mirror.setOption('foldGutter',{rangeFinder: new CodeMirror.fold.combine(CodeMirror.fold.firstline, CodeMirror.fold.brace) }); \n\t\tmatchBrackets : true,\n\t\tfixedGutter : true,\n\t\tsyntaxErrorCheck: true,\n\t\t/**\n\t\t * Extra shortcut keys. Check the CodeMirror manual on how to add your own\n\t\t * \n\t\t * @property extraKeys\n\t\t * @type object\n\t\t */\n\t\textraKeys : {\n//\t\t\t\t\t\"Ctrl-Space\" : function(yasqe) {\n//\t\t\t\t\t\tYASQE.autoComplete(yasqe);\n//\t\t\t\t\t},\n\t\t\t\"Ctrl-Space\" : YASQE.autoComplete,\n\t\t\t\n\t\t\t\"Cmd-Space\" : YASQE.autoComplete,\n\t\t\t\"Ctrl-D\" : YASQE.deleteLine,\n\t\t\t\"Ctrl-K\" : YASQE.deleteLine,\n\t\t\t\"Cmd-D\" : YASQE.deleteLine,\n\t\t\t\"Cmd-K\" : YASQE.deleteLine,\n\t\t\t\"Ctrl-/\" : YASQE.commentLines,\n\t\t\t\"Cmd-/\" : YASQE.commentLines,\n\t\t\t\"Ctrl-Alt-Down\" : YASQE.copyLineDown,\n\t\t\t\"Ctrl-Alt-Up\" : YASQE.copyLineUp,\n\t\t\t\"Cmd-Alt-Down\" : YASQE.copyLineDown,\n\t\t\t\"Cmd-Alt-Up\" : YASQE.copyLineUp,\n\t\t\t\"Shift-Ctrl-F\" : YASQE.doAutoFormat,\n\t\t\t\"Shift-Cmd-F\" : YASQE.doAutoFormat,\n\t\t\t\"Ctrl-]\" : YASQE.indentMore,\n\t\t\t\"Cmd-]\" : YASQE.indentMore,\n\t\t\t\"Ctrl-[\" : YASQE.indentLess,\n\t\t\t\"Cmd-[\" : YASQE.indentLess,\n\t\t\t\"Ctrl-S\" : YASQE.storeQuery,\n\t\t\t\"Cmd-S\" : YASQE.storeQuery,\n\t\t\t\"Ctrl-Enter\" : YASQE.executeQuery,\n\t\t\t\"Cmd-Enter\" : YASQE.executeQuery,\n\t\t\t\"F11\": function(yasqe) {\n\t\t          yasqe.setOption(\"fullScreen\", !yasqe.getOption(\"fullScreen\"));\n\t        },\n\t        \"Esc\": function(yasqe) {\n\t          if (yasqe.getOption(\"fullScreen\")) yasqe.setOption(\"fullScreen\", false);\n\t        }\n\t\t},\n\t\tcursorHeight : 0.9,\n\n\t\t\n\t\t/**\n\t\t * Show a button with which users can create a link to this query. Set this value to null to disable this functionality.\n\t\t * By default, this feature is enabled, and the only the query value is appended to the link.\n\t\t * ps. This function should return an object which is parseable by jQuery.param (http://api.jquery.com/jQuery.param/)\n\t\t */\n\t\tcreateShareLink: YASQE.createShareLink,\n\t\t\n\t\t/**\n\t\t * Consume links shared by others, by checking the url for arguments coming from a query link. Defaults by only checking the 'query=' argument in the url\n\t\t */\n\t\tconsumeShareLink: YASQE.consumeShareLink,\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t/**\n\t\t * Change persistency settings for the YASQE query value. Setting the values\n\t\t * to null, will disable persistancy: nothing is stored between browser\n\t\t * sessions Setting the values to a string (or a function which returns a\n\t\t * string), will store the query in localstorage using the specified string.\n\t\t * By default, the ID is dynamically generated using the closest dom ID, to avoid collissions when using multiple YASQE items on one\n\t\t * page\n\t\t * \n\t\t * @type function|string\n\t\t */\n\t\tpersistent : function(yasqe) {\n\t\t\treturn \"yasqe_\" + $(yasqe.getWrapperElement()).closest('[id]').attr('id') + \"_queryVal\";\n\t\t},\n\n\t\t\n\t\t/**\n\t\t * Settings for querying sparql endpoints\n\t\t */\n\t\tsparql : {\n\t\t\tshowQueryButton: false,\n\t\t\t\n\t\t\t/**f\n\t\t\t * Endpoint to query\n\t\t\t * \n\t\t\t * @property sparql.endpoint\n\t\t\t * @type String|function\n\t\t\t */\n\t\t\tendpoint : \"http://dbpedia.org/sparql\",\n\t\t\t/**\n\t\t\t * Request method via which to access SPARQL endpoint\n\t\t\t * \n\t\t\t * @property sparql.requestMethod\n\t\t\t * @type String|function\n\t\t\t */\n\t\t\trequestMethod : \"POST\",\n\t\t\t\n\t\t\t/**\n\t\t\t * @type String|function\n\t\t\t */\n\t\t\tacceptHeaderGraph: \"text/turtle,*/*;q=0.9\",\n\t\t\t/**\n\t\t\t * @type String|function\n\t\t\t */\n\t\t\tacceptHeaderSelect: \"application/sparql-results+json,*/*;q=0.9\",\n\t\t\t/**\n\t\t\t * @type String|function\n\t\t\t */\n\t\t\tacceptHeaderUpdate: \"text/plain,*/*;q=0.9\",\n\t\t\t\n\t\t\t/**\n\t\t\t * Named graphs to query.\n\t\t\t */\n\t\t\tnamedGraphs : [],\n\t\t\t/**\n\t\t\t * Default graphs to query.\n\t\t\t */\n\t\t\tdefaultGraphs : [],\n\n\t\t\t/**\n\t\t\t * Additional request arguments. Add them in the form: {name: \"name\", value: \"value\"}\n\t\t\t */\n\t\t\targs : [],\n\n\t\t\t/**\n\t\t\t * Additional request headers\n\t\t\t */\n\t\t\theaders : {},\n\t\t\t\n\t\t\t/**\n\t\t\t * Set of ajax callbacks\n\t\t\t */\n\t\t\tcallbacks : {\n\t\t\t\tbeforeSend : null,\n\t\t\t\tcomplete : null,\n\t\t\t\terror : null,\n\t\t\t\tsuccess : null\n\t\t\t},\n\t\t\thandlers: {}//keep here for backwards compatability\n\t\t},\n\t});\n","'use strict';\nmodule.exports = {\n\tloader: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"100%\" height=\"100%\" fill=\"black\">  <circle cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(45 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.125s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(90 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.25s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(135 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.375s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(180 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.5s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(225 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.625s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(270 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.75s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(315 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.875s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(180 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.5s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle></svg>',\n\tquery: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 80 80\" enable-background=\"new 0 0 80 80\" xml:space=\"preserve\"><g ></g><g >\t<path d=\"M64.622,2.411H14.995c-6.627,0-12,5.373-12,12v49.897c0,6.627,5.373,12,12,12h49.627c6.627,0,12-5.373,12-12V14.411   C76.622,7.783,71.249,2.411,64.622,2.411z M24.125,63.906V15.093L61,39.168L24.125,63.906z\"/></g></svg>',\n\tqueryInvalid: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"0 0 73.627 73.897\"   enable-background=\"new 0 0 80 80\"   xml:space=\"preserve\"      inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"warning.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     inkscape:zoom=\"3.1936344\"     inkscape:cx=\"36.8135\"     inkscape:cy=\"36.9485\"     inkscape:window-x=\"2625\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"svg2\" /><g     transform=\"translate(-2.995,-2.411)\"      /><g     transform=\"translate(-2.995,-2.411)\"     ><path       d=\"M 64.622,2.411 H 14.995 c -6.627,0 -12,5.373 -12,12 v 49.897 c 0,6.627 5.373,12 12,12 h 49.627 c 6.627,0 12,-5.373 12,-12 V 14.411 c 0,-6.628 -5.373,-12 -12,-12 z M 24.125,63.906 V 15.093 L 61,39.168 24.125,63.906 z\"       inkscape:connector-curvature=\"0\"        /></g><path     d=\"M 66.129381,65.903784 H 49.769875 c -1.64721,0 -2.889385,-0.581146 -3.498678,-1.63595 -0.609293,-1.055608 -0.491079,-2.422161 0.332391,-3.848223 l 8.179753,-14.167069 c 0.822934,-1.42633 1.9477,-2.211737 3.166018,-2.211737 1.218319,0 2.343086,0.785407 3.166019,2.211737 l 8.179751,14.167069 c 0.823472,1.426062 0.941686,2.792615 0.33239,3.848223 -0.609023,1.054804 -1.851197,1.63595 -3.498138,1.63595 z M 59.618815,60.91766 c 0,-0.850276 -0.68944,-1.539719 -1.539717,-1.539719 -0.850276,0 -1.539718,0.689443 -1.539718,1.539719 0,0.850277 0.689442,1.539718 1.539718,1.539718 0.850277,0 1.539717,-0.689441 1.539717,-1.539718 z m 0.04155,-9.265919 c 0,-0.873061 -0.707939,-1.580998 -1.580999,-1.580998 -0.873061,0 -1.580999,0.707937 -1.580999,1.580998 l 0.373403,5.610965 h 0.0051 c 0.05415,0.619747 0.568548,1.10761 1.202504,1.10761 0.586239,0 1.075443,-0.415756 1.188563,-0.968489 0.0092,-0.04476 0.0099,-0.09248 0.01392,-0.138854 h 0.01072 l 0.367776,-5.611232 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#aa8800\" /></svg>',\n\tdownload: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" baseProfile=\"tiny\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xml:space=\"preserve\"><g ></g><g >\t<path fill-rule=\"evenodd\" fill=\"#000000\" d=\"M88,84v-2c0-2.961-0.859-4-4-4H16c-2.961,0-4,0.98-4,4v2c0,3.102,1.039,4,4,4h68   C87.02,88,88,87.039,88,84z M58,12H42c-5,0-6,0.941-6,6v22H16l34,34l34-34H64V18C64,12.941,62.939,12,58,12z\"/></g></svg>',\n\tshare: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"  x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\"><path d=\"M36.764,50c0,0.308-0.07,0.598-0.088,0.905l32.247,16.119c2.76-2.338,6.293-3.797,10.195-3.797  C87.89,63.228,95,70.338,95,79.109C95,87.89,87.89,95,79.118,95c-8.78,0-15.882-7.11-15.882-15.891c0-0.316,0.07-0.598,0.088-0.905  L31.077,62.085c-2.769,2.329-6.293,3.788-10.195,3.788C12.11,65.873,5,58.771,5,50c0-8.78,7.11-15.891,15.882-15.891  c3.902,0,7.427,1.468,10.195,3.797l32.247-16.119c-0.018-0.308-0.088-0.598-0.088-0.914C63.236,12.11,70.338,5,79.118,5  C87.89,5,95,12.11,95,20.873c0,8.78-7.11,15.891-15.882,15.891c-3.911,0-7.436-1.468-10.195-3.806L36.676,49.086  C36.693,49.394,36.764,49.684,36.764,50z\"/></svg>',\n\twarning: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   viewBox=\"0 0 66.399998 66.399998\"   enable-background=\"new 0 0 69.3 69.3\"   xml:space=\"preserve\"   height=\"100%\"   width=\"100%\"   inkscape:version=\"0.48.4 r9939\"   ><g      transform=\"translate(-1.5,-1.5)\"     style=\"fill:#ff0000\"><path       d=\"M 34.7,1.5 C 16.4,1.5 1.5,16.4 1.5,34.7 1.5,53 16.4,67.9 34.7,67.9 53,67.9 67.9,53 67.9,34.7 67.9,16.4 53,1.5 34.7,1.5 z m 0,59.4 C 20.2,60.9 8.5,49.1 8.5,34.7 8.5,20.2 20.3,8.5 34.7,8.5 c 14.4,0 26.2,11.8 26.2,26.2 0,14.4 -11.8,26.2 -26.2,26.2 z\"      inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.6,47.1 c -1.4,0 -2.5,0.5 -3.5,1.5 -0.9,1 -1.4,2.2 -1.4,3.6 0,1.6 0.5,2.8 1.5,3.8 1,0.9 2.1,1.3 3.4,1.3 1.3,0 2.4,-0.5 3.4,-1.4 1,-0.9 1.5,-2.2 1.5,-3.7 0,-1.4 -0.5,-2.6 -1.4,-3.6 -0.9,-1 -2.1,-1.5 -3.5,-1.5 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.8,13.9 c -1.5,0 -2.8,0.5 -3.7,1.6 -0.9,1 -1.4,2.4 -1.4,4.2 0,1.1 0.1,2.9 0.2,5.6 l 0.8,13.1 c 0.2,1.8 0.4,3.2 0.9,4.1 0.5,1.2 1.5,1.8 2.9,1.8 1.3,0 2.3,-0.7 2.9,-1.9 0.5,-1 0.7,-2.3 0.9,-4 L 39.4,25 c 0.1,-1.3 0.2,-2.5 0.2,-3.8 0,-2.2 -0.3,-3.9 -0.8,-5.1 -0.5,-1 -1.6,-2.2 -4,-2.2 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /></g></svg>',\n\tfullscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"640\"     inkscape:window-height=\"480\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"0\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m -7.962963,-10 v 38.889 l 16.667,-16.667 16.667,16.667 5.555,-5.555 -16.667,-16.667 16.667,-16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 92.037037,-10 v 38.889 l -16.667,-16.667 -16.666,16.667 -5.556,-5.555 16.666,-16.667 -16.666,-16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M -7.962963,90 V 51.111 l 16.667,16.666 16.667,-16.666 5.555,5.556 -16.667,16.666 16.667,16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M 92.037037,90 V 51.111 l -16.667,16.666 -16.666,-16.666 -5.556,5.556 16.666,16.666 -16.666,16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',\n\tsmallscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m 30.926037,28.889 0,-38.889 -16.667,16.667 -16.667,-16.667 -5.555,5.555 16.667,16.667 -16.667,16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,28.889 0,-38.889 16.667,16.667 16.666,-16.667 5.556,5.555 -16.666,16.667 16.666,16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 30.926037,51.111 0,38.889 -16.667,-16.666 -16.667,16.666 -5.555,-5.556 16.667,-16.666 -16.667,-16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,51.111 0,38.889 16.667,-16.666 16.666,16.666 5.556,-5.556 -16.666,-16.666 16.666,-16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',\n};","'use strict';\n//make sure any console statements\nwindow.console = window.console || {\"log\":function(){}};\n\n/**\n * Load libraries\n */\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tCodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(),\n\tutils = require('./utils.js'),\n\tyutils = require('yasgui-utils'),\n\timgs = require('./imgs.js');\n\nrequire(\"../lib/deparam.js\");\nrequire('codemirror/addon/fold/foldcode.js');\nrequire('codemirror/addon/fold/foldgutter.js');\nrequire('codemirror/addon/fold/xml-fold.js');\nrequire('codemirror/addon/fold/brace-fold.js');\nrequire('codemirror/addon/hint/show-hint.js');\nrequire('codemirror/addon/search/searchcursor.js');\nrequire('codemirror/addon/edit/matchbrackets.js');\nrequire('codemirror/addon/runmode/runmode.js');\nrequire('codemirror/addon/display/fullscreen.js');\nrequire('../lib/flint.js');\n\n\n\n/**\n * Main YASQE constructor. Pass a DOM element as argument to append the editor to, and (optionally) pass along config settings (see the YASQE.defaults object below, as well as the regular CodeMirror documentation, for more information on configurability)\n * \n * @constructor\n * @param {DOM-Element} parent element to append editor to.\n * @param {object} settings\n * @class YASQE\n * @return {doc} YASQE document\n */\nvar root = module.exports = function(parent, config) {\n\tvar rootEl = $(\"<div>\", {class:'yasqe'}).appendTo($(parent));\n\tconfig = extendConfig(config);\n\tvar yasqe = extendCmInstance(CodeMirror(rootEl[0], config));\n\tpostProcessCmElement(yasqe);\n\treturn yasqe;\n};\n\n/**\n * Extend config object, which we will pass on to the CM constructor later on.\n * Need this, to make sure our own 'onBlur' etc events do not get overwritten by\n * people who add their own onblur events to the config Additionally, need this\n * to include the CM defaults ourselves. CodeMirror has a method for including\n * defaults, but we can't rely on that one: it assumes flat config object, where\n * we have nested objects (e.g. the persistency option)\n * \n * @private\n */\nvar extendConfig = function(config) {\n\tvar extendedConfig = $.extend(true, {}, root.defaults, config);\n\t// I know, codemirror deals with  default options as well. \n\t//However, it does not do this recursively (i.e. the persistency option)\n\t\n\treturn extendedConfig;\n};\n/**\n * Add extra functions to the CM document (i.e. the codemirror instantiated\n * object)\n * \n * @private\n */\nvar extendCmInstance = function(yasqe) {\n\t//instantiate autocompleters\n\tyasqe.autocompleters = require('./autocompleters/autocompleterBase.js')(root, yasqe);\n\tif (yasqe.options.autocompleters) {\n\t\tyasqe.options.autocompleters.forEach(function(name) {\n\t\t\tif (root.Autocompleters[name]) yasqe.autocompleters.init(name,root.Autocompleters[name]);\n\t\t})\n\t}\n\t\n\tyasqe.getCompleteToken = function(token, cur) {\n\t\treturn require('./tokenUtils.js').getCompleteToken(yasqe, token, cur);\n\t};\n\tyasqe.getPreviousNonWsToken = function(line, token) {\n\t\treturn require('./tokenUtils.js').getPreviousNonWsToken(yasqe, line, token);\n\t};\n\tyasqe.getNextNonWsToken = function(lineNumber, charNumber) {\n\t\treturn require('./tokenUtils.js').getNextNonWsToken(yasqe, lineNumber, charNumber);\n\t};\n\n\t/**\n\t * Execute query. Pass a callback function, or a configuration object (see\n\t * default settings below for possible values) I.e., you can change the\n\t * query configuration by either changing the default settings, changing the\n\t * settings of this document, or by passing query settings to this function\n\t * \n\t * @method doc.query\n\t * @param function|object\n\t */\n\tyasqe.query = function(callbackOrConfig) {\n\t\troot.executeQuery(yasqe, callbackOrConfig);\n\t};\n\t\n\tyasqe.getUrlArguments = function(config) {\n\t\treturn root.getUrlArguments(yasqe, config);\n\t};\n\t\n\t/**\n\t * Fetch defined prefixes from query string\n\t * \n\t * @method doc.getPrefixesFromQuery\n\t * @return object\n\t */\n\tyasqe.getPrefixesFromQuery = function() {\n\t\treturn require('./prefixUtils.js').getPrefixesFromQuery(yasqe);\n\t};\n\t\n\tyasqe.addPrefixes = function(prefixes) {\n\t\treturn require('./prefixUtils.js').addPrefixes(yasqe, prefixes);\n\t};\n\tyasqe.removePrefixes = function(prefixes) {\n\t\treturn require('./prefixUtils.js').removePrefixes(yasqe, prefixes);\n\t};\n\t\n\tyasqe.getValueWithoutComments = function() {\n\t\tvar cleanedQuery = \"\";\n\t\troot.runMode(yasqe.getValue(), \"sparql11\", function(stringVal, className) {\n\t\t\tif (className != \"comment\") {\n\t\t\t\tcleanedQuery += stringVal;\n\t\t\t}\n\t\t});\n\t\treturn cleanedQuery;\n\t};\n\t/**\n\t * Fetch the query type (e.g., SELECT||DESCRIBE||INSERT||DELETE||ASK||CONSTRUCT)\n\t * \n\t * @method doc.getQueryType\n\t * @return string\n\t * \n\t */\n\t yasqe.getQueryType = function() {\n\t\t return yasqe.queryType;\n\t };\n\t/**\n\t * Fetch the query mode: 'query' or 'update'\n\t * \n\t * @method doc.getQueryMode\n\t * @return string\n\t * \n\t */\n\t yasqe.getQueryMode = function() {\n\t\t var type = yasqe.getQueryType();\n\t\t if (type==\"INSERT\" || type==\"DELETE\" || type==\"LOAD\" || type==\"CLEAR\" || type==\"CREATE\" || type==\"DROP\" || type==\"COPY\" || type==\"MOVE\" || type==\"ADD\") {\n\t\t\t return \"update\";\n\t\t } else {\n\t\t\t return \"query\";\n\t\t }\n\t\t\t\t\n\t };\n\t\n\tyasqe.setCheckSyntaxErrors = function(isEnabled) {\n\t\tyasqe.options.syntaxErrorCheck = isEnabled;\n\t\tcheckSyntax(yasqe);\n\t};\n\t\n\tyasqe.enableCompleter = function(name) {\n\t\taddCompleterToSettings(yasqe.options, name);\n\t\tif (root.Autocompleters[name]) yasqe.autocompleters.init(name,root.Autocompleters[name]);\n\t};\n\tyasqe.disableCompleter = function(name) {\n\t\tremoveCompleterFromSettings(yasqe.options, name);\n\t};\n\treturn yasqe;\n};\n\nvar addCompleterToSettings = function(settings, name) {\n\tif (!settings.autocompleters) settings.autocompleters = [];\n\tsettings.autocompleters.push(name);\n};\nvar removeCompleterFromSettings = function(settings, name) {\n\tif (typeof settings.autocompleters == \"object\") {\n\t\tvar index = $.inArray(name, settings.autocompleters);\n\t\tif (index>=0) {\n\t\t\tsettings.autocompleters.splice(index, 1);\n\t\t\tremoveCompleterFromSettings(settings, name);//just in case. suppose 1 completer is listed twice\n\t\t}\n\t}\n};\nvar postProcessCmElement = function(yasqe) {\n\t/**\n\t * Set doc value\n\t */\n\tvar storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\n\tif (storageId) {\n\t\tvar valueFromStorage = yutils.storage.get(storageId);\n\t\tif (valueFromStorage)\n\t\t\tyasqe.setValue(valueFromStorage);\n\t}\n\t\n\troot.drawButtons(yasqe);\n\n\t/**\n\t * Add event handlers\n\t */\n\tyasqe.on('blur', function(yasqe, eventInfo) {\n\t\troot.storeQuery(yasqe);\n\t});\n\tyasqe.on('change', function(yasqe, eventInfo) {\n\t\tcheckSyntax(yasqe);\n\t\troot.updateQueryButton(yasqe);\n\t\troot.positionButtons(yasqe);\n\t});\n\tyasqe.on('changes', function() {\n\t\t//e.g. on paste\n\t\tcheckSyntax(yasqe);\n\t\troot.updateQueryButton(yasqe);\n\t\troot.positionButtons(yasqe);\n\t});\n\t\n\tyasqe.on('cursorActivity', function(yasqe, eventInfo) {\n\t\tupdateButtonsTransparency(yasqe);\n\t});\n\tyasqe.prevQueryValid = false;\n\tcheckSyntax(yasqe);// on first load, check as well (our stored or default query might be incorrect)\n\troot.positionButtons(yasqe);\n\t\n\t/**\n\t * check url args and modify yasqe settings if needed\n\t */\n\tif (yasqe.options.consumeShareLink) {\n\t\tvar urlParams = $.deparam(window.location.search.substring(1));\n\t\tyasqe.options.consumeShareLink(yasqe, urlParams);\n\t}\n};\n\n\n\n\n/**\n * Update transparency of buttons. Increase transparency when cursor is below buttons\n */\n\nvar updateButtonsTransparency = function(yasqe) {\n\tyasqe.cursor = $(\".CodeMirror-cursor\");\n\tif (yasqe.buttons && yasqe.buttons.is(\":visible\") && yasqe.cursor.length > 0) {\n\t\tif (utils.elementsOverlap(yasqe.cursor, yasqe.buttons)) {\n\t\t\tyasqe.buttons.find(\"svg\").attr(\"opacity\", \"0.2\");\n\t\t} else {\n\t\t\tyasqe.buttons.find(\"svg\").attr(\"opacity\", \"1.0\");\n\t\t}\n\t}\n};\n\n\n\n\n\n\n\n\n\nvar clearError = null;\nvar checkSyntax = function(yasqe, deepcheck) {\n\t\n\tyasqe.queryValid = true;\n\n\tyasqe.clearGutter(\"gutterErrorBar\");\n\t\n\tvar state = null;\n\tfor (var l = 0; l < yasqe.lineCount(); ++l) {\n\t\tvar precise = false;\n\t\tif (!yasqe.prevQueryValid) {\n\t\t\t// we don't want cached information in this case, otherwise the\n\t\t\t// previous error sign might still show up,\n\t\t\t// even though the syntax error might be gone already\n\t\t\tprecise = true;\n\t\t}\n\t\t\n\t\tvar token = yasqe.getTokenAt({\n\t\t\tline : l,\n\t\t\tch : yasqe.getLine(l).length\n\t\t}, precise);\n\t\tvar state = token.state;\n\t\tyasqe.queryType = state.queryType;\n\t\tif (state.OK == false) {\n\t\t\tif (!yasqe.options.syntaxErrorCheck) {\n\t\t\t\t//the library we use already marks everything as being an error. Overwrite this class attribute.\n\t\t\t\t$(yasqe.getWrapperElement).find(\".sp-error\").css(\"color\", \"black\");\n\t\t\t\t//we don't want to gutter error, so return\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tvar warningEl = yutils.svg.getElement(imgs.warning);\n\t\t\tif (state.possibleCurrent && state.possibleCurrent.length > 0) {\n//\t\t\t\twarningEl.style.zIndex = \"99999999\";\n\t\t\t\trequire('./tooltip')(yasqe, warningEl, function() {\n\t\t\t\t\tvar expectedEncoded = [];\n\t\t\t\t\tstate.possibleCurrent.forEach(function(expected){\n\t\t\t\t\t\texpectedEncoded.push(\"<strong style='text-decoration:underline'>\" + $(\"<div/>\").text(expected).html() + \"</strong>\");\n\t\t\t\t\t});\n\t\t\t\t\treturn \"This line is invalid. Expected: \" + expectedEncoded.join(\", \");\n\t\t\t\t});\n\t\t\t}\n\t\t\twarningEl.style.marginTop = \"2px\";\n\t\t\twarningEl.style.marginLeft = \"2px\";\n\t\t\twarningEl.className = 'parseErrorIcon';\n\t\t\tyasqe.setGutterMarker(l, \"gutterErrorBar\", warningEl);\n\t\t\t\n\t\t\tyasqe.queryValid = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tyasqe.prevQueryValid = yasqe.queryValid;\n\tif (deepcheck) {\n\t\tif (state != null && state.stack != undefined) {\n\t\t\tvar stack = state.stack, len = state.stack.length;\n\t\t\t// Because incremental parser doesn't receive end-of-input\n\t\t\t// it can't clear stack, so we have to check that whatever\n\t\t\t// is left on the stack is nillable\n\t\t\tif (len > 1)\n\t\t\t\tyasqe.queryValid = false;\n\t\t\telse if (len == 1) {\n\t\t\t\tif (stack[0] != \"solutionModifier\"\n\t\t\t\t\t\t&& stack[0] != \"?limitOffsetClauses\"\n\t\t\t\t\t\t&& stack[0] != \"?offsetClause\")\n\t\t\t\t\tyasqe.queryValid = false;\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * Static Utils\n */\n// first take all CodeMirror references and store them in the YASQE object\n$.extend(root, CodeMirror);\n\n\n//add registrar for autocompleters\nroot.Autocompleters = {};\nroot.registerAutocompleter = function(name, constructor) {\n\troot.Autocompleters[name] = constructor;\n\taddCompleterToSettings(root.defaults, name);\n}\n\nroot.autoComplete = function(yasqe) {\n\t//this function gets called when pressing the keyboard shortcut. I.e., autoShow = false\n\tyasqe.autocompleters.autoComplete(false);\n};\n//include the autocompleters we provide out-of-the-box\nroot.registerAutocompleter(\"prefixes\", require(\"./autocompleters/prefixes.js\"));\nroot.registerAutocompleter(\"properties\", require(\"./autocompleters/properties.js\"));\nroot.registerAutocompleter(\"classes\", require(\"./autocompleters/classes.js\"));\nroot.registerAutocompleter(\"variables\", require(\"./autocompleters/variables.js\"));\n\n\nroot.positionButtons = function(yasqe) {\n\tvar scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\n\tvar offset = 0;\n\tif (scrollBar.is(\":visible\")) {\n\t\toffset = scrollBar.outerWidth();\n\t}\n\tif (yasqe.buttons.is(\":visible\")) yasqe.buttons.css(\"right\", offset + 6);\n};\n\n/**\n * Create a share link\n * \n * @method YASQE.createShareLink\n * @param {doc} YASQE document\n * @default {query: doc.getValue()}\n * @return object\n */\nroot.createShareLink = function(yasqe) {\n\t//extend existing link, so first fetch current arguments\n\tvar urlParams = $.deparam(window.location.search.substring(1));\n\turlParams['query'] = yasqe.getValue();\n\treturn urlParams;\n};\n\n/**\n * Consume the share link, by parsing the document URL for possible yasqe arguments, and setting the appropriate values in the YASQE doc\n * \n * @method YASQE.consumeShareLink\n * @param {doc} YASQE document\n */\nroot.consumeShareLink = function(yasqe, urlParams) {\n\tif (urlParams.query) {\n\t\tyasqe.setValue(urlParams.query);\n\t}\n};\nroot.drawButtons = function(yasqe) {\n\tyasqe.buttons = $(\"<div class='yasqe_buttons'></div>\").appendTo($(yasqe.getWrapperElement()));\n\t\n\t/**\n\t * draw share link button\n\t */\n\tif (yasqe.options.createShareLink) {\n\t\t\n\t\tvar svgShare = $(yutils.svg.getElement(imgs.share));\n\t\tsvgShare.click(function(event){\n\t\t\tevent.stopPropagation();\n\t\t\tvar popup = $(\"<div class='yasqe_sharePopup'></div>\").appendTo(yasqe.buttons);\n\t\t\t$('html').click(function() {\n\t\t\t\tif (popup) popup.remove();\n\t\t\t});\n\n\t\t\tpopup.click(function(event) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t});\n\t\t\tvar textAreaLink = $(\"<textarea></textarea>\").val(location.protocol + '//' + location.host + location.pathname + \"?\" + $.param(yasqe.options.createShareLink(yasqe)));\n\t\t\t\n\t\t\ttextAreaLink.focus(function() {\n\t\t\t    var $this = $(this);\n\t\t\t    $this.select();\n\n\t\t\t    // Work around Chrome's little problem\n\t\t\t    $this.mouseup(function() {\n\t\t\t        // Prevent further mouseup intervention\n\t\t\t        $this.unbind(\"mouseup\");\n\t\t\t        return false;\n\t\t\t    });\n\t\t\t});\n\t\t\t\n\t\t\tpopup.empty().append(textAreaLink);\n\t\t\tvar positions = svgShare.position();\n\t\t\tpopup.css(\"top\", (positions.top + svgShare.outerHeight()) + \"px\").css(\"left\", ((positions.left + svgShare.outerWidth()) - popup.outerWidth()) + \"px\");\n\t\t})\n\t\t.addClass(\"yasqe_share\")\n\t\t.attr(\"title\", \"Share your query\")\n\t\t.appendTo(yasqe.buttons);\n\t\t\n\t}\n\n\t\n\t/**\n\t * draw fullscreen button\n\t */\n\t\n\tvar toggleFullscreen = $('<div>', {class: 'fullscreenToggleBtns'})\n\t\t.append($(yutils.svg.getElement(imgs.fullscreen))\n\t\t\t.addClass(\"yasqe_fullscreenBtn\")\n\t\t\t.attr(\"title\", \"Set editor full screen\")\n\t\t\t.click(function() {\n\t\t\t\tyasqe.setOption(\"fullScreen\", true);\n\t\t\t}))\n\t\t.append($(yutils.svg.getElement(imgs.smallscreen))\n\t\t\t.addClass(\"yasqe_smallscreenBtn\")\n\t\t\t.attr(\"title\", \"Set editor to normale size\")\n\t\t\t.click(function() {\n\t\t\t\tyasqe.setOption(\"fullScreen\", false);\n\t\t\t}))\n\tyasqe.buttons.append(toggleFullscreen);\n\t\n\t\n\tif (yasqe.options.sparql.showQueryButton) {\n\t\t$(\"<div>\", {class:'yasqe_queryButton'})\n\t\t \t.click(function(){\n\t\t \t\tif ($(this).hasClass(\"query_busy\")) {\n\t\t \t\t\tif (yasqe.xhr) yasqe.xhr.abort();\n\t\t \t\t\troot.updateQueryButton(yasqe);\n\t\t \t\t} else {\n\t\t \t\t\tyasqe.query();\n\t\t \t\t}\n\t\t \t})\n\t\t \t.appendTo(yasqe.buttons);\n\t\troot.updateQueryButton(yasqe);\n\t}\n\t\n};\n\n\nvar queryButtonIds = {\n\t\"busy\": \"loader\",\n\t\"valid\": \"query\",\n\t\"error\": \"queryInvalid\"\n};\n\n/**\n * Update the query button depending on current query status. If no query status is passed via the parameter, it auto-detects the current query status\n * \n * @param {doc} YASQE document\n * @param status {string|null, \"busy\"|\"valid\"|\"error\"}\n */\nroot.updateQueryButton = function(yasqe, status) {\n\tvar queryButton = $(yasqe.getWrapperElement()).find(\".yasqe_queryButton\");\n\tif (queryButton.length == 0) return;//no query button drawn\n\t\n\t//detect status\n\tif (!status) {\n\t\tstatus = \"valid\";\n\t\tif (yasqe.queryValid === false) status = \"error\";\n\t}\n\tif (status != yasqe.queryStatus && (status == \"busy\" || status==\"valid\" || status == \"error\")) {\n\t\tqueryButton\n\t\t\t.empty()\n\t\t\t.removeClass (function (index, classNames) {\n\t\t\t\treturn classNames.split(\" \").filter(function(c) {\n\t\t\t\t\t//remove classname from previous status\n\t\t\t\t    return c.indexOf(\"query_\") == 0;\n\t\t\t\t}).join(\" \");\n\t\t\t})\n\t\t\t.addClass(\"query_\" + status);\n\t\tyutils.svg.draw(queryButton, imgs[queryButtonIds[status]]);\n\t\tyasqe.queryStatus = status;\n\t}\n};\n/**\n * Initialize YASQE from an existing text area (see http://codemirror.net/doc/manual.html#fromTextArea for more info)\n * \n * @method YASQE.fromTextArea\n * @param textArea {DOM element}\n * @param config {object}\n * @returns {doc} YASQE document\n */\nroot.fromTextArea = function(textAreaEl, config) {\n\tconfig = extendConfig(config);\n\t//add yasqe div as parent (needed for styles to be manageable and scoped). \n\t//In this case, I -also- put it as parent el of the text area. This is wrapped in a div now\n\tvar rootEl = $(\"<div>\", {class:'yasqe'}).insertBefore($(textAreaEl)).append($(textAreaEl));\n\tvar yasqe = extendCmInstance(CodeMirror.fromTextArea(textAreaEl, config));\n\tpostProcessCmElement(yasqe);\n\treturn yasqe;\n};\n\n\nroot.storeQuery = function(yasqe) {\n\tvar storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\n\tif (storageId) {\n\t\tyutils.storage.set(storageId, yasqe.getValue(), \"month\");\n\t}\n};\nroot.commentLines = function(yasqe) {\n\tvar startLine = yasqe.getCursor(true).line;\n\tvar endLine = yasqe.getCursor(false).line;\n\tvar min = Math.min(startLine, endLine);\n\tvar max = Math.max(startLine, endLine);\n\t\n\t// if all lines start with #, remove this char. Otherwise add this char\n\tvar linesAreCommented = true;\n\tfor (var i = min; i <= max; i++) {\n\t\tvar line = yasqe.getLine(i);\n\t\tif (line.length == 0 || line.substring(0, 1) != \"#\") {\n\t\t\tlinesAreCommented = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (var i = min; i <= max; i++) {\n\t\tif (linesAreCommented) {\n\t\t\t// lines are commented, so remove comments\n\t\t\tyasqe.replaceRange(\"\", {\n\t\t\t\tline : i,\n\t\t\t\tch : 0\n\t\t\t}, {\n\t\t\t\tline : i,\n\t\t\t\tch : 1\n\t\t\t});\n\t\t} else {\n\t\t\t// Not all lines are commented, so add comments\n\t\t\tyasqe.replaceRange(\"#\", {\n\t\t\t\tline : i,\n\t\t\t\tch : 0\n\t\t\t});\n\t\t}\n\n\t}\n};\n\nroot.copyLineUp = function(yasqe) {\n\tvar cursor = yasqe.getCursor();\n\tvar lineCount = yasqe.lineCount();\n\t// First create new empty line at end of text\n\tyasqe.replaceRange(\"\\n\", {\n\t\tline : lineCount - 1,\n\t\tch : yasqe.getLine(lineCount - 1).length\n\t});\n\t// Copy all lines to their next line\n\tfor (var i = lineCount; i > cursor.line; i--) {\n\t\tvar line = yasqe.getLine(i - 1);\n\t\tyasqe.replaceRange(line, {\n\t\t\tline : i,\n\t\t\tch : 0\n\t\t}, {\n\t\t\tline : i,\n\t\t\tch : yasqe.getLine(i).length\n\t\t});\n\t}\n};\nroot.copyLineDown = function(yasqe) {\n\troot.copyLineUp(yasqe);\n\t// Make sure cursor goes one down (we are copying downwards)\n\tvar cursor = yasqe.getCursor();\n\tcursor.line++;\n\tyasqe.setCursor(cursor);\n};\nroot.doAutoFormat = function(yasqe) {\n\tif (yasqe.somethingSelected()) {\n\t\tvar to = {\n\t\t\tline : yasqe.getCursor(false).line,\n\t\t\tch : yasqe.getSelection().length\n\t\t};\n\t\tautoFormatRange(yasqe, yasqe.getCursor(true), to);\n\t} else {\n\t\tvar totalLines = yasqe.lineCount();\n\t\tvar totalChars = yasqe.getTextArea().value.length;\n\t\tautoFormatRange(yasqe, {\n\t\t\tline : 0,\n\t\t\tch : 0\n\t\t}, {\n\t\t\tline : totalLines,\n\t\t\tch : totalChars\n\t\t});\n\t}\n\n};\n\n\nvar autoFormatRange = function(yasqe, from, to) {\n\tvar absStart = yasqe.indexFromPos(from);\n\tvar absEnd = yasqe.indexFromPos(to);\n\t// Insert additional line breaks where necessary according to the\n\t// mode's syntax\n\tvar res = autoFormatLineBreaks(yasqe.getValue(), absStart, absEnd);\n\n\t// Replace and auto-indent the range\n\tyasqe.operation(function() {\n\t\tyasqe.replaceRange(res, from, to);\n\t\tvar startLine = yasqe.posFromIndex(absStart).line;\n\t\tvar endLine = yasqe.posFromIndex(absStart + res.length).line;\n\t\tfor (var i = startLine; i <= endLine; i++) {\n\t\t\tyasqe.indentLine(i, \"smart\");\n\t\t}\n\t});\n};\n\nvar autoFormatLineBreaks = function(text, start, end) {\n\ttext = text.substring(start, end);\n\tvar breakAfterArray = [ [ \"keyword\", \"ws\", \"prefixed\", \"ws\", \"uri\" ], // i.e. prefix declaration\n\t[ \"keyword\", \"ws\", \"uri\" ] // i.e. base\n\t];\n\tvar breakAfterCharacters = [ \"{\", \".\", \";\" ];\n\tvar breakBeforeCharacters = [ \"}\" ];\n\tvar getBreakType = function(stringVal, type) {\n\t\tfor (var i = 0; i < breakAfterArray.length; i++) {\n\t\t\tif (stackTrace.valueOf().toString() == breakAfterArray[i].valueOf()\n\t\t\t\t\t.toString()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0; i < breakAfterCharacters.length; i++) {\n\t\t\tif (stringVal == breakAfterCharacters[i]) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0; i < breakBeforeCharacters.length; i++) {\n\t\t\t// don't want to issue 'breakbefore' AND 'breakafter', so check\n\t\t\t// current line\n\t\t\tif ($.trim(currentLine) != ''\n\t\t\t\t\t&& stringVal == breakBeforeCharacters[i]) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t};\n\tvar formattedQuery = \"\";\n\tvar currentLine = \"\";\n\tvar stackTrace = [];\n\tCodeMirror.runMode(text, \"sparql11\", function(stringVal, type) {\n\t\tstackTrace.push(type);\n\t\tvar breakType = getBreakType(stringVal, type);\n\t\tif (breakType != 0) {\n\t\t\tif (breakType == 1) {\n\t\t\t\tformattedQuery += stringVal + \"\\n\";\n\t\t\t\tcurrentLine = \"\";\n\t\t\t} else {// (-1)\n\t\t\t\tformattedQuery += \"\\n\" + stringVal;\n\t\t\t\tcurrentLine = stringVal;\n\t\t\t}\n\t\t\tstackTrace = [];\n\t\t} else {\n\t\t\tcurrentLine += stringVal;\n\t\t\tformattedQuery += stringVal;\n\t\t}\n\t\tif (stackTrace.length == 1 && stackTrace[0] == \"sp-ws\")\n\t\t\tstackTrace = [];\n\t});\n\treturn $.trim(formattedQuery.replace(/\\n\\s*\\n/g, '\\n'));\n};\n\nrequire('./sparql.js'),\nrequire('./defaults.js');\n\nroot.version = {\n\t\"CodeMirror\" : CodeMirror.version,\n\t\"YASQE\" : require(\"../package.json\").version,\n\t\"jquery\": $.fn.jquery,\n\t\"yasgui-utils\": yutils.version\n};\n","'use strict';\n/**\n * Append prefix declaration to list of prefixes in query window.\n * \n * @param yasqe\n * @param prefix\n */\nvar addPrefixes = function(yasqe, prefixes) {\n\tvar existingPrefixes = yasqe.getPrefixesFromQuery();\n\t//for backwards compatability, we stil support prefixes value as string (e.g. 'rdf: <http://fbfgfgf>'\n\tif (typeof prefixes == \"string\") {\n\t\taddPrefixAsString(yasqe, prefixes);\n\t} else {\n\t\tfor (var pref in prefixes) {\n\t\t\tif (!(pref in existingPrefixes))\n\t\t\taddPrefixAsString(yasqe, pref + \": <\" + prefixes[pref] + \">\");\n\t\t}\n\t}\n};\n\nvar addPrefixAsString = function(yasqe, prefixString) {\n\tvar lastPrefix = null;\n\tvar lastPrefixLine = 0;\n\tvar numLines = yasqe.lineCount();\n\tfor (var i = 0; i < numLines; i++) {\n\t\tvar firstToken = yasqe.getNextNonWsToken(i);\n\t\tif (firstToken != null\n\t\t\t\t&& (firstToken.string == \"PREFIX\" || firstToken.string == \"BASE\")) {\n\t\t\tlastPrefix = firstToken;\n\t\t\tlastPrefixLine = i;\n\t\t}\n\t}\n\n\tif (lastPrefix == null) {\n\t\tyasqe.replaceRange(\"PREFIX \" + prefixString + \"\\n\", {\n\t\t\tline : 0,\n\t\t\tch : 0\n\t\t});\n\t} else {\n\t\tvar previousIndent = getIndentFromLine(yasqe, lastPrefixLine);\n\t\tyasqe.replaceRange(\"\\n\" + previousIndent + \"PREFIX \" + prefixString, {\n\t\t\tline : lastPrefixLine\n\t\t});\n\t}\n};\nvar removePrefixes = function(yasqe, prefixes) {\n\tvar escapeRegex = function(string) {\n\t\t//taken from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript/3561711#3561711\n\t\treturn string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\t}\n\tfor (var pref in prefixes) {\n\t\tyasqe.setValue(yasqe.getValue().replace(new RegExp(\"PREFIX\\\\s*\" + pref + \":\\\\s*\" + escapeRegex(\"<\" + prefixes[pref] + \">\") + \"\\\\s*\", \"ig\"), ''));\n\t}\n\t\n};\n\n/**\n * Get defined prefixes from query as array, in format {\"prefix:\" \"uri\"}\n * \n * @param cm\n * @returns {Array}\n */\nvar getPrefixesFromQuery = function(yasqe) {\n\tvar queryPrefixes = {};\n\tvar shouldContinue = true;\n\tvar getPrefixesFromLine = function(lineOffset, colOffset) {\n\t\tif (!shouldContinue) return;\n\t\tif (!colOffset) colOffset = 1;\n\t\tvar token = yasqe.getNextNonWsToken(i, colOffset);\n\t\tif (token) {\n\t\t\tif (token.state.possibleCurrent.indexOf(\"PREFIX\") == -1 && token.state.possibleNext.indexOf(\"PREFIX\") == -1) shouldContinue = false;//we are beyond the place in the query where we can enter prefixes\n\t\t\tif (token.string.toUpperCase() == \"PREFIX\") {\n\t\t\t\tvar prefix = yasqe.getNextNonWsToken(i, token.end + 1);\n\t\t\t\tif (prefix) {\n\t\t\t\t\tvar uri = yasqe.getNextNonWsToken(i, prefix.end + 1);\n\t\t\t\t\tif (uri) {\n\t\t\t\t\t\tvar uriString = uri.string;\n\t\t\t\t\t\tif (uriString.indexOf(\"<\") == 0)\n\t\t\t\t\t\t\turiString = uriString.substring(1);\n\t\t\t\t\t\tif (uriString.slice(-1) == \">\")\n\t\t\t\t\t\t\turiString = uriString\n\t\t\t\t\t\t\t\t\t.substring(0, uriString.length - 1);\n\t\t\t\t\t\tqueryPrefixes[prefix.string.slice(0,-1)] = uriString;\n\t\t\t\t\t\t\n\t\t\t\t\t\tgetPrefixesFromLine(lineOffset, uri.end+1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetPrefixesFromLine(lineOffset, prefix.end+1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tgetPrefixesFromLine(lineOffset, token.end+1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgetPrefixesFromLine(lineOffset, token.end+1);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t\n\tvar numLines = yasqe.lineCount();\n\tfor (var i = 0; i < numLines; i++) {\n\t\tif (!shouldContinue) break;\n\t\tgetPrefixesFromLine(i);\n\t\t\n\t}\n\treturn queryPrefixes;\n};\n\n/**\n * Get the used indentation for a certain line\n * \n * @param yasqe\n * @param line\n * @param charNumber\n * @returns\n */\nvar getIndentFromLine = function(yasqe, line, charNumber) {\n\tif (charNumber == undefined)\n\t\tcharNumber = 1;\n\tvar token = yasqe.getTokenAt({\n\t\tline : line,\n\t\tch : charNumber\n\t});\n\tif (token == null || token == undefined || token.type != \"ws\") {\n\t\treturn \"\";\n\t} else {\n\t\treturn token.string + getIndentFromLine(yasqe, line, token.end + 1);\n\t}\n\t;\n};\n\nmodule.exports = {\n\taddPrefixes: addPrefixes,\n\tgetPrefixesFromQuery: getPrefixesFromQuery,\n\tremovePrefixes: removePrefixes\n};\n","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tYASQE = require('./main.js');\nYASQE.executeQuery = function(yasqe, callbackOrConfig) {\n\tvar callback = (typeof callbackOrConfig == \"function\" ? callbackOrConfig: null);\n\tvar config = (typeof callbackOrConfig == \"object\" ? callbackOrConfig : {});\n\t\n\tif (yasqe.options.sparql)\n\t\tconfig = $.extend({}, yasqe.options.sparql, config);\n\t\n\t//for backwards compatability, make sure we copy sparql handlers to sparql callbacks\n\tif (config.handlers) \n\t\t$.extend(true, config.callbacks, config.handlers);\n\t\n\t\n\tif (!config.endpoint || config.endpoint.length == 0)\n\t\treturn;// nothing to query!\n\n\t/**\n\t * initialize ajax config\n\t */\n\tvar ajaxConfig = {\n\t\turl : (typeof config.endpoint == \"function\"? config.endpoint(yasqe): config.endpoint),\n\t\ttype : (typeof config.requestMethod == \"function\"? config.requestMethod(yasqe): config.requestMethod),\n\t\theaders : {\n\t\t\tAccept : getAcceptHeader(yasqe, config),\n\t\t}\n\t};\n\n\t/**\n\t * add complete, beforesend, etc callbacks (if specified)\n\t */\n\tvar handlerDefined = false;\n\tif (config.callbacks) {\n\t\tfor ( var handler in config.callbacks) {\n\t\t\tif (config.callbacks[handler]) {\n\t\t\t\thandlerDefined = true;\n\t\t\t\tajaxConfig[handler] = config.callbacks[handler];\n\t\t\t}\n\t\t}\n\t}\n\tajaxConfig.data = yasqe.getUrlArguments(config);\n\tif (!handlerDefined && !callback)\n\t\treturn; // ok, we can query, but have no callbacks. just stop now\n\t\n\t// if only callback is passed as arg, add that on as 'onComplete' callback\n\tif (callback)\n\t\tajaxConfig.complete = callback;\n\n\t\n\n\t/**\n\t * merge additional request headers\n\t */\n\tif (config.headers && !$.isEmptyObject(config.headers))\n\t\t$.extend(ajaxConfig.headers, config.headers);\n\t\n\tYASQE.updateQueryButton(yasqe, \"busy\");\n\t\n\tvar updateQueryButton = function() {\n\t\tYASQE.updateQueryButton(yasqe);\n\t};\n\t//Make sure the query button is updated again on complete\n\tif (ajaxConfig.complete) {\n\t\tajaxConfig.complete = [updateQueryButton, ajaxConfig.complete];\n\t} else {\n\t\tajaxConfig.complete = updateQueryButton;\n\t}\n\tyasqe.xhr = $.ajax(ajaxConfig);\n};\n\n\nYASQE.getUrlArguments = function(yasqe, config) {\n\tvar queryMode = yasqe.getQueryMode();\n\tvar data = [{\n\t\tname : yasqe.getQueryMode(),//either 'update' or 'query'\n\t\tvalue : yasqe.getValue()\n\t}];\n\t\n\t/**\n\t * add named graphs to ajax config\n\t */\n\tif (config.namedGraphs && config.namedGraphs.length > 0) {\n\t\tvar argName = (queryMode == \"query\" ? \"named-graph-uri\": \"using-named-graph-uri \");\n\t\tfor (var i = 0; i < config.namedGraphs.length; i++)\n\t\t\tdata.push({\n\t\t\t\tname : argName,\n\t\t\t\tvalue : config.namedGraphs[i]\n\t\t\t});\n\t}\n\t/**\n\t * add default graphs to ajax config\n\t */\n\tif (config.defaultGraphs && config.defaultGraphs.length > 0) {\n\t\tvar argName = (queryMode == \"query\" ? \"default-graph-uri\": \"using-graph-uri \");\n\t\tfor (var i = 0; i < config.defaultGraphs.length; i++)\n\t\t\tdata.push({\n\t\t\t\tname : argName,\n\t\t\t\tvalue : config.defaultGraphs[i]\n\t\t\t});\n\t}\n\t\n\t/**\n\t * add additional request args\n\t */\n\tif (config.args && config.args.length > 0) $.merge(data, config.args);\n\t\n\treturn data;\n}\nvar getAcceptHeader = function(yasqe, config) {\n\tvar acceptHeader = null;\n\tif (config.acceptHeader && !config.acceptHeaderGraph && !config.acceptHeaderSelect && !config.acceptHeaderUpdate) {\n\t\t//this is the old config. For backwards compatability, keep supporting it\n\t\tif (typeof config.acceptHeader == \"function\") {\n\t\t\tacceptHeader = config.acceptHeader(yasqe);\n\t\t} else {\n\t\t\tacceptHeader = config.acceptHeader;\n\t\t}\n\t} else {\n\t\tif (yasqe.getQueryMode() == \"update\") {\n\t\t\tacceptHeader = (typeof config.acceptHeader == \"function\"? config.acceptHeaderUpdate(yasqe): config.acceptHeaderUpdate);\n\t\t} else {\n\t\t\tvar qType = yasqe.getQueryType();\n\t\t\tif (qType == \"DESCRIBE\" || qType == \"CONSTRUCT\") {\n\t\t\t\tacceptHeader = (typeof config.acceptHeaderGraph == \"function\"? config.acceptHeaderGraph(yasqe): config.acceptHeaderGraph);\n\t\t\t} else {\n\t\t\t\tacceptHeader = (typeof config.acceptHeaderSelect == \"function\" ? config.acceptHeaderSelect(yasqe): config.acceptHeaderSelect);\n\t\t\t}\n\t\t}\n\t}\n\treturn acceptHeader;\n};\n","'use strict';\n/**\n * When typing a query, this query is sometimes syntactically invalid, causing\n * the current tokens to be incorrect This causes problem for autocompletion.\n * http://bla might result in two tokens: http:// and bla. We'll want to combine\n * these\n * \n * @param yasqe {doc}\n * @param token {object}\n * @param cursor {object}\n * @return token {object}\n * @method YASQE.getCompleteToken\n */\nvar getCompleteToken = function(yasqe, token, cur) {\n\tif (!cur) {\n\t\tcur = yasqe.getCursor();\n\t}\n\tif (!token) {\n\t\ttoken = yasqe.getTokenAt(cur);\n\t}\n\tvar prevToken = yasqe.getTokenAt({\n\t\tline : cur.line,\n\t\tch : token.start\n\t});\n\t// not start of line, and not whitespace\n\tif (\n\t\t\tprevToken.type != null && prevToken.type != \"ws\"\n\t\t\t&& token.type != null && token.type != \"ws\"\n\t\t) {\n\t\ttoken.start = prevToken.start;\n\t\ttoken.string = prevToken.string + token.string;\n\t\treturn getCompleteToken(yasqe, token, {\n\t\t\tline : cur.line,\n\t\t\tch : prevToken.start\n\t\t});// recursively, might have multiple tokens which it should include\n\t} else if (token.type != null && token.type == \"ws\") {\n\t\t//always keep 1 char of whitespace between tokens. Otherwise, autocompletions might end up next to the previous node, without whitespace between them\n\t\ttoken.start = token.start + 1;\n\t\ttoken.string = token.string.substring(1);\n\t\treturn token;\n\t} else {\n\t\treturn token;\n\t}\n};\nvar getPreviousNonWsToken = function(yasqe, line, token) {\n\tvar previousToken = yasqe.getTokenAt({\n\t\tline : line,\n\t\tch : token.start\n\t});\n\tif (previousToken != null && previousToken.type == \"ws\") {\n\t\tpreviousToken = getPreviousNonWsToken(yasqe, line, previousToken);\n\t}\n\treturn previousToken;\n}\nvar getNextNonWsToken = function(yasqe, lineNumber, charNumber) {\n\tif (charNumber == undefined)\n\t\tcharNumber = 1;\n\tvar token = yasqe.getTokenAt({\n\t\tline : lineNumber,\n\t\tch : charNumber\n\t});\n\tif (token == null || token == undefined || token.end < charNumber) {\n\t\treturn null;\n\t}\n\tif (token.type == \"ws\") {\n\t\treturn getNextNonWsToken(yasqe, lineNumber, token.end + 1);\n\t}\n\treturn token;\n};\n\nmodule.exports = {\n\tgetPreviousNonWsToken: getPreviousNonWsToken,\n\tgetCompleteToken: getCompleteToken,\n\tgetNextNonWsToken: getNextNonWsToken,\n};\n\n","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tutils = require('./utils.js');\n\n/**\n * Write our own tooltip, to avoid loading another library for just this functionality. For now, we only use tooltip for showing parse errors, so this is quite a tailored solution\n * Requirements: \n * \t\tposition tooltip within codemirror frame as much as possible, to avoid z-index issues with external things on page\n * \t\tuse html as content\n */\nmodule.exports = function(yasqe, parent, html) {\n\tvar parent = $(parent);\n\tvar tooltip;\n\tparent.hover(function() {\n\t\tif (typeof html == \"function\") html = html();\n\t\ttooltip = $(\"<div>\").addClass('yasqe_tooltip').html(html).appendTo(parent);\n\t\trepositionTooltip();\n\t},\n\tfunction() {\n\t\t$(\".yasqe_tooltip\").remove();\n\t});\n\t\n\t\n\t\n\t/**\n\t * only need to take into account top and bottom offset for this usecase\n\t */\n\tvar repositionTooltip = function() {\n\t\tif ($(yasqe.getWrapperElement()).offset().top >= tooltip.offset().top) {\n\t\t\t//shit, move the tooltip down. The tooltip now hovers over the top edge of the yasqe instance\n\t\t\ttooltip.css('bottom', 'auto');\n\t\t\ttooltip.css('top', '26px');\n\t\t}\n\t};\n};\n\n","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n\nvar keyExists = function(objectToTest, key) {\n\tvar exists = false;\n\ttry {\n\t\tif (objectToTest[key] !== undefined)\n\t\t\texists = true;\n\t} catch (e) {\n\t}\n\treturn exists;\n};\n\nvar getPersistencyId = function(yasqe, persistentIdCreator) {\n\tvar persistencyId = null;\n\n\tif (persistentIdCreator) {\n\t\tif (typeof persistentIdCreator == \"string\") {\n\t\t\tpersistencyId = persistentIdCreator;\n\t\t} else {\n\t\t\tpersistencyId = persistentIdCreator(yasqe);\n\t\t}\n\t}\n\treturn persistencyId;\n};\n\nvar elementsOverlap = (function () {\n    function getPositions( elem ) {\n        var pos, width, height;\n        pos = $( elem ).offset();\n        width = $( elem ).width();\n        height = $( elem ).height();\n        return [ [ pos.left, pos.left + width ], [ pos.top, pos.top + height ] ];\n    }\n\n    function comparePositions( p1, p2 ) {\n        var r1, r2;\n        r1 = p1[0] < p2[0] ? p1 : p2;\n        r2 = p1[0] < p2[0] ? p2 : p1;\n        return r1[1] > r2[0] || r1[0] === r2[0];\n    }\n\n    return function ( a, b ) {\n        var pos1 = getPositions( a ),\n            pos2 = getPositions( b );\n        return comparePositions( pos1[0], pos2[0] ) && comparePositions( pos1[1], pos2[1] );\n    };\n})();\n\nmodule.exports = {\n\tkeyExists: keyExists,\n\tgetPersistencyId: getPersistencyId,\n\telementsOverlap:elementsOverlap,\n};"],"sourceRoot":"/source/"}